#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 164
#define YY_END_OF_BUFFER 165
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1150] =
    {   0,
        0,    0,  161,  161,    2,    2,  165,  163,    4,    4,
      163,  163,  153,  159,  153,  153,  156,  153,  153,  153,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  153,  161,  162,    2,    2,
        3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    4,  148,    0,
        1,  156,  155,  154,  150,  149,  147,  151,  158,  158,

      158,  158,  158,  126,  158,  158,  158,  127,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  128,  158,  158,  129,  130,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  131,
      132,  133,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      134,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      152,  161,  160,    2,    2,    2,    2,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  157,  154,
      114,  158,  115,  158,  158,  116,  117,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,

      158,  158,  138,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  118,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  119,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  120,  158,  158,
      121,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  122,  158,  158,  123,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  124,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      125,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      158,  158,  158,  158,  158,  158,  158,  158,   83,  158,
       84,   47,   85,  158,  158,  158,   86,  158,  158,   87,
      158,  158,  158,  158,  158,   89,  158,  158,  158,   90,
       91,  158,  158,  158,  158,  158,  158,  158,   92,  158,
      158,   93,   94,  158,  158,   95,  158,   96,  137,  158,
      158,  158,  158,  158,  158,   97,  158,   98,   99,  100,
      158,  102,  158,  103,  158,  158,  158,  158,  105,  158,
      158,  158,  158,  158,  106,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  107,  158,  158,  158,  158,

      158,  108,  109,  110,  158,  158,  141,  158,  158,  158,
      158,  158,  158,  158,  158,  111,  158,  112,  158,  113,
      140,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   64,   65,  158,  158,  144,  158,  158,  158,
      158,  158,  158,  158,  158,   66,  158,  158,  158,  158,
      158,   67,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  142,   68,  158,  158,   69,  158,  101,  158,
       70,   71,  158,  158,  158,  158,   72,   73,   74,   75,
      158,  139,  158,  158,  158,   76,   77,  158,  158,  158,
      158,  158,  158,   78,  158,  158,  158,  158,  158,  158,

      158,   79,  158,  158,  158,  158,  158,   80,  158,  158,
      158,   81,  158,  158,  158,   82,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

      158,   37,  158,  104,  158,  158,   38,  146,  158,   39,
      158,  158,  158,  158,   40,  158,   41,  158,   42,   43,
       44,  158,   45,  158,  158,   48,   49,   50,   51,   52,
      158,  158,  158,   53,  136,  158,  158,   54,  158,  158,
      158,  158,   55,  158,  158,   56,  135,   57,  158,   58,
      158,   59,  158,  158,  158,  158,  158,   60,   61,   62,
       63,  158,  158,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   16,   17,   29,   18,
       19,   20,  158,  158,   23,   21,  158,  158,   22,   24,
       46,   25,  158,  158,   30,  158,  158,   31,   32,   26,
      158,  158,   33,  158,   34,  158,  158,   27,  158,  158,
       35,   36,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   88,  158,

       11,   12,  158,   10,   13,  158,   14,  145,   28,  158,
      158,  158,   15,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  158,    7,
      158,    8,    9,  158,    2,    2,    2,    2,    2,    2,
        5,    6,  158,    2,    2,    2,  143,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1157] =
    {   0,
        0,    0,  387,  384,   67,    0,  390, 7345,  133,  135,
      376,    0, 7345, 7345,  131,  377,  133,  132,  371,  343,
      129,  129,  138,  154,  165,  216,  146,  193,  226,  125,
      142,  188,  218,  221,  262,  261,  128,  242,  308,  351,
      271,  290,  179,    0,  146,  285,    0,  339,    0,  147,
      211,  323,  294,    0,    0,  155,  274,  213,  213,  257,
      247,  409,  476,  530,  582,  630,  682,  319,  409,  725,
      411,  283,  340,  468,  776,  825,  487,  476,  518,  871,
      923,  528,  577,  622,  628,  670,  187,  229, 7345,  215,
     7345,  285,  208,  201, 7345, 7345, 7345, 7345,    0,  222,

      228,  289,  301,  274,  570,  323,  326,    0,  334,  343,
      418,  401,  342,  686,  461,  342,  369,  376,  410,  417,
      731,  413,  423,  445,  466,  471,  477,  477,  483,  515,
      500,  515,    0,  537,  537,  768,  543,  572,  563,  583,
      588,  685,  575,  580,  584,  586,  591,  620,  640,  641,
        0,  647,  633,  659,  683,  724,  692,  682,  701,  729,
      734,  780,  728,  745,  730,  751,  751,  772,  749,  776,
      743,  801,  796,  789,  792,  818,  832,  802,  818,  840,
     7345,    0, 7345,    0,  304,    0,  203,    0,  300,  195,
      160,    0,    0,    0,    0,  846,  885,  910,  952,  925,

      972, 1012,  990, 1019, 1021, 1053, 1040, 1093, 1078, 1093,
     1145, 1142,  968, 1138, 1153, 1191, 1194, 1243, 1188, 1237,
     1245, 1251, 1289, 1288, 1301, 1313, 1328, 1332, 1354, 1370,
     1381, 1389, 1438, 1410, 1411, 1439, 1462, 1505, 1553, 1472,
     1488, 1494, 1543, 1552, 1563, 1588, 1599, 1601, 1637, 1639,
     1648, 1682, 1683, 1694, 1687, 1730, 1729, 1744, 1787, 1777,
     1795, 1817, 1828, 1840, 1852, 1698, 1865, 1883, 1900, 1927,
     1913, 1752, 1943, 1965, 1960, 1994, 1990,    0, 7345,  148,
        0,  837,    0,  840,  836,    0,    0,  839,  847,  862,
      882,  881,  883, 1206,  891,  913,  937,  934,  953,  978,

      964,  980,    0,  976,  985, 1024, 1064, 1040, 1039, 1031,
     1060, 1057, 1069,    0, 1087, 1090, 1094, 1104, 1116, 1113,
     1122, 1144, 1151, 1149, 1158, 1189, 1212, 1195, 1209, 1211,
     1235, 1244, 1253, 1251, 1269, 1298, 1300, 1365, 1287, 1295,
        0, 1334, 1353, 1353, 1362, 1381, 1385, 1393, 1380, 1388,
     1389,    0, 1400, 1420, 1421, 1440, 1441, 1454, 1446, 1454,
     1461, 1480, 1503, 1494, 1516, 1516, 1547, 1550, 1563,    0,
     1585, 1598, 1591, 1592, 1609, 1609, 1609, 1622, 1645, 1639,
        0, 1653, 1741, 1916, 1689, 1704, 1706, 1735, 1757, 1743,
     1777, 1869, 1792, 1802,    0,  145, 2005, 2006, 2019, 2034,

     2048, 2061, 2069, 2059, 2104, 2109, 2112, 2111, 2114, 2163,
     2162, 2167, 2203, 2205, 2222, 2227, 2247, 2258, 2270, 2268,
     2296, 2312, 2324, 2350, 2326, 2364, 2372, 2394, 2408, 2413,
     2397, 2426, 2454, 2442, 2458, 2490, 2461, 2505, 2516, 2525,
     2541, 2554, 2560, 2576, 2595, 2583, 2607, 2630, 2645, 2649,
     2646, 2661, 2680, 2695, 2693, 2703, 2736, 2746, 2740, 2753,
     2792, 2798, 2803, 2807, 2833, 2844, 2849, 2854, 2874, 2890,
     2893, 2901, 2931, 2940, 2933, 2974, 2982, 2996, 3001, 3029,
     3044, 3036, 3058, 3076, 3088, 3090, 3102, 3090, 3131, 3144,
     3147, 3180, 3188, 3191, 3213, 3231, 3239, 3238, 3273, 3271,

     3285, 3310, 3317, 3326, 3336, 3364, 3374, 3358, 3409, 3410,
     1835, 1836, 1836, 1849, 1872, 1891, 1906, 1944,    0, 1949,
        0,    0,    0, 1982, 1991, 2011,    0, 2032, 2044, 2045,
     2057, 2064, 2057, 2096, 2121, 2113, 2139, 2138, 2155,    0,
        0, 2155, 2159, 2155, 2158, 2185, 2186, 2186,    0, 2202,
     2228,    0,    0, 2229, 2217,    0, 2227,    0,    0, 2265,
     2258, 2253, 2263, 2271, 2316,    0, 2279,    0,    0,    0,
     2279,    0, 2303,    0, 2320, 2317, 2335, 2327,    0, 2364,
     2388, 2389, 2403, 2434,    0, 2466, 2475, 2469, 2479, 2477,
     2481, 2519, 2510, 2522, 2561,    0, 2563, 2572, 2571, 2582,

     2605,    0,    0, 2622, 2633, 2633,    0, 2671, 2667, 2671,
     2695, 2682, 2699, 2738, 2738,    0, 2732,    0, 2751,    0,
        0, 3415, 3431, 3453, 3462, 3461, 3456, 3497, 3507, 3508,
     3513, 3519, 3555, 3561, 3567, 3562, 3573, 3609, 3615, 3607,
     3647, 3651, 3660, 3662, 3698, 3707, 3712, 3733, 3751, 3750,
     3753, 3776, 3794, 3795, 3810, 3836, 3852, 3858, 3863, 3887,
     3901, 3910, 3912, 3916, 3941, 3959, 3963, 3974, 3979, 4000,
     4021, 4011, 4023, 4037, 4054, 4070, 4065, 4093, 4102, 4111,
     4135, 4144, 4153, 4184, 4188, 4196, 4230, 4218, 4244, 4250,
     4272, 4279, 4290, 4295, 4311, 4326, 4337, 4342, 4358, 4384,

     4373, 4405, 4420, 4426, 4418, 4460, 4461, 4464, 4472, 4504,
     4512, 4513, 4526, 4538, 4547, 4564, 4563, 4589, 4607, 4593,
     4636, 4637, 4648, 4679, 4683, 4688, 4719, 4722, 4732, 4743,
     4751, 4769,    0,    0, 2733, 2756,    0, 2758, 2751, 2774,
     2796, 2789, 2789, 2804, 2824,    0, 2823, 2838, 2856, 2861,
     2871,    0, 2892, 2902, 2910, 2922, 2937, 2930, 2940, 2943,
     2955, 2962,    0,    0, 2956, 2966,    0, 2973,    0, 2961,
        0,    0, 2979, 2995, 3020, 3022,    0,    0,    0,    0,
     3046,    0, 3052, 3057, 3076,    0,    0, 3101, 3101, 3103,
     3130, 3142, 3140,    0, 3152, 3156, 3156, 3159, 3180, 3193,

     3213, 3201, 3215, 3223, 3252, 3267, 3271,    0, 3269, 3278,
     3301,    0, 3289, 3315, 3321,    0, 4777, 4791, 4799, 4813,
     4821, 4835, 4849, 4860, 4875, 4886, 4908, 4915, 4927, 4939,
     4953, 4961, 4972, 4953, 4993, 5001, 5006, 5019, 5008, 5031,
     5055, 5069, 5070, 5074, 5067, 5121, 5118, 5123, 5147, 5125,
     5166, 5174, 5190, 5204, 5218, 5234, 5242, 5262, 5260, 5278,
     5291, 5304, 5322, 5335, 5347, 5355, 5370, 5393, 5402, 5401,
     5424, 5409, 5447, 5449, 5463, 5465, 5478, 5491, 5503, 5511,
     5536, 5554, 5561, 5575, 5587, 5600, 5608, 5620, 5606, 5641,
     5653, 5662, 5669, 5687, 5684, 5719, 5713, 5730, 5732, 5748,

     3321,    0, 3320,    0, 3332, 3343, 3343,    0, 3374,    0,
     3380, 3399, 3392, 3388,    0, 3424,    0, 3439,    0,    0,
        0, 3442,    0, 3442, 3444,    0,    0,    0,    0,    0,
     3454, 3514, 3523,    0,    0, 3513, 3525,    0, 3537, 3560,
     3541, 3554,    0, 3575, 3583, 3592,    0,    0, 3606,    0,
     3610,    0, 3624, 3627, 3609, 3639, 3644,    0,    0,    0,
        0, 3660, 3670, 5764, 5773, 5773, 5789, 5808, 5828, 5817,
     5838, 5857, 5871, 5880, 5899, 5913, 5922, 5941, 5960, 5964,
     5983, 6002, 6006, 6025, 6031, 6045, 6060, 6066, 6079, 6090,
     6109, 6120, 6123, 6150, 6148, 6171, 6186, 6190, 6198, 6218,

     6233, 6237, 6249, 6261, 6272, 6287, 6291, 6322, 6327, 6330,
     6341, 6360, 6371, 6374, 6390, 6415, 6420, 6431, 6453, 6462,
     6471, 6493, 6502, 6504, 6525, 6517,    0,    0,    0,    0,
        0,    0, 3682, 3695,    0,    0, 3712, 3706,    0,    0,
        0,    0, 3725, 3720,    0, 3740, 3765,    0,    0,    0,
     3751, 3791,    0, 3785,    0, 3794, 3807,    0, 3801, 3820,
        0,    0, 6538, 6547, 6561, 6580, 6589, 6603, 6609, 6628,
     6647, 6649, 6663, 6678, 6681, 6703, 6717, 6722, 6731, 6738,
     6756, 6770, 6767, 6781, 6795, 6809, 6823, 6831, 6849, 6857,
     6871, 6887, 6913, 6909, 6932, 6934, 6956, 6975,    0, 3824,

        0,    0, 3842,    0,    0, 3845,    0,    0,    0, 3839,
     3858, 3873,    0, 6978, 7004, 6980, 7016, 7029, 7028, 7030,
     7076, 7077, 7078, 7082, 7120, 7121, 7123, 7135, 3903,    0,
     3895,    0,    0, 3921, 7161, 7169, 7171, 7190, 7204, 7183,
        0,    0, 3932, 7215, 7229, 7234,    0, 7250, 7345, 7314,
     7319,  135, 7324, 7329, 7334, 7339
    } ;

static const flex_int16_t yy_def[1157] =
    {   0,
     1149,    1, 1150, 1150, 1149,    5, 1149, 1149, 1149, 1149,
     1149, 1151, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1149, 1153, 1149, 1154, 1154,
     1149, 1154, 1155, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1156, 1156,   63,   63,   63,   64,   64,   64,   66,
       64,   63,   63,   63,   64,   64,   64,   76,   63,   63,
       64,   66,   64,   64,   64,   63, 1154, 1149, 1149, 1151,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1152, 1152,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1149, 1153, 1149, 1154, 1154, 1154, 1155, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154,   63,   63,   63,   66,   64,

       64,   76,   76,   64,   64,   66,   64,   66,   63,   63,
       66,   66,   76,   63,   66,   66,   66,   63,   66,   66,
       63,   76,   63,   66,   63,   63,   66,   66,   76,   76,
       63,   63,   66,   66,   63,   63,   76,   76,   76,   76,
       76,   76,   76,   76,   66,   64,   76,   76,   76,   76,
       76,   64,   63,   64,   66,   66,   66,   64,   66,   64,
       64,   64,   64,   64,   66,   63,   66,   66,   64,   66,
       66,   63,   66,   63,   63,   63,   64, 1154, 1149, 1149,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1154, 1154,   64,   63,   63,   63,

       66,   66,   66,   63,   63,   63,   63,   66,   66,  218,
       64,   76,   76,   76,   63,   64,   66,   63,   63,   66,
       63,   64,   63,   63,   63,   63,   63,   63,   63,   63,
       64,   63,   63,   66,   66,   64,   66,   63,   64,   64,
       64,   66,   66,   76,   64,   63,   63,   64,   64,   64,
       63,   63,   63,   63,   76,   76,   76,   76,   63,   63,
       63,   64,   64,   64,   76,   76,   76,   76,   66,   76,
       66,   63,   63,   64,   66,   66,   66,   64,   64,   64,
       64,   66,   63,   63,   63,   63,   63,   66,   66,   66,
       66,   66,   66,   66,   63,   63,   63,   66,   66,   63,

       63,   64,   66,   76,   76,   76,   76,   76,   64,   64,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152,   64,   64,   63,   64,   76,   63,   76,   63,   63,
       64,   64,   64,   64,   64,   63,   64,   64,   64,   66,
       66,   66,   66,   76,   76,   64,   64,   64,   63,   66,
       66,   66,   66,   66,   76,   76,   64,   64,   63,   63,
       63,   64,   64,   64,   64,   64,   64,   76,   76,   76,
       63,   76,   66,   76,   76,   76,   76,   66,   66,   66,
       66,   66,   66,   66,   66,   63,   66,   64,   64,   64,
       64,   63,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   66,   66,   66,   66,   63,   63,
       63,   63,   63,   63,   66,   63,   66,   66,   66,   66,
       76,   64,   64,   64,   63,   64,   64,   76,   76,   63,
       63,   63, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152,   63,   63,   63,   63,
       63,   63,   63,   64,   64,   76,   76,   64,   63,   63,
       63,   63,   64,   66,   63,   63,   63,   63,   66,   63,
       63,   63,   63,   66,   63,   63,   63,   63,   63,   66,
       66,   66,   66,   66,   66,   66,   66,   63,   66,   66,
       66,   66,   66,   66,   63,   63,   64,   64,   64,   64,
       64,   63,   64,   64,   63,   63,   63,   63,   64,   64,
       64,   64,   63,   63,   64,   66,   64,   64,   66,   64,
       64,   64,   63,   63,   63,   63,   66,   64,   64,   64,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152,   63,   63,   66,   66,   66,   63,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   63,   63,   66,   66,   66,   66,
       66,   66,   66,   64,   63,   64,   64,   64,   66,   64,

       64,   64,   63,   63,   64,   64,   64,   64,   66,   66,
       66,   66,   66,   66,   66,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   66, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152,   66,   66,   66,   66,   66,   66,   63,   64,
       64,   64,   63,   63,   63,   63,   63,   63,   63,   66,
       66,   64,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   64,   64,   64,   64,   63,   63,   63, 1152, 1152,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152,   63,   63,   63,   63,   63,   63,   63,
       64,   64,   64,   64,   63,   63,   63,   63, 1152, 1152,
     1152, 1152, 1152, 1152,   63,   63,   66,   66,   66,   63,
     1152, 1152, 1152,   63,   63,   66, 1152,   66,    0, 1149,
     1149, 1149, 1149, 1149, 1149, 1149
    } ;

static const flex_int16_t yy_nxt[7413] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   44,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   44,   46,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,

       82,   83,   84,   85,   86,   85,   49,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
       85,   86,   85,   87,   88,   88,   88,   88,   91,   99,
       92,   94,   92,   95,   96,  100,  105,  101,  185,   88,
      106,  109,  138,  102,  396,  103,  107,  280,  110,  139,
      104,  157,  188,  180,  189,  111,  108,  113,  112,  396,
      128,  114,  100,  105,  101,  115,  129,  106,  109,  138,
      102,  116,  103,  107,  117,  110,  139,  104,  157,  118,
      180,  119,  111,  108,  113,  112,  120,  128,  114,  178,

      179,  121,  115,  129,  190,  140,  130,  395,  116,  141,
      280,  117,   88,   88,  131,  142,  118,   93,  119,  279,
      132,  191,  189,  120,  192,  193,  178,  179,  121,  122,
       88,   88,  140,  130,  146,  143,  141,  123,  281,  144,
      124,  131,  142,  125,  133,  145,  126,  132,  147,  127,
      134,  135,  136,  278,  148,  149,  122,  137,  195,  158,
      282,  146,  143,  159,  123,  281,  144,  124,  194,  160,
      125,  133,  145,  126,  154,  147,  127,  134,  135,  136,
      150,  148,  149,  190,  137,  155,  158,  282,  151,  287,
      159,  156,  152,   94,   92,  153,  160,  173,  184,  174,

      236,  154,  175,  176,  196,  185,   88,  150,  191,  189,
      196,  177,  155,  283,  285,  151,  287,  286,  156,  152,
      196,  284,  153,  161,  173,  162,  174,  236,  163,  175,
      176,  196,  196,  164,  186,  165,  166,  196,  177,  196,
      283,  285,  291,  225,  286,  183,  196,  196,  284,  226,
      161,  181,  162,  292,   98,  163,  295,  237,  293,  196,
      164,  238,  165,  166,  167,  294,  196,  239,  168,  291,
      225,  169,  170,  196,  302,  311,  226,  196,  171,  303,
      292,  172,   97,  295,  237,  293,   93,   89,  238, 1149,
       48,  167,  294,   48,  239,  168,  312, 1149,  169,  170,

     1149,  302,  311, 1149,  196,  171,  303,  313,  172,  184,
      184, 1149,  184,  184,  184,  184,  184,  184,  300,  184,
      184,  184,  227,  312,  196,  197,  314,  198,  301,  196,
      228,  196,  315,  199,  313,  200,  229,  321,  235,  196,
      201,  196,  296,  297,  298,  300,  299,  322, 1149,  227,
     1149,  196,  197,  314,  198,  301,  196,  228,  196,  315,
      199, 1149,  200,  229,  321,  235,  196,  201,  196,  296,
      297,  298,  323,  299,  322,  184,  184,  184, 1149,  184,
      184,  184,  184,  184,  184,  240,  184,  184,  184,  241,
     1149,  309,  310,  202,  196,  242,  324,  203,  325,  323,

      251,  326,  196,  204,  327,  196,  196,  196, 1149,  254,
      328,  252,  240,  205,  196, 1149,  241,  253,  309,  310,
      202,  196,  242,  324,  203,  325,  331,  251,  326,  196,
      204,  327,  196,  196,  196,  255,  254,  328,  252,  256,
      205,  196,  184,  206,  253,  257,  329,  196,  332,  330,
      207,  196,  196,  331,  270,  196,  271,  208,  333,  272,
      209, 1149,  255, 1149,  196,  334,  256,  196, 1149,  339,
      206, 1149,  257,  329,  196,  332,  330,  207,  196,  196,
     1149,  270,  196,  271,  208,  333,  272,  209,  288,  289,
      273,  196,  334,  340,  196,  210,  339,  196,  274,  211,

      341,  342,  290,  212,  196,  348,  349,  196, 1149,  213,
      350,  343,  214,  344, 1149,  288,  289,  273,  351,  196,
      340, 1149,  210,  352,  196,  274,  211,  341,  342,  290,
      212,  196,  348,  349,  196,  196,  213,  350,  343,  214,
      344,  196,  275,  276,  353,  351,  196,  196,  196,  196,
      352,  196,  196,  354,  215,  196,  216,  196,  196,  355,
     1149,  217,  196,  356, 1149,  357,  218,  196,  196,  275,
      276,  353, 1149, 1149,  196,  196,  196, 1149,  196,  196,
      354,  215,  196,  216,  196,  196,  355,  277,  217,  358,
      356,  196,  357,  218,  196,  219,  359,  196,  345,  304,

      346,  305,  196,  220,  306,  362,  221,  196,  363,  222,
      307,  347,  223,  364,  277,  224,  358,  308,  196, 1149,
      365, 1149,  219,  359,  196,  345,  304,  346,  305,  196,
      220,  306,  362,  221,  196,  363,  222,  307,  347,  223,
      364,  360,  224,  230,  308,  361,  316,  365,  317,  231,
      232,  233,  318,  366,  367,  371,  234, 1149,  372,  319,
      373,  196, 1149,  320,  374,  375,  378, 1149,  360, 1149,
      230,  381,  361,  316, 1149,  317,  231,  232,  233,  318,
      366,  367,  371,  234,  335,  372,  319,  373,  196,  243,
      320,  374,  375,  378,  336,  368,  196,  376,  381,  337,

      338,  379,  380,  244,  369,  386,  196, 1149,  377,  245,
      246,  335,  370,  387,  382, 1149,  243,  384, 1149,  392,
      385,  336,  368,  196,  376, 1149,  337,  338,  379,  380,
      244,  369,  386,  196,  383,  377,  245,  246,  196,  370,
      387,  382,  388,  247,  384,  196,  392,  385,  389,  390,
      393,  248,  196,  394,  511,  249, 1149,  512,  250, 1149,
      513,  383,  391,  196, 1149,  196,  514,  196,  515,  388,
      247, 1149,  196,  196, 1149,  389,  390,  393,  248,  196,
      394,  511,  249,  196,  512,  250,  258,  513,  259,  391,
      196,  260,  196,  514,  196,  515,  261,  516,  262,  263,

      196,  397,  196,  517, 1149,  518,  196,  519,  196, 1149,
      196, 1149,  196,  258, 1149,  259, 1149, 1149,  260,  196,
     1149,  523,  196,  261,  516,  262,  263,  196,  397,  196,
      517,  196,  518,  196,  519,  196,  264,  196,  401,  196,
      265,  402,  398,  266,  267,  196,  524,  196,  523,  196,
      268, 1149,  196,  269,  196,  196, 1149, 1149,  196, 1149,
     1149, 1149,  525,  264,  196,  401,  526,  265,  402,  398,
      266,  267,  196,  524,  196, 1149,  399,  268,  196,  196,
      269, 1149,  196,  196,  400,  196,  196,  403,  196,  525,
      527,  528,  196,  526,  196,  529, 1149,  530,  196,  196,

      531,  427,  196,  399, 1149,  196,  532, 1149,  196,  407,
      196,  400,  196,  196,  403,  196,  196,  527,  528,  196,
      196,  196,  529,  196,  530,  196,  196,  531,  427,  196,
      404,  405,  196,  532,  196,  196,  407,  533,  196,  196,
     1149,  196,  196,  196,  406,  196,  408,  196,  196,  196,
      196,  196, 1149,  411, 1149,  536,  537,  404,  405,  196,
      196,  196, 1149,  538,  533,  196,  196,  196,  196,  196,
      196,  406,  196,  408,  539,  196,  196,  409,  196,  196,
      411,  534,  536,  537,  410,  540,  541,  196, 1149,  196,
      538, 1149, 1149, 1149,  196,  416,  535,  196, 1149,  196,

      542,  539, 1149, 1149,  409,  417,  196,  543,  534,  544,
      196,  410,  540,  541,  196,  196,  196,  412,  413,  414,
      196,  415,  416,  535,  196,  418,  196,  542, 1149,  196,
      419, 1149,  417, 1149,  543,  545,  544,  196, 1149, 1149,
      546,  196,  196,  547,  412,  413,  414,  196,  415, 1149,
     1149,  196,  418,  548, 1149,  196,  196,  419,  420,  196,
      421,  549,  545,  422,  550,  428,  196,  546,  196,  423,
      547,  196,  425,  426,  551,  196,  424,  196,  196,  196,
      548,  196,  196,  552,  429,  420,  196,  421,  549,  196,
      422,  550,  428,  196, 1149,  196,  423, 1149,  196,  425,

      426,  551,  196,  424,  196,  196,  196,  430,  196,  431,
      552,  429,  437,  553,  196,  196,  196,  196,  196,  196,
      196,  520,  196,  521,  196,  196,  554,  196,  555,  556,
      196, 1149,  557, 1149,  430, 1149,  431, 1149,  522,  437,
      553,  196,  196, 1149,  196,  196,  196,  196,  520,  196,
      521,  196,  196,  554,  196,  555,  556,  196,  432,  557,
      433,  438,  196,  196,  434,  522,  196,  558,  196,  196,
      196,  435,  439,  196,  559,  436,  560,  196,  561, 1149,
      196,  440,  196, 1149,  196,  432,  562,  433,  438,  196,
      196,  434, 1149,  196,  558,  196,  196,  196,  435,  439,

      196,  559,  436,  560,  196,  561,  196,  196,  440,  196,
      196,  196,  442,  562,  196,  563,  441,  564,  196,  196,
      567,  568,  196, 1149,  196, 1149,  196, 1149,  443, 1149,
      196, 1149, 1149,  196,  196, 1149, 1149,  196,  196,  442,
      444,  196,  563,  441,  564,  196,  196,  567,  568,  196,
      196,  196,  196,  196,  196,  443,  196,  196,  447,  445,
     1149,  196,  446,  196,  196,  196,  569,  444,  196, 1149,
      570, 1149,  196, 1149,  571, 1149, 1149,  196,  572,  196,
      196,  196,  565,  196,  196,  447,  445,  448,  196,  446,
      196,  196,  566,  569,  573,  196,  196,  570,  196,  196,

      196,  571,  449,  196,  574,  572,  196,  196,  196,  565,
      196,  196,  575,  576,  448,  196,  196,  450,  196,  566,
      577,  573,  578,  196,  579,  196,  196,  196,  196,  449,
      196,  574,  456,  196,  196,  196,  455,  196,  196,  575,
      576,  196, 1149,  196,  450,  196,  196,  577,  196,  578,
      580,  579,  581,  196,  451,  196,  196,  582,  583,  456,
      196,  196,  196,  455,  452,  196,  196,  584,  196,  453,
      454, 1149,  585,  196,  196,  196,  457,  580, 1149,  581,
      458,  451,  586,  196,  582,  583,  587,  196,  196,  196,
      196,  452,  196,  196,  584,  196,  453,  454,  196,  585,

     1149,  196,  464,  457, 1149,  196,  196,  458, 1149,  586,
      588, 1149,  196,  587,  465,  196,  589,  196,  196,  196,
      466,  196,  196,  196,  196,  196,  590,  196,  459,  464,
      460,  196,  196,  196, 1149,  196,  591,  588,  196,  196,
      592,  465, 1149,  589, 1149,  196, 1149,  466,  196, 1149,
      196,  196, 1149,  590,  196,  459, 1149,  460,  196, 1149,
     1149,  196,  196,  591,  593,  196,  461,  592,  462,  196,
      196,  196, 1149,  196, 1149,  467,  196,  594,  196,  463,
      595, 1149,  196,  196,  468,  196,  196,  469,  196,  196,
     1149,  593, 1149,  461,  196,  462,  196,  196,  196,  196,

      196,  470,  467,  196,  594,  196,  463,  595,  196,  196,
      196,  468,  196,  196,  469,  196,  196,  471,  196,  196,
      596,  196,  597,  598,  599,  196,  196,  196,  470,  196,
     1149,  196,  196,  600,  196,  196, 1149,  601, 1149, 1149,
     1149,  602,  196, 1149,  471,  196,  196,  596,  603,  597,
      598,  599,  196,  472,  196,  196,  196,  196,  196,  196,
      600,  196,  604,  196,  601,  196,  196,  196,  602,  196,
      196,  473,  196, 1149,  196,  603,  605, 1149,  474,  606,
      472,  196,  196, 1149,  196, 1149, 1149, 1149, 1149,  604,
      196, 1149,  196,  196,  196,  475,  196,  196,  473,  196,

      476,  196,  196,  605,  477,  474,  606,  478,  196,  196,
      196,  196,  196,  479,  196,  494,  611,  612,  480,  196,
      196,  196,  475,  196,  196,  196, 1149,  476, 1149,  196,
     1149,  477,  613, 1149,  478,  196,  196,  196,  196,  196,
      479,  196,  494,  611,  612,  480,  196,  196,  196,  481,
      196,  196,  196,  482,  196,  196,  196,  196,  607,  613,
      196,  196,  196, 1149,  483,  196,  196,  608,  614,  196,
     1149,  196,  615,  503,  196, 1149,  481, 1149,  616,  196,
      482,  196,  196,  196,  196,  607, 1149,  196,  196,  196,
      196,  483,  196,  196,  608,  614,  196,  196,  196,  615,

      503,  196,  484, 1149,  487,  616,  196,  196,  488,  617,
     1149,  485,  620,  196, 1149,  196,  196,  196,  196,  486,
     1149, 1149,  196,  196,  196,  196, 1149, 1149, 1149,  484,
      196,  487,  621, 1149,  196,  488,  617,  196,  485,  620,
      196,  490,  196, 1149,  196,  196,  486,  489,  196,  196,
      196, 1149,  196,  196,  491,  196, 1149,  196,  196,  621,
      196, 1149, 1149, 1149,  196,  733,  734,  196,  490, 1149,
      196,  196, 1149,  735,  489,  196,  196,  492,  196,  736,
      196,  491,  196,  196, 1149,  196, 1149,  196,  493,  196,
      495,  496,  733,  734,  196,  618,  196,  196,  737,  619,

      735,  196, 1149,  196,  492,  196,  736,  196,  738,  196,
      196,  497, 1149,  498,  196,  493,  196,  495,  496,  196,
      196, 1149,  618,  196, 1149,  737,  619,  196,  196,  502,
      196, 1149,  739,  499,  196,  738,  196,  196,  497,  196,
      498,  196, 1149,  609,  196,  610,  196,  196,  500,  196,
     1149,  501, 1149,  196,  196, 1149,  502,  196,  196,  739,
      499,  740,  741,  196,  196, 1149,  196,  504, 1149,  196,
      609,  196,  610,  505,  196,  500,  196,  508,  501,  196,
      196,  196,  506, 1149, 1149,  196,  196,  196,  740,  741,
      196, 1149,  196, 1149,  504,  507,  196,  196, 1149, 1149,

      505,  196,  196,  510,  508, 1149,  196,  742,  196,  506,
      196,  196,  743,  196,  196,  196, 1149,  196,  196,  196,
      196,  196,  507,  622,  196,  196,  509,  196, 1149,  196,
      510,  196,  196,  196,  742,  196,  196,  196,  196,  743,
      196,  744,  196,  196,  196,  196,  196,  196,  196, 1149,
      622,  623,  196,  509,  196,  196,  196, 1149,  196,  196,
      196,  196,  196,  196,  745, 1149, 1149,  196,  744, 1149,
      196,  196,  624,  196,  196,  746,  196,  747,  623,  196,
      196,  748,  196,  196,  196,  196,  625,  196,  196,  749,
      750,  745,  196,  196, 1149,  196,  196,  196,  196,  624,

      196,  196,  746,  196,  747,  196,  196,  196,  748, 1149,
     1149,  196,  196,  625,  196, 1149,  749,  750, 1149,  196,
      196,  196,  196,  196,  196,  626,  196,  196,  751,  196,
      196,  196,  196,  628,  752,  629,  196,  196,  630,  196,
      196,  196,  196,  753,  627,  196,  196,  196,  196,  196,
      196, 1149,  626,  196,  754,  751,  196,  196,  196,  755,
      628,  752,  629,  196,  196,  630,  196,  196,  196,  196,
      753,  627,  196,  196,  196,  196,  196,  196,  631,  756,
      632,  754,  196,  757,  196,  196,  755,  758,  759,  196,
      760,  196,  634,  196, 1149,  633, 1149,  196,  761,  762,

      635, 1149,  196,  763, 1149,  631,  756,  632, 1149,  196,
      757,  196,  196, 1149,  758,  759,  196,  760,  196,  634,
      196,  196,  633,  196,  196,  761,  762,  635,  636,  196,
      763,  196, 1149,  196,  764,  196,  196,  637,  196,  196,
      639,  765,  766,  196, 1149,  767, 1149,  196,  196,  196,
      196, 1149, 1149,  768,  196,  636,  196,  196,  196,  638,
      196,  764,  196,  196,  637,  196,  196,  639,  765,  766,
      196,  196,  767,  196,  196,  641,  196, 1149,  640,  196,
      768,  196,  769,  196,  196,  196,  638,  196,  770,  771,
     1149,  196,  642,  772,  196,  196, 1149,  196,  196,  196,

      196,  773,  641,  776,  196,  640,  196,  196, 1149,  769,
      196,  777,  196,  196,  196,  770,  771,  643,  196,  642,
      772,  196,  196,  196,  196,  644,  196,  778,  773, 1149,
      776,  196,  196,  196,  196,  774, 1149,  779,  777,  196,
      196,  645,  196,  648,  643,  196,  775,  196,  780,  781,
      196,  196,  644,  196,  778,  782,  646,  783, 1149,  196,
      196,  196,  774,  196,  779,  647,  196,  196,  645,  196,
      648,  196,  196,  775,  196,  780,  781,  196,  196,  784,
      196,  196,  782,  646,  783,  196,  650,  196,  196,  196,
      196,  196,  647,  196,  196, 1149,  649, 1149,  196,  196,

     1149,  196, 1149, 1149,  196,  785,  784, 1149,  196,  196,
      653,  196,  196,  650,  196,  196,  196,  196,  196,  786,
      196,  196,  651,  649,  196,  652,  196,  196,  196,  196,
      196,  196,  785,  787,  196,  196,  196,  653,  196, 1149,
      196, 1149,  196,  654,  196,  196,  786,  196,  196,  651,
      196,  196,  652,  196,  196, 1149,  196,  196,  196,  788,
      787,  196,  196,  196, 1149, 1149,  196,  196,  196,  655,
      654,  196,  196,  656,  196,  196, 1149,  196,  196,  789,
      196,  196,  657, 1149,  196,  196,  788,  196,  790,  196,
      196,  196,  659,  196,  196,  196,  655,  196,  196, 1149,

      656,  791,  196,  196,  792,  196,  789,  793,  196,  657,
      196,  196,  196,  794,  196,  790,  196,  196,  196,  659,
      658,  196,  660, 1149,  196, 1149,  196, 1149,  791,  661,
      196,  792,  196,  795,  793,  796,  196,  196,  196, 1149,
      794, 1149,  196,  196,  196,  196,  196,  658,  797,  660,
      662, 1149,  196,  196,  196,  196,  661, 1149, 1149,  196,
      795,  196,  796,  196, 1149,  196,  663, 1149,  196,  196,
      196,  196,  196,  196,  665,  797,  798,  662,  664,  196,
      196,  196,  196, 1149,  196,  196,  196,  799,  196,  800,
      196,  196,  801,  663,  196,  196,  196, 1149,  196,  802,

      196,  665,  196,  798,  668,  664,  196,  196,  196,  666,
      196,  196,  196,  196,  799,  667,  800,  196,  196,  801,
      196,  196,  196,  196,  196,  196,  802,  196,  196,  196,
     1149,  668,  803,  196,  196,  196,  666,  196, 1149,  669,
     1149, 1149,  667,  196,  196, 1149, 1149,  196, 1149,  196,
      196,  196,  196,  804,  805,  196, 1149,  196,  196,  803,
      670,  196,  196,  673,  806,  196,  669,  196,  671,  196,
      196,  196,  196,  196, 1149,  196,  672,  196,  674,  196,
      804,  805,  196,  196,  196,  196,  807,  670,  196,  196,
      673,  806,  196,  808,  196,  671,  196,  675,  196,  196,

      196,  196,  196,  672,  809,  674,  196,  196,  810,  196,
      196,  196,  676,  807,  811,  196,  196,  196,  812,  196,
      808,  196,  677,  196,  675,  196,  678, 1149,  196,  679,
     1149,  809,  196,  196,  196,  810,  196, 1149,  196,  676,
     1149,  811, 1149,  196,  196,  812,  196, 1149,  196,  677,
      196, 1149, 1149,  678,  196,  813,  679,  681,  814,  196,
      196,  196,  196,  196,  196,  815,  196,  196,  816,  196,
      196,  901,  196,  902,  682,  903,  196,  196,  680,  196,
      196,  196,  813,  904,  681,  814, 1149,  905,  196,  196,
      196,  196,  815,  196,  196,  816,  196,  196,  901,  196,

      902,  682,  903,  196,  196,  680,  196,  196,  683,  196,
      904,  684,  906,  196,  905,  907,  196,  196,  196,  196,
      196,  908,  685,  196, 1149,  196,  686,  196,  196,  196,
      196,  909, 1149,  196,  196,  683,  196,  196,  684,  906,
      196,  910,  907,  196,  911,  196,  196,  196,  908,  685,
      196,  196,  196,  686,  196,  196,  196,  196,  909,  196,
      196,  196,  196,  196,  196,  912,  687,  196,  910,  913,
      196,  911,  196, 1149,  196,  196,  688,  196,  196,  196,
      196, 1149,  689, 1149,  196,  914,  196,  196,  915,  196,
      196, 1149,  912,  687,  196, 1149,  913,  196,  690,  196,

      196,  196,  196,  688,  196,  196,  196,  196,  196,  689,
      196,  196,  914,  916,  196,  915,  196,  196,  693,  196,
      691, 1149,  196,  196,  692,  690, 1149,  196,  196,  196,
     1149, 1149,  196, 1149,  917,  196,  918,  196,  196,  919,
      916, 1149, 1149,  196,  196,  693,  196,  691,  694,  196,
      196,  692,  196,  695,  920,  196,  196,  196,  196,  696,
      196,  917,  921,  918,  196,  196,  919,  196,  196,  196,
      196, 1149,  922, 1149,  923,  694,  924,  925, 1149,  196,
      695,  920, 1149, 1149,  196,  196,  696,  196,  926,  921,
      927,  196,  928,  929,  196,  196,  196,  196,  196,  922,

      196,  923,  697,  924,  925,  196,  196,  698,  196,  196,
      196,  930,  931,  196,  700,  926,  196,  927,  196,  928,
      929,  196, 1149,  196, 1149,  196,  699,  196,  196,  697,
     1149,  196,  196,  196,  698,  196,  196,  196,  930,  931,
      196,  700,  196,  196, 1149,  196,  934, 1149,  196,  196,
      196,  932, 1149,  699,  933,  196,  196,  196,  196,  196,
      703,  701,  196,  935,  702,  936, 1149,  196, 1149,  196,
     1149,  196,  196,  934,  196,  704,  196,  937,  932,  196,
     1149,  933, 1149,  196,  196,  196,  196,  703,  701,  196,
      935,  702,  936,  196,  196,  196, 1149,  196,  196,  196,

     1149,  196,  704,  705,  937,  706,  196,  196,  938,  196,
     1149,  196,  196,  196,  708,  196,  196,  196,  939,  196,
      196,  196,  196,  196,  196,  196,  196,  196, 1149,  196,
      705,  940,  706,  941,  196,  938,  196,  707,  196,  196,
      196,  708,  196,  196,  196,  939,  196,  942,  196, 1149,
      196, 1149,  196,  196,  196,  196,  196,  196,  940,  943,
      941,  944,  196,  709,  707,  945,  196,  196,  196,  946,
      196,  711,  947,  196,  942,  196,  710, 1149,  196, 1149,
      196, 1149,  196,  196,  196, 1149,  943, 1149,  944,  196,
      709,  948,  945, 1149,  196,  196,  946,  196,  711,  947,

      196,  949,  196,  710,  196,  196,  196,  196,  712,  950,
      196,  196,  196, 1149,  196,  196,  196,  714,  948,  196,
      713, 1149,  196, 1149,  196, 1149,  951,  196,  949, 1149,
      715,  196,  952,  196,  196,  712,  950, 1149,  196,  196,
      196,  196,  196,  196,  714,  953,  196,  713,  196,  196,
      196,  196,  196,  951,  196,  954,  196,  715,  196,  952,
      196,  196,  196, 1149,  717, 1149,  196,  196,  716,  196,
     1149, 1149,  953, 1149,  196,  196,  196,  196,  955,  196,
      956, 1149,  954,  196,  957,  196,  958,  196,  196,  196,
      718,  717,  196,  196,  959,  716,  196,  196,  720,  719,

      721,  196,  196,  196,  196,  955,  196,  956,  196,  196,
     1149,  957,  722,  958, 1149,  196, 1149,  718,  960,  196,
      961,  959,  196,  723,  196,  720,  719,  721,  962,  196,
      196,  196, 1149,  196,  963,  196,  196,  196, 1027,  722,
      196,  196, 1149,  724,  196,  960, 1028,  961,  196,  196,
      723,  726,  196,  196,  196,  962,  196,  196, 1029,  725,
     1030,  963,  196, 1149,  196, 1027,  196,  196,  196,  196,
      724,  196, 1149, 1028, 1031,  196,  196, 1149,  726,  196,
      196,  196,  196,  196,  729, 1029,  725, 1030,  730,  196,
      196,  196,  196,  196,  196, 1149,  196,  196, 1032,  727,

      196, 1031, 1149,  196,  196, 1033,  728,  196, 1149,  196,
     1149,  729, 1149, 1149, 1034,  730, 1035,  196,  196,  196,
     1036,  196,  196,  196,  196, 1032,  727,  196,  196,  731,
      196,  196, 1033,  728,  196,  196,  196,  196, 1037,  196,
      732, 1034,  196, 1035,  196,  817, 1149, 1036, 1149,  196,
      196,  196, 1149, 1149, 1038,  196,  731,  196,  196, 1039,
     1149,  818,  196,  196,  196, 1037,  196,  732, 1040,  196,
      196,  196,  817,  822,  196,  196, 1041,  196,  196,  196,
      196, 1038,  196,  196, 1042,  196, 1039,  821,  818,  196,
      819,  196,  820,  196,  196, 1040, 1149,  196, 1149, 1149,

      822,  196,  196, 1041,  196, 1149,  196,  196, 1149,  196,
      196, 1042, 1149, 1149,  821,  196,  196,  819,  196,  820,
      196,  196, 1149,  823,  824,  196,  825,  196,  196,  196,
      196, 1043,  196,  196,  196,  196, 1044, 1045, 1046,  196,
      196, 1149,  196,  196,  196,  196,  196, 1149, 1149,  196,
      823,  824,  196,  825,  196,  196,  196,  196, 1043,  196,
      196,  196,  196, 1044, 1045, 1046,  196,  196,  196, 1047,
      196,  196,  196,  196,  196,  196,  196, 1048, 1049,  196,
      196,  196,  196,  827, 1050,  196,  196,  196,  196,  196,
     1051,  196,  826,  196,  196,  196, 1047,  196, 1052,  196,

      196,  196,  196,  828, 1048, 1049,  196,  196,  196,  196,
      827, 1050,  196,  196,  196,  196,  196, 1051,  196,  826,
      196,  196,  196, 1053,  196, 1052,  196,  196,  196,  196,
      828,  196, 1054,  196, 1055,  196,  196, 1056,  830,  196,
     1057, 1058,  196,  196, 1149,  196, 1149,  829, 1149,  196,
     1053, 1149, 1149, 1149, 1059,  196,  196, 1149,  196, 1054,
      196, 1055,  196,  196, 1056,  830,  196, 1057, 1058,  196,
      196,  196,  196,  196,  829,  832, 1060,  196,  196,  831,
      196, 1059,  196,  196,  196,  833,  196,  196,  196, 1149,
     1061,  196,  196, 1149, 1062,  834,  196, 1149,  196, 1099,

      196, 1149,  832, 1060,  196,  196,  831,  196, 1100,  196,
      196,  196,  833,  196,  196,  196,  196, 1061,  196,  196,
      836, 1062,  834,  196,  196,  196, 1099,  196,  196, 1101,
      835,  196,  196, 1149,  196, 1100, 1149,  196, 1102,  196,
     1103, 1149,  837,  196, 1104, 1149,  196,  836,  838, 1149,
     1149,  196,  196,  196,  196,  196, 1101,  835,  196,  196,
      196,  196, 1149,  196,  196, 1102,  196, 1103,  196,  837,
     1105, 1104,  839,  196,  840,  838,  196,  196,  196,  196,
      196,  196, 1106, 1107,  196, 1149,  196,  196,  196,  196,
      196, 1149, 1149, 1149, 1149,  196, 1149, 1105, 1149,  839,

      196,  840,  196,  196,  196,  196,  196,  196,  196, 1106,
     1107,  196,  196,  196, 1108,  196,  196, 1109,  196,  196,
      196,  196,  841,  842, 1110,  196,  196,  196,  196,  196,
      196,  196, 1111, 1112,  196, 1149,  196, 1113, 1149,  196,
      196, 1108, 1149,  843, 1109,  196,  196,  196,  196,  841,
      842, 1110,  196,  196,  196,  196, 1129,  196,  196, 1111,
     1112, 1149,  196,  196, 1113,  845,  196,  196,  844,  196,
      843,  846,  196, 1149, 1130, 1131, 1132, 1149,  196,  196,
      847,  196,  196, 1129,  196,  196, 1133, 1149,  196,  196,
      196, 1149,  845,  196, 1134,  844,  196, 1149,  846,  196,

      196, 1130, 1131, 1132,  196,  196,  196,  847,  196,  196,
     1149,  196,  196, 1133,  196,  196, 1149,  196,  196, 1149,
     1141, 1134,  196,  849,  196,  196, 1142,  196,  196,  196,
      196,  196,  196,  848, 1149,  196,  196,  196,  196,  196,
      196,  196,  196,  196, 1149,  196,  196, 1141, 1143,  196,
      849,  196,  196, 1142,  850,  196,  196,  196, 1147,  196,
      848,  196, 1149,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196, 1149, 1143,  196, 1149, 1149,  196,
     1149,  850, 1149,  196, 1149, 1147,  196,  851,  196,  196,
      196, 1149,  196,  196, 1149,  196, 1149,  196,  196,  196,

      852, 1149, 1149,  196,  196,  196,  196,  196, 1149,  196,
      196, 1149,  196,  196,  851, 1149,  196,  196,  196,  196,
      196, 1149, 1149, 1149,  196, 1149,  196,  852, 1149,  196,
      196,  196,  196,  196,  196, 1149,  196,  196,  853,  196,
     1149,  854,  196, 1149,  196,  196, 1149,  196,  196,  196,
     1149, 1149, 1149,  196,  196,  196,  196,  196,  196,  855,
      196, 1149, 1149,  196,  196,  853, 1149,  856,  854,  196,
      196,  196,  196, 1149,  196,  196,  196, 1149, 1149, 1149,
      196,  196,  196,  196,  857,  196,  855,  196,  196,  858,
      196,  196, 1149, 1149,  856,  196,  196,  196,  196,  196,

      859, 1149, 1149,  196, 1149, 1149, 1149,  196, 1149, 1149,
      196,  857, 1149, 1149,  196,  196,  858,  860,  196,  196,
     1149, 1149,  196,  196,  196,  196,  196,  859,  196,  196,
      196, 1149, 1149,  196, 1149,  196, 1149,  196,  196, 1149,
     1149, 1149,  196, 1149,  860, 1149,  196,  196, 1149, 1149,
     1149,  196, 1149,  196, 1149,  196,  196, 1149, 1149,  196,
      196,  196,  196, 1149,  196,  196,  196, 1149,  196,  196,
      196,  196, 1149, 1149,  196,  196,  861,  196, 1149,  196,
      196, 1149, 1149, 1149,  196, 1149,  196, 1149,  196,  196,
     1149, 1149, 1149,  196, 1149,  196, 1149,  196,  196, 1149,

     1149, 1149,  196,  861,  196, 1149,  196,  196,  862, 1149,
      196,  196,  196,  863,  196,  196,  196,  196, 1149,  196,
      196, 1149, 1149,  196,  196, 1149, 1149, 1149, 1149, 1149,
     1149,  196, 1149,  196, 1149,  862, 1149,  196,  866,  196,
      863,  196,  196, 1149,  196,  196,  196,  196,  196, 1149,
      196,  196, 1149, 1149,  196, 1149,  196,  196,  196, 1149,
      196,  864,  865,  196,  196,  866,  196, 1149, 1149, 1149,
      196,  196,  196, 1149,  867,  196, 1149,  196, 1149, 1149,
      196,  196, 1149,  196,  196,  196, 1149,  868,  864,  865,
      196,  196,  196,  196, 1149, 1149,  869,  196,  196,  196,

      196,  867,  196,  196,  196, 1149,  196,  196,  196, 1149,
      196, 1149,  196, 1149,  868,  196,  196,  196, 1149,  196,
      870, 1149,  196,  869,  196,  871,  196,  196, 1149,  196,
      196,  196, 1149,  196, 1149,  196,  872,  196,  196,  196,
     1149,  196,  196,  196,  196, 1149,  196,  870, 1149,  196,
      873,  196,  871,  196, 1149,  874,  196,  196,  196, 1149,
     1149, 1149,  196,  872,  196,  196,  196,  196,  196,  196,
     1149,  196,  196,  196, 1149, 1149, 1149,  873,  196, 1149,
      196, 1149,  874,  196,  196,  196,  196, 1149,  196,  196,
      875,  196, 1149,  196,  196, 1149,  196,  196,  196,  196,

      196, 1149, 1149,  877,  196,  196, 1149, 1149, 1149,  876,
     1149,  196,  196,  196,  196,  196, 1149,  875,  196, 1149,
      196, 1149, 1149, 1149,  196,  196, 1149,  196, 1149, 1149,
      877,  196,  196,  196,  879,  196,  876,  878,  196,  196,
      196,  196,  196, 1149,  881,  196,  196,  196, 1149,  196,
      196,  880,  196,  196,  196, 1149,  196, 1149, 1149,  196,
      196,  879,  196, 1149,  878, 1149,  196,  196, 1149,  196,
     1149,  881, 1149,  196,  196,  882,  196,  196,  880, 1149,
      196,  196, 1149,  196,  196,  196,  196,  196,  883,  884,
      196,  196,  196,  196, 1149,  196,  196,  196, 1149,  196,

      196, 1149,  882, 1149, 1149, 1149, 1149, 1149, 1149,  196,
     1149,  196,  196,  196,  196,  883,  884,  196,  196,  196,
      196,  196,  196,  196,  196,  885,  196,  196, 1149,  886,
      196,  196, 1149,  196,  196, 1149,  196, 1149, 1149,  196,
      887,  196, 1149,  196, 1149, 1149, 1149,  196,  196,  196,
      196, 1149,  885,  196, 1149,  196,  886,  196,  196,  196,
      196,  196, 1149,  196, 1149,  196,  196,  887,  196, 1149,
      196,  196, 1149,  196,  196,  196,  196,  196,  888, 1149,
      196,  196,  196,  196, 1149,  889,  196,  196, 1149,  196,
      196,  196,  196, 1149,  890, 1149, 1149, 1149,  196,  196,

      196,  196,  196, 1149, 1149,  888, 1149, 1149,  196, 1149,
      196, 1149,  889,  196,  196,  196,  196,  196,  196,  892,
      196,  890,  891, 1149,  196,  196,  196, 1149,  196,  196,
     1149,  196, 1149,  196, 1149, 1149, 1149, 1149,  196, 1149,
      196, 1149,  196,  196,  196, 1149,  892,  196, 1149,  891,
      894,  196,  196, 1149,  196, 1149,  196,  196,  196, 1149,
      196,  196,  196, 1149,  196,  196,  196,  196,  196,  893,
      196, 1149, 1149, 1149, 1149,  196, 1149,  894,  196, 1149,
      895,  196, 1149, 1149,  196, 1149, 1149, 1149,  196,  196,
     1149,  196,  196,  196,  196,  196,  893, 1149,  896,  196,

      897,  196,  196, 1149,  196,  196,  196,  895,  898,  196,
      196, 1149, 1149, 1149, 1149,  196, 1149, 1149,  196,  196,
      196, 1149, 1149, 1149, 1149,  896,  196,  897,  196, 1149,
     1149,  196,  196,  196, 1149,  898,  196,  196, 1149,  196,
      196, 1149,  196, 1149, 1149,  196,  196,  196,  196,  196,
      196, 1149,  196, 1149, 1149,  899, 1149, 1149,  196,  196,
      900, 1149,  196, 1149,  196,  196,  196,  196,  196, 1149,
      196, 1149,  196,  196, 1149,  196,  196,  196,  196,  196,
      196, 1149,  899, 1149, 1149,  196,  196,  900,  196,  196,
      196,  196,  196, 1149,  196,  196,  196,  196,  196,  196,

     1149, 1149, 1149, 1149,  196,  196,  196,  196,  196, 1149,
     1149, 1149,  196,  196,  196,  196,  196,  196,  196, 1149,
      196,  196, 1149,  196, 1149,  196,  196, 1149,  196, 1149,
      965,  196, 1149,  196,  196,  196,  196,  964,  196,  196,
      196,  196,  196,  196, 1149,  196, 1149,  196,  196, 1149,
      196, 1149,  966,  196, 1149,  196,  196,  965,  196, 1149,
     1149,  196,  196,  196,  964,  196,  196,  196, 1149,  196,
      196, 1149,  196,  968, 1149,  196,  196,  196, 1149,  966,
      196,  967, 1149,  196, 1149,  196,  196,  196,  196,  196,
      196,  969, 1149,  196, 1149,  196, 1149,  196, 1149,  196,

      968, 1149,  196,  196,  196,  196, 1149,  196,  967, 1149,
     1149, 1149,  970,  196,  196,  196,  196,  196,  969,  196,
     1149, 1149,  196, 1149, 1149, 1149,  196, 1149,  196,  196,
     1149,  196,  196, 1149,  196,  196, 1149, 1149,  196,  970,
      971,  196,  972,  196,  973,  196,  196, 1149,  196, 1149,
     1149, 1149, 1149,  196,  196,  196,  196, 1149, 1149, 1149,
      196,  196,  196, 1149,  196,  196,  196,  971,  196,  972,
      196,  973,  196, 1149,  974,  196,  196,  977,  196,  196,
      196,  196,  196,  196,  196,  976, 1149,  196,  975,  196,
      196,  196,  196,  196, 1149, 1149, 1149,  196,  196,  196,

     1149,  974,  196,  196,  977,  196,  196,  196, 1149,  196,
      978,  196,  976, 1149,  196,  975,  196,  196,  196,  196,
      196, 1149,  196,  196, 1149,  196,  196,  979,  196,  196,
      196, 1149,  196,  196,  981, 1149,  196,  978,  196,  196,
      196,  196, 1149,  196,  196,  196,  196,  196,  982,  196,
      196,  980,  196, 1149,  979,  196,  196,  196,  196,  196,
      196,  981, 1149,  196, 1149,  196,  196,  196,  196, 1149,
      196,  196,  983,  196, 1149,  982,  196, 1149,  980,  196,
     1149, 1149,  196,  196,  196,  196,  196,  196,  987, 1149,
      196,  196,  196, 1149,  196,  196,  196,  196,  196,  983,

      196,  984,  985,  196,  196,  986,  196,  196, 1149,  196,
      196,  196, 1149,  196,  196,  987, 1149,  196,  196,  196,
     1149,  196, 1149,  196,  196,  196, 1149,  196,  984,  985,
     1149,  196,  986,  196,  196,  196,  988,  196,  196,  196,
      196, 1149,  196, 1149,  196,  196, 1149, 1149,  196,  990,
      196,  196, 1149, 1149, 1149,  196,  196, 1149,  196, 1149,
      196,  196,  196,  988,  196,  196,  196,  196,  196,  196,
     1149,  196,  196, 1149,  196,  196,  990,  196,  196,  989,
     1149, 1149,  196,  196,  196,  196, 1149,  196,  196, 1149,
      196,  196,  196,  991, 1149,  196, 1149,  196,  196, 1149,

      196,  196,  196, 1149, 1149,  196,  989, 1149, 1149, 1149,
      196,  196, 1149, 1149,  196, 1149,  196,  196, 1149,  196,
      991,  196, 1149, 1149,  196,  196,  196,  196,  196,  196,
      196, 1149,  196, 1149, 1149,  196,  992,  196, 1149, 1149,
      196,  196,  196,  196,  196, 1149, 1149, 1149,  196,  196,
     1149, 1149, 1149,  196,  196,  196, 1149,  196,  196, 1149,
      196, 1149,  196,  992, 1149,  196,  196,  196,  196,  196,
      196,  196, 1149,  196,  993, 1149,  196, 1149,  196,  994,
     1149,  196, 1149,  196,  196,  196,  196,  196, 1149,  196,
     1149,  995,  196,  196,  996,  196,  196,  196, 1149,  196,

      196,  993,  997, 1149,  196,  196,  994, 1149, 1149,  196,
      196,  196, 1149,  196,  196,  196,  196,  196,  995, 1149,
     1149,  996,  196,  196, 1149, 1149,  196,  196,  196,  997,
      196,  196, 1149, 1149, 1149,  196,  196, 1149, 1149, 1149,
      196,  196,  196, 1149,  196, 1149,  196, 1149,  196,  196,
     1149, 1149, 1149,  196,  196,  196, 1149,  196,  196,  196,
     1149,  196,  196, 1149,  998, 1149,  196,  196,  196, 1149,
     1149,  196,  196,  196,  196,  196,  196, 1149, 1149, 1149,
      196, 1149,  196,  999,  196,  196,  196, 1149,  196, 1149,
      196,  998,  196,  196, 1149,  196, 1149,  196,  196,  196,

      196,  196, 1149,  196, 1149, 1149,  196, 1149, 1149,  196,
      999,  196, 1149, 1000,  196,  196, 1149,  196, 1149,  196,
      196,  196,  196,  196,  196, 1149, 1002,  196,  196,  196,
      196,  196,  196,  196, 1001, 1149,  196,  196, 1149, 1149,
     1000,  196,  196, 1149,  196, 1149,  196,  196,  196,  196,
      196,  196, 1149, 1002,  196,  196,  196,  196,  196,  196,
      196, 1001,  196,  196,  196, 1149, 1149,  196, 1149,  196,
     1149,  196, 1149,  196,  196, 1149,  196, 1003,  196, 1004,
     1005,  196, 1006, 1149,  196, 1149,  196,  196, 1149,  196,
      196, 1149,  196, 1149,  196,  196,  196, 1149, 1149, 1007,

      196,  196,  196,  196, 1003,  196, 1004, 1005,  196, 1006,
     1149,  196,  196,  196, 1149,  196, 1008,  196,  196,  196,
     1149, 1149,  196,  196, 1009, 1149, 1007,  196,  196,  196,
      196,  196,  196,  196, 1149,  196, 1149, 1149,  196,  196,
     1149,  196,  196, 1008, 1149,  196, 1149, 1149, 1149,  196,
      196, 1009, 1010, 1149, 1149,  196,  196,  196,  196, 1149,
      196, 1149, 1149,  196, 1149,  196,  196,  196,  196, 1149,
     1149, 1149, 1149, 1149,  196, 1149,  196, 1149,  196, 1010,
     1149,  196, 1012,  196,  196, 1149, 1011, 1149,  196, 1149,
      196, 1013,  196,  196,  196, 1149,  196, 1149,  196, 1149,

     1014,  196,  196, 1149, 1149,  196, 1149,  196,  196, 1012,
     1149,  196,  196, 1011,  196,  196, 1149,  196, 1013,  196,
     1149,  196, 1149,  196,  196,  196,  196, 1014,  196,  196,
      196, 1015, 1018,  196,  196,  196,  196,  196, 1016,  196,
      196,  196,  196, 1149,  196, 1149, 1149,  196,  196, 1149,
      196,  196, 1017,  196, 1019,  196, 1149,  196, 1015, 1018,
      196,  196,  196,  196,  196, 1016, 1020,  196,  196,  196,
     1149,  196, 1149,  196,  196,  196, 1149,  196, 1149, 1017,
      196, 1019,  196,  196, 1149, 1149, 1021, 1149,  196,  196,
      196, 1149,  196, 1020, 1149,  196,  196, 1149,  196, 1149,

      196, 1023,  196, 1022,  196,  196,  196,  196,  196,  196,
      196,  196, 1149, 1021,  196, 1149,  196,  196, 1149,  196,
     1149,  196, 1149,  196,  196, 1149, 1149, 1149, 1023, 1149,
     1022,  196,  196,  196, 1149,  196,  196,  196,  196,  196,
      196,  196, 1149, 1025, 1024, 1026,  196, 1149,  196,  196,
      196,  196,  196, 1149, 1149, 1149,  196,  196, 1149,  196,
      196,  196,  196,  196,  196, 1149,  196,  196,  196, 1149,
     1025, 1024, 1026,  196, 1149,  196,  196,  196,  196,  196,
     1149, 1063, 1149,  196,  196,  196,  196,  196,  196,  196,
      196,  196, 1149, 1149,  196,  196, 1149,  196, 1149, 1064,

      196,  196,  196, 1149,  196,  196, 1149, 1149, 1063,  196,
      196, 1149,  196,  196, 1149,  196, 1149,  196,  196, 1149,
      196,  196, 1149, 1149,  196,  196, 1064,  196,  196, 1149,
     1149,  196,  196, 1149, 1065, 1149,  196,  196, 1149,  196,
      196,  196,  196,  196,  196, 1066, 1149,  196, 1067,  196,
     1149, 1149,  196,  196, 1149,  196, 1149, 1149, 1149,  196,
     1149, 1065,  196, 1149,  196,  196,  196, 1149,  196,  196,
      196,  196, 1066, 1149,  196, 1067,  196, 1149, 1149, 1149,
      196, 1068,  196,  196, 1149, 1149, 1149, 1149,  196,  196,
     1149,  196,  196,  196, 1149,  196,  196,  196, 1149, 1149,

     1149,  196,  196, 1149,  196, 1069,  196,  196, 1068, 1149,
      196,  196, 1149, 1149, 1070,  196,  196, 1149, 1149, 1149,
      196, 1149,  196,  196,  196,  196, 1149, 1149, 1149,  196,
      196,  196, 1069,  196,  196,  196, 1149, 1071,  196,  196,
     1149, 1070, 1149,  196,  196, 1149,  196, 1149,  196,  196,
      196, 1149,  196,  196, 1072, 1149, 1149,  196,  196, 1149,
     1149, 1149,  196, 1149, 1071,  196,  196,  196, 1149, 1149,
     1149,  196,  196,  196, 1073,  196,  196,  196, 1149, 1149,
      196, 1072, 1149, 1149,  196,  196,  196, 1149,  196, 1149,
      196,  196,  196, 1149,  196,  196,  196, 1149, 1074,  196,

      196, 1073, 1149, 1149,  196, 1149, 1149,  196, 1149,  196,
     1149,  196, 1149,  196,  196,  196, 1149,  196,  196,  196,
     1149, 1149,  196,  196, 1149, 1074,  196,  196,  196, 1149,
      196, 1149,  196,  196,  196, 1149,  196,  196,  196, 1149,
     1149,  196,  196, 1149, 1149, 1149,  196, 1149, 1075,  196,
     1149,  196,  196,  196, 1149,  196,  196,  196,  196,  196,
      196,  196,  196, 1149,  196,  196,  196, 1149,  196,  196,
     1149, 1149,  196, 1149, 1149, 1075,  196, 1149,  196,  196,
     1149, 1149,  196,  196,  196,  196, 1076, 1149,  196,  196,
      196,  196,  196,  196, 1149,  196,  196,  196, 1077,  196,

     1149, 1149,  196,  196, 1149,  196, 1149, 1149, 1149,  196,
      196,  196, 1149, 1076,  196,  196,  196,  196,  196,  196,
     1149,  196, 1149,  196,  196, 1077,  196, 1149, 1149,  196,
      196, 1149,  196,  196, 1149,  196, 1149,  196, 1149, 1149,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
     1149,  196, 1149,  196,  196, 1149,  196, 1149, 1149,  196,
      196, 1149,  196,  196, 1149, 1079, 1149,  196, 1149,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196, 1149,
     1078,  196, 1149,  196, 1080,  196,  196, 1149, 1149, 1149,
      196,  196, 1079, 1149, 1149, 1149,  196,  196,  196,  196,

     1149,  196,  196,  196,  196, 1149,  196, 1078, 1149, 1149,
      196, 1080,  196,  196, 1149, 1149,  196,  196,  196, 1149,
      196, 1149, 1081, 1149,  196,  196,  196, 1149,  196,  196,
      196, 1082, 1149,  196,  196, 1149, 1149,  196,  196, 1149,
      196, 1149, 1149,  196,  196,  196,  196,  196,  196, 1081,
      196,  196, 1149,  196, 1149, 1149,  196,  196, 1082, 1149,
      196,  196, 1149,  196,  196,  196, 1084,  196, 1149, 1083,
      196, 1149,  196,  196, 1149,  196,  196,  196,  196, 1149,
      196, 1149,  196, 1149,  196,  196,  196,  196,  196, 1149,
      196,  196,  196, 1084,  196, 1149, 1083,  196, 1085,  196,

      196, 1149, 1086,  196,  196,  196, 1087,  196, 1149,  196,
     1149,  196,  196,  196,  196,  196, 1149,  196,  196,  196,
     1149,  196, 1149, 1149, 1149, 1085,  196,  196, 1149, 1086,
     1149,  196, 1149, 1087,  196,  196, 1149, 1088,  196, 1149,
     1149,  196,  196, 1149,  196,  196, 1149, 1149,  196,  196,
     1149,  196,  196,  196,  196, 1149,  196, 1149, 1089, 1149,
     1149,  196,  196,  196, 1088,  196,  196,  196, 1149,  196,
     1149, 1149,  196, 1149, 1149, 1149,  196,  196,  196,  196,
      196,  196, 1149,  196,  196, 1089, 1090, 1149,  196, 1149,
      196,  196,  196,  196,  196,  196,  196,  196, 1091,  196,

      196, 1149,  196, 1149,  196,  196, 1149,  196, 1149, 1149,
      196,  196, 1149, 1090,  196, 1149,  196, 1149,  196, 1149,
     1149,  196,  196,  196,  196, 1091,  196,  196, 1092,  196,
     1149, 1149,  196, 1093,  196,  196, 1149,  196, 1149, 1149,
      196,  196,  196,  196,  196,  196, 1149,  196,  196, 1149,
      196,  196, 1149,  196, 1149, 1092, 1149, 1149,  196, 1149,
     1093,  196,  196, 1094, 1149, 1149,  196,  196, 1095,  196,
     1149,  196,  196,  196,  196,  196, 1149,  196,  196, 1149,
      196, 1149,  196,  196,  196,  196, 1149, 1149,  196,  196,
     1094,  196,  196,  196, 1096, 1095, 1149, 1149,  196, 1149,

      196,  196,  196, 1149, 1149, 1149,  196,  196, 1149,  196,
      196,  196, 1149,  196, 1149,  196,  196,  196,  196,  196,
      196, 1096,  196,  196,  196,  196, 1149, 1149,  196,  196,
     1149,  196,  196,  196,  196, 1149, 1149, 1149,  196, 1149,
      196, 1098,  196,  196,  196,  196, 1149,  196,  196,  196,
      196,  196,  196,  196, 1149, 1097,  196, 1149,  196,  196,
     1149,  196,  196, 1149,  196,  196, 1149, 1149, 1098,  196,
      196,  196,  196,  196,  196,  196, 1149, 1149,  196,  196,
      196, 1149, 1097,  196, 1149,  196, 1149,  196, 1149,  196,
     1149,  196,  196, 1149, 1149, 1149,  196,  196,  196, 1149,

      196,  196, 1149, 1149,  196,  196,  196, 1149, 1149, 1149,
      196,  196,  196,  196,  196,  196,  196, 1149, 1149,  196,
      196, 1149, 1149, 1149,  196,  196, 1114,  196, 1149,  196,
      196,  196, 1149,  196,  196, 1149,  196, 1149,  196,  196,
      196, 1115,  196,  196, 1149, 1149,  196,  196,  196, 1149,
     1149, 1149,  196, 1114,  196,  196,  196,  196,  196, 1149,
      196,  196,  196,  196, 1149, 1149,  196,  196, 1115,  196,
     1149, 1149, 1149,  196,  196,  196,  196,  196, 1149,  196,
     1116, 1149,  196, 1149,  196,  196, 1149,  196, 1149,  196,
      196, 1149, 1149, 1149,  196,  196,  196, 1149,  196,  196,

      196,  196,  196,  196,  196,  196,  196, 1116,  196, 1149,
     1117,  196, 1149, 1149, 1149,  196, 1149,  196,  196, 1149,
      196, 1149,  196, 1149,  196,  196,  196,  196, 1149,  196,
      196, 1149,  196, 1149,  196,  196, 1149, 1117,  196,  196,
      196, 1149,  196,  196,  196,  196, 1118,  196,  196,  196,
     1149,  196,  196, 1149,  196, 1149, 1149,  196,  196,  196,
     1149,  196, 1119, 1149,  196,  196,  196,  196,  196,  196,
      196,  196, 1149, 1118,  196,  196,  196, 1149, 1149,  196,
      196,  196,  196,  196, 1121,  196,  196,  196,  196, 1119,
      196,  196,  196, 1149,  196,  196,  196,  196,  196, 1149,

     1120,  196,  196, 1149,  196, 1149, 1149,  196,  196,  196,
      196, 1121,  196, 1149,  196,  196,  196,  196,  196,  196,
     1149,  196,  196, 1149,  196,  196,  196, 1120, 1149,  196,
      196,  196,  196, 1149, 1149,  196,  196, 1149, 1149,  196,
      196, 1149, 1149,  196,  196,  196,  196, 1149,  196,  196,
      196, 1149,  196,  196, 1123, 1122, 1149,  196,  196,  196,
      196, 1149, 1149,  196, 1149, 1149,  196,  196,  196, 1149,
      196,  196, 1149,  196,  196,  196,  196,  196,  196,  196,
     1149, 1123, 1122, 1149,  196,  196,  196,  196,  196, 1124,
     1149, 1149,  196,  196,  196,  196, 1149,  196,  196, 1149,

      196,  196, 1149,  196, 1149,  196, 1149,  196,  196, 1149,
     1149,  196, 1149,  196,  196,  196, 1124, 1125, 1149,  196,
     1149,  196,  196, 1149, 1149,  196,  196,  196, 1149,  196,
     1149, 1149, 1149,  196,  196,  196,  196, 1149, 1126,  196,
      196,  196, 1149,  196, 1125,  196, 1149, 1149, 1149,  196,
     1149, 1128,  196,  196, 1149,  196,  196, 1149, 1149,  196,
      196,  196,  196,  196, 1127, 1126,  196,  196, 1149, 1149,
      196,  196,  196,  196, 1149, 1149, 1149,  196, 1128,  196,
     1149, 1149,  196,  196, 1149, 1149,  196, 1149,  196,  196,
     1149, 1127,  196,  196, 1149,  196,  196,  196,  196,  196,

      196,  196,  196, 1149,  196,  196, 1149,  196, 1149, 1149,
      196, 1149,  196, 1149, 1149,  196, 1149,  196, 1149,  196,
      196,  196,  196,  196,  196,  196,  196, 1149,  196,  196,
     1149,  196,  196,  196,  196, 1149, 1135,  196, 1149,  196,
     1149,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196, 1149,  196,  196,  196,  196, 1149,
      196, 1136, 1149, 1135,  196,  196,  196,  196,  196, 1149,
      196, 1149,  196,  196,  196, 1149,  196,  196,  196, 1149,
      196, 1149,  196,  196,  196, 1149, 1149, 1149, 1136,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196, 1149,

     1149, 1149,  196,  196,  196,  196, 1137,  196,  196,  196,
     1149, 1149,  196, 1149, 1149, 1149,  196,  196,  196, 1149,
     1149, 1149,  196,  196,  196,  196, 1149, 1149, 1149,  196,
      196,  196,  196, 1137,  196,  196,  196,  196,  196,  196,
      196,  196,  196, 1149, 1140, 1149, 1149,  196,  196, 1139,
      196, 1149,  196, 1149, 1149, 1149,  196, 1138,  196, 1149,
      196, 1149,  196, 1149,  196,  196, 1149,  196,  196,  196,
     1149, 1140,  196, 1149,  196,  196, 1139,  196, 1144,  196,
     1149, 1149,  196,  196, 1138,  196,  196,  196,  196,  196,
      196, 1149, 1149, 1149, 1149,  196,  196,  196,  196,  196,

      196, 1149, 1145, 1149,  196, 1144,  196,  196, 1149,  196,
     1146, 1149, 1149,  196,  196,  196,  196,  196, 1149, 1149,
      196,  196,  196,  196,  196,  196,  196,  196,  196, 1145,
      196,  196,  196,  196,  196,  196,  196, 1146, 1149, 1149,
      196,  196,  196,  196, 1149, 1149,  196,  196,  196, 1149,
      196, 1149,  196,  196, 1149,  196,  196,  196,  196,  196,
     1148, 1149,  196,  196, 1149,  196,  196,  196, 1149,  196,
      196, 1149, 1149,  196,  196, 1149,  196,  196, 1149,  196,
     1149,  196, 1149,  196, 1149,  196,  196, 1148, 1149, 1149,
     1149, 1149,  196,  196, 1149, 1149, 1149,  196, 1149, 1149,

     1149,  196, 1149,  196, 1149, 1149, 1149, 1149,  196, 1149,
     1149, 1149, 1149,  196,   47,   47,   47,   47,   47,   90,
     1149, 1149,   90,   90,  182,  182,  182, 1149,  182,  184,
     1149,  184,  184,  184,  187, 1149,  187,  187,  187,  196,
     1149,  196,  196,  196,    7, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,

     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149
    } ;

static const flex_int16_t yy_chk[7413] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   15, 1152,
       15,   17,   17,   18,   18,   21,   22,   21,   50,   50,
       22,   23,   30,   21,  396,   21,   22,  280,   23,   31,
       21,   37,   56,   45,   56,   23,   22,   24,   23,  191,
       27,   24,   21,   22,   21,   24,   27,   22,   23,   30,
       21,   24,   21,   22,   24,   23,   31,   21,   37,   25,
       45,   25,   23,   22,   24,   23,   25,   27,   24,   43,

       43,   25,   24,   27,  190,   32,   28,  187,   24,   32,
       94,   24,   51,   51,   28,   32,   25,   93,   25,   90,
       28,   58,   58,   25,   59,   59,   43,   43,   25,   26,
       88,   88,   32,   28,   34,   33,   32,   26,  100,   33,
       26,   28,   32,   26,   29,   33,   26,   28,   34,   26,
       29,   29,   29,   87,   34,   34,   26,   29,   61,   38,
      101,   34,   33,   38,   26,  100,   33,   26,   60,   38,
       26,   29,   33,   26,   36,   34,   26,   29,   29,   29,
       35,   34,   34,   57,   29,   36,   38,  101,   35,  104,
       38,   36,   35,   92,   92,   35,   38,   41,   53,   41,

       72,   36,   41,   42,   72,  185,  185,   35,  189,  189,
       72,   42,   36,  102,  103,   35,  104,  103,   36,   35,
       72,  102,   35,   39,   41,   39,   41,   72,   39,   41,
       42,   72,   68,   39,   52,   39,   39,   72,   42,   68,
      102,  103,  106,   68,  103,   48,   68,   72,  102,   68,
       39,   46,   39,  107,   20,   39,  110,   73,  109,   68,
       39,   73,   39,   39,   40,  109,   68,   73,   40,  106,
       68,   40,   40,   68,  113,  116,   68,   73,   40,  113,
      107,   40,   19,  110,   73,  109,   16,   11,   73,    7,
        4,   40,  109,    3,   73,   40,  117,    0,   40,   40,

        0,  113,  116,    0,   73,   40,  113,  118,   40,   62,
       62,    0,   62,   62,   62,   62,   62,   62,  112,   62,
       62,   62,   69,  117,   71,   62,  119,   62,  112,   69,
       69,   71,  120,   62,  118,   62,   69,  122,   71,   69,
       62,   71,  111,  111,  111,  112,  111,  123,    0,   69,
        0,   71,   62,  119,   62,  112,   69,   69,   71,  120,
       62,    0,   62,   69,  122,   71,   69,   62,   71,  111,
      111,  111,  124,  111,  123,   62,   63,   63,    0,   63,
       63,   63,   63,   63,   63,   74,   63,   63,   63,   74,
        0,  115,  115,   63,   78,   74,  125,   63,  126,  124,

       77,  127,   78,   63,  128,   74,   78,   77,    0,   78,
      129,   77,   74,   63,   77,    0,   74,   77,  115,  115,
       63,   78,   74,  125,   63,  126,  131,   77,  127,   78,
       63,  128,   74,   78,   77,   79,   78,  129,   77,   79,
       63,   77,   63,   64,   77,   79,  130,   64,  132,  130,
       64,   64,   82,  131,   82,   79,   82,   64,  134,   82,
       64,    0,   79,    0,   82,  135,   79,   64,    0,  137,
       64,    0,   79,  130,   64,  132,  130,   64,   64,   82,
        0,   82,   79,   82,   64,  134,   82,   64,  105,  105,
       83,   82,  135,  138,   64,   65,  137,   83,   83,   65,

      139,  140,  105,   65,   83,  143,  144,   83,    0,   65,
      145,  141,   65,  141,    0,  105,  105,   83,  146,   65,
      138,    0,   65,  147,   83,   83,   65,  139,  140,  105,
       65,   83,  143,  144,   83,   84,   65,  145,  141,   65,
      141,   85,   84,   84,  148,  146,   65,   66,   85,   84,
      147,   66,   84,  149,   66,   85,   66,   66,   85,  150,
        0,   66,   84,  152,    0,  153,   66,   66,   85,   84,
       84,  148,    0,    0,   66,   85,   84,    0,   66,   84,
      149,   66,   85,   66,   66,   85,  150,   86,   66,  154,
      152,   86,  153,   66,   66,   67,  155,   86,  142,  114,

      142,  114,   67,   67,  114,  157,   67,   86,  158,   67,
      114,  142,   67,  158,   86,   67,  154,  114,   86,    0,
      159,    0,   67,  155,   86,  142,  114,  142,  114,   67,
       67,  114,  157,   67,   86,  158,   67,  114,  142,   67,
      158,  156,   67,   70,  114,  156,  121,  159,  121,   70,
       70,   70,  121,  160,  161,  163,   70,    0,  164,  121,
      165,   70,    0,  121,  166,  167,  169,    0,  156,    0,
       70,  171,  156,  121,    0,  121,   70,   70,   70,  121,
      160,  161,  163,   70,  136,  164,  121,  165,   70,   75,
      121,  166,  167,  169,  136,  162,   75,  168,  171,  136,

      136,  170,  170,   75,  162,  174,   75,    0,  168,   75,
       75,  136,  162,  175,  172,    0,   75,  173,    0,  178,
      173,  136,  162,   75,  168,    0,  136,  136,  170,  170,
       75,  162,  174,   75,  172,  168,   75,   75,   76,  162,
      175,  172,  176,   76,  173,   76,  178,  173,  176,  177,
      179,   76,   76,  180,  282,   76,    0,  284,   76,    0,
      285,  172,  177,  196,    0,   76,  288,  196,  289,  176,
       76,    0,   76,  196,    0,  176,  177,  179,   76,   76,
      180,  282,   76,  196,  284,   76,   80,  285,   80,  177,
      196,   80,   80,  288,  196,  289,   80,  290,   80,   80,

      196,  197,  197,  291,    0,  292,  197,  293,   80,    0,
      196,    0,  197,   80,    0,   80,    0,    0,   80,   80,
        0,  295,  197,   80,  290,   80,   80,  198,  197,  197,
      291,  198,  292,  197,  293,   80,   81,  198,  200,  197,
       81,  200,  198,   81,   81,  200,  296,  198,  295,  197,
       81,    0,  200,   81,  198,  200,    0,    0,  198,    0,
        0,    0,  297,   81,  198,  200,  298,   81,  200,  198,
       81,   81,  200,  296,  198,    0,  199,   81,  199,  200,
       81,    0,  200,  199,  199,  201,  213,  201,  199,  297,
      299,  300,  201,  298,  213,  301,    0,  302,  213,  201,

      304,  213,  201,  199,    0,  199,  305,    0,  203,  203,
      199,  199,  201,  213,  201,  199,  203,  299,  300,  201,
      203,  213,  301,  203,  302,  213,  201,  304,  213,  201,
      202,  202,  204,  305,  205,  203,  203,  306,  202,  204,
        0,  205,  202,  203,  202,  202,  204,  203,  205,  204,
      203,  205,    0,  207,    0,  308,  309,  202,  202,  204,
      207,  205,    0,  310,  306,  202,  204,  207,  205,  202,
      207,  202,  202,  204,  311,  205,  204,  206,  205,  206,
      207,  307,  308,  309,  206,  312,  313,  207,    0,  206,
      310,    0,    0,    0,  207,  209,  307,  207,    0,  209,

      315,  311,    0,    0,  206,  209,  206,  316,  307,  317,
      210,  206,  312,  313,  210,  209,  206,  208,  208,  208,
      210,  208,  209,  307,  208,  210,  209,  315,    0,  208,
      210,    0,  209,    0,  316,  318,  317,  210,    0,    0,
      319,  210,  209,  320,  208,  208,  208,  210,  208,    0,
        0,  208,  210,  321,    0,  214,  208,  210,  211,  214,
      211,  322,  318,  211,  323,  214,  212,  319,  212,  211,
      320,  211,  212,  212,  324,  214,  211,  215,  212,  215,
      321,  211,  214,  325,  215,  211,  214,  211,  322,  215,
      211,  323,  214,  212,    0,  212,  211,    0,  211,  212,

      212,  324,  214,  211,  215,  212,  215,  216,  211,  217,
      325,  215,  219,  326,  219,  216,  215,  216,  217,  219,
      217,  294,  216,  294,  219,  217,  327,  216,  328,  329,
      217,    0,  330,    0,  216,    0,  217,    0,  294,  219,
      326,  219,  216,    0,  216,  217,  219,  217,  294,  216,
      294,  219,  217,  327,  216,  328,  329,  217,  218,  330,
      218,  220,  221,  220,  218,  294,  221,  331,  220,  222,
      218,  218,  221,  220,  332,  218,  333,  222,  334,    0,
      218,  222,  221,    0,  222,  218,  335,  218,  220,  221,
      220,  218,    0,  221,  331,  220,  222,  218,  218,  221,

      220,  332,  218,  333,  222,  334,  223,  218,  222,  221,
      223,  222,  224,  335,  224,  336,  223,  337,  225,  224,
      339,  340,  225,    0,  224,    0,  223,    0,  225,    0,
      226,    0,    0,  223,  226,    0,    0,  223,  225,  224,
      226,  224,  336,  223,  337,  225,  224,  339,  340,  225,
      226,  224,  227,  223,  227,  225,  228,  226,  228,  227,
        0,  226,  227,  228,  227,  225,  342,  226,  228,    0,
      343,    0,  229,    0,  344,    0,    0,  226,  345,  227,
      229,  227,  338,  228,  229,  228,  227,  229,  230,  227,
      228,  227,  338,  342,  346,  228,  230,  343,  231,  229,

      230,  344,  231,  230,  347,  345,  232,  229,  231,  338,
      232,  229,  348,  349,  229,  230,  232,  232,  231,  338,
      350,  346,  351,  230,  353,  231,  232,  230,  235,  231,
      230,  347,  235,  232,  234,  231,  234,  232,  235,  348,
      349,  234,    0,  232,  232,  231,  234,  350,  235,  351,
      354,  353,  355,  232,  233,  235,  236,  356,  357,  235,
      236,  234,  233,  234,  233,  235,  236,  358,  234,  233,
      233,    0,  359,  234,  233,  235,  236,  354,    0,  355,
      237,  233,  360,  236,  356,  357,  361,  236,  237,  233,
      240,  233,  237,  236,  358,  237,  233,  233,  240,  359,

        0,  233,  240,  236,    0,  240,  241,  237,    0,  360,
      362,    0,  242,  361,  241,  237,  363,  240,  241,  237,
      242,  241,  237,  238,  242,  240,  364,  242,  238,  240,
      238,  238,  240,  241,    0,  238,  365,  362,  238,  242,
      366,  241,    0,  363,    0,  241,    0,  242,  241,    0,
      238,  242,    0,  364,  242,  238,    0,  238,  238,    0,
        0,  243,  238,  365,  367,  238,  239,  366,  239,  243,
      244,  239,    0,  243,    0,  243,  243,  368,  244,  239,
      369,    0,  244,  239,  244,  244,  239,  245,  243,  245,
        0,  367,    0,  239,  245,  239,  243,  244,  239,  245,

      243,  246,  243,  243,  368,  244,  239,  369,  246,  244,
      239,  244,  244,  239,  245,  246,  245,  247,  246,  248,
      371,  245,  372,  373,  374,  247,  245,  248,  246,  247,
        0,  248,  247,  375,  248,  246,    0,  376,    0,    0,
        0,  377,  246,    0,  247,  246,  248,  371,  378,  372,
      373,  374,  247,  249,  248,  249,  247,  250,  248,  247,
      375,  248,  379,  249,  376,  250,  251,  249,  377,  250,
      249,  250,  250,    0,  251,  378,  380,    0,  251,  382,
      249,  251,  249,    0,  250,    0,    0,    0,    0,  379,
      249,    0,  250,  251,  249,  252,  250,  249,  250,  250,

      253,  251,  252,  380,  253,  251,  382,  254,  251,  252,
      253,  255,  252,  255,  254,  266,  385,  386,  255,  266,
      253,  254,  252,  255,  254,  266,    0,  253,    0,  252,
        0,  253,  387,    0,  254,  266,  252,  253,  255,  252,
      255,  254,  266,  385,  386,  255,  266,  253,  254,  256,
      255,  254,  266,  257,  256,  257,  256,  258,  383,  387,
      257,  256,  266,    0,  258,  257,  256,  383,  388,  272,
        0,  258,  389,  272,  258,    0,  256,    0,  390,  272,
      257,  256,  257,  256,  258,  383,    0,  257,  256,  272,
      260,  258,  257,  256,  383,  388,  272,  260,  258,  389,

      272,  258,  259,    0,  260,  390,  272,  260,  261,  391,
        0,  259,  393,  259,    0,  261,  272,  260,  259,  259,
        0,    0,  261,  259,  260,  261,    0,    0,    0,  259,
      262,  260,  394,    0,  260,  261,  391,  262,  259,  393,
      259,  263,  261,    0,  262,  259,  259,  262,  263,  261,
      259,    0,  261,  264,  264,  263,    0,  262,  263,  394,
      264,    0,    0,    0,  262,  511,  512,  264,  263,    0,
      264,  262,    0,  513,  262,  263,  265,  265,  265,  514,
      264,  264,  263,  265,    0,  263,    0,  264,  265,  267,
      267,  267,  511,  512,  264,  392,  267,  264,  515,  392,

      513,  267,    0,  265,  265,  265,  514,  268,  516,  268,
      265,  268,    0,  269,  268,  265,  267,  267,  267,  268,
      269,    0,  392,  267,    0,  515,  392,  269,  267,  271,
      269,    0,  517,  269,  268,  516,  268,  271,  268,  271,
      269,  268,    0,  384,  271,  384,  268,  269,  270,  271,
        0,  270,    0,  270,  269,    0,  271,  269,  270,  517,
      269,  518,  520,  270,  271,    0,  271,  273,    0,  273,
      384,  271,  384,  273,  273,  270,  271,  275,  270,  273,
      270,  275,  274,    0,    0,  270,  274,  275,  518,  520,
      270,    0,  274,    0,  273,  274,  273,  275,    0,    0,

      273,  273,  274,  277,  275,    0,  273,  524,  275,  274,
      277,  276,  525,  274,  275,  276,    0,  277,  397,  274,
      277,  276,  274,  398,  275,  397,  276,  398,    0,  274,
      277,  276,  397,  398,  524,  397,  399,  277,  276,  525,
      399,  526,  276,  398,  277,  397,  399,  277,  276,    0,
      398,  400,  397,  276,  398,  400,  399,    0,  276,  397,
      398,  400,  397,  399,  528,    0,    0,  399,  526,    0,
      398,  400,  401,  399,  401,  529,  404,  530,  400,  401,
      404,  531,  400,  399,  401,  402,  404,  402,  400,  532,
      533,  528,  402,  403,    0,  403,  404,  402,  400,  401,

      403,  401,  529,  404,  530,  403,  401,  404,  531,    0,
        0,  401,  402,  404,  402,    0,  532,  533,    0,  402,
      403,  405,  403,  404,  402,  405,  406,  403,  534,  407,
      406,  405,  403,  407,  535,  408,  406,  408,  409,  407,
      409,  405,  408,  536,  406,  409,  406,  408,  405,  407,
      409,    0,  405,  406,  537,  534,  407,  406,  405,  538,
      407,  535,  408,  406,  408,  409,  407,  409,  405,  408,
      536,  406,  409,  406,  408,  411,  407,  409,  410,  539,
      410,  537,  411,  542,  410,  412,  538,  543,  544,  411,
      545,  410,  411,  412,    0,  410,    0,  412,  546,  547,

      412,    0,  411,  548,    0,  410,  539,  410,    0,  411,
      542,  410,  412,    0,  543,  544,  411,  545,  410,  411,
      412,  413,  410,  414,  412,  546,  547,  412,  413,  413,
      548,  414,    0,  413,  550,  414,  413,  414,  414,  415,
      416,  551,  554,  415,    0,  555,    0,  416,  413,  415,
      414,    0,    0,  557,  416,  413,  413,  416,  414,  415,
      413,  550,  414,  413,  414,  414,  415,  416,  551,  554,
      415,  417,  555,  417,  416,  418,  415,    0,  417,  418,
      557,  416,  560,  417,  416,  418,  415,  419,  561,  562,
        0,  419,  420,  563,  420,  418,    0,  419,  417,  420,

      417,  564,  418,  567,  420,  417,  418,  419,    0,  560,
      417,  571,  418,  421,  419,  561,  562,  421,  419,  420,
      563,  420,  418,  421,  419,  422,  420,  573,  564,    0,
      567,  420,  422,  421,  419,  565,    0,  575,  571,  422,
      421,  423,  422,  425,  421,  423,  565,  425,  576,  576,
      421,  423,  422,  425,  573,  577,  423,  578,    0,  422,
      421,  423,  565,  425,  575,  424,  422,  424,  423,  422,
      425,  424,  423,  565,  425,  576,  576,  424,  423,  580,
      425,  426,  577,  423,  578,  426,  427,  424,  423,  427,
      425,  426,  424,  427,  424,    0,  426,    0,  424,  427,

        0,  426,    0,    0,  424,  581,  580,    0,  426,  427,
      431,  428,  426,  427,  424,  428,  427,  431,  426,  582,
      427,  428,  428,  426,  431,  429,  427,  431,  426,  429,
      430,  428,  581,  583,  430,  429,  427,  431,  428,    0,
      430,    0,  428,  432,  431,  429,  582,  432,  428,  428,
      430,  431,  429,  432,  431,    0,  429,  430,  428,  584,
      583,  430,  429,  432,    0,    0,  434,  430,  434,  433,
      432,  433,  429,  434,  432,  433,    0,  430,  434,  586,
      432,  433,  435,    0,  435,  437,  584,  437,  587,  435,
      432,  433,  437,  434,  435,  434,  433,  437,  433,    0,

      434,  588,  433,  436,  589,  434,  586,  590,  433,  435,
      436,  435,  437,  591,  437,  587,  435,  436,  433,  437,
      436,  435,  438,    0,  437,    0,  438,    0,  588,  439,
      436,  589,  438,  592,  590,  593,  439,  436,  440,    0,
      591,    0,  438,  439,  436,  440,  439,  436,  594,  438,
      440,    0,  440,  438,  441,  440,  439,    0,    0,  438,
      592,  441,  593,  439,    0,  440,  441,    0,  441,  438,
      439,  441,  440,  439,  443,  594,  595,  440,  442,  440,
      442,  441,  440,    0,  443,  442,  443,  597,  441,  598,
      442,  443,  599,  441,  444,  441,  443,    0,  441,  600,

      446,  443,  444,  595,  446,  442,  444,  442,  445,  444,
      446,  443,  442,  443,  597,  445,  598,  442,  443,  599,
      446,  444,  445,  443,  447,  445,  600,  446,  447,  444,
        0,  446,  601,  444,  447,  445,  444,  446,    0,  447,
        0,    0,  445,  448,  447,    0,    0,  446,    0,  445,
      448,  447,  445,  604,  605,  447,    0,  448,  449,  601,
      448,  447,  450,  451,  606,  449,  447,  451,  449,  450,
      448,  447,  449,  451,    0,  449,  450,  448,  452,  450,
      604,  605,  452,  451,  448,  449,  608,  448,  452,  450,
      451,  606,  449,  609,  451,  449,  450,  453,  452,  449,

      451,  453,  449,  450,  610,  452,  450,  453,  611,  452,
      451,  455,  454,  608,  612,  452,  454,  453,  613,  455,
      609,  456,  454,  455,  453,  452,  455,    0,  453,  456,
        0,  610,  454,  456,  453,  611,  456,    0,  455,  454,
        0,  612,    0,  454,  453,  613,  455,    0,  456,  454,
      455,    0,    0,  455,  457,  614,  456,  459,  615,  454,
      456,  459,  457,  456,  458,  617,  457,  459,  619,  457,
      460,  735,  458,  736,  460,  738,  458,  459,  458,  458,
      460,  457,  614,  739,  459,  615,    0,  740,  459,  457,
      460,  458,  617,  457,  459,  619,  457,  460,  735,  458,

      736,  460,  738,  458,  459,  458,  458,  460,  461,  461,
      739,  462,  741,  461,  740,  742,  463,  460,  462,  461,
      464,  743,  463,  463,    0,  462,  464,  464,  462,  461,
      463,  744,    0,  463,  464,  461,  461,  464,  462,  741,
      461,  745,  742,  463,  747,  462,  461,  464,  743,  463,
      463,  465,  462,  464,  464,  462,  461,  463,  744,  465,
      463,  464,  466,  465,  464,  748,  465,  467,  745,  749,
      466,  747,  468,    0,  466,  467,  466,  466,  465,  467,
      468,    0,  467,    0,  468,  750,  465,  468,  751,  466,
      465,    0,  748,  465,  467,    0,  749,  466,  469,  468,

      469,  466,  467,  466,  466,  469,  467,  468,  470,  467,
      469,  468,  750,  753,  468,  751,  470,  471,  472,  471,
      470,    0,  472,  470,  471,  469,    0,  469,  472,  471,
        0,    0,  469,    0,  754,  470,  755,  469,  472,  756,
      753,    0,    0,  470,  471,  472,  471,  470,  473,  472,
      470,  471,  473,  474,  757,  472,  471,  475,  473,  475,
      474,  754,  758,  755,  475,  472,  756,  474,  473,  475,
      474,    0,  759,    0,  760,  473,  761,  762,    0,  473,
      474,  757,    0,    0,  475,  473,  475,  474,  765,  758,
      766,  475,  768,  770,  474,  473,  475,  474,  476,  759,

      476,  760,  476,  761,  762,  476,  477,  477,  477,  478,
      476,  773,  774,  477,  479,  765,  478,  766,  477,  768,
      770,  479,    0,  478,    0,  476,  478,  476,  479,  476,
        0,  479,  476,  477,  477,  477,  478,  476,  773,  774,
      477,  479,  480,  478,    0,  477,  776,    0,  479,  480,
      478,  775,    0,  478,  775,  479,  480,  481,  479,  480,
      482,  480,  482,  781,  481,  783,    0,  482,    0,  480,
        0,  481,  482,  776,  481,  483,  480,  784,  775,  483,
        0,  775,    0,  480,  481,  483,  480,  482,  480,  482,
      781,  481,  783,  484,  482,  483,    0,  484,  481,  482,

        0,  481,  483,  484,  784,  485,  483,  486,  785,  485,
        0,  486,  483,  484,  488,  485,  488,  486,  788,  487,
      484,  488,  483,  487,  484,  485,  488,  486,    0,  487,
      484,  789,  485,  790,  486,  785,  485,  487,  486,  487,
      484,  488,  485,  488,  486,  788,  487,  791,  488,    0,
      487,    0,  485,  488,  486,  489,  487,  489,  789,  792,
      790,  793,  489,  489,  487,  795,  487,  489,  490,  796,
      490,  491,  797,  491,  791,  490,  490,    0,  491,    0,
      490,    0,  489,  491,  489,    0,  792,    0,  793,  489,
      489,  798,  795,    0,  489,  490,  796,  490,  491,  797,

      491,  799,  490,  490,  492,  491,  492,  490,  492,  800,
      491,  492,  493,    0,  493,  494,  492,  494,  798,  493,
      493,    0,  494,    0,  493,    0,  801,  494,  799,    0,
      495,  492,  802,  492,  495,  492,  800,    0,  492,  493,
      495,  493,  494,  492,  494,  803,  493,  493,  496,  494,
      495,  493,  496,  801,  494,  804,  497,  495,  496,  802,
      497,  495,  498,    0,  498,    0,  497,  495,  496,  498,
        0,    0,  803,    0,  498,  496,  497,  495,  805,  496,
      806,    0,  804,  497,  807,  496,  809,  497,  500,  498,
      499,  498,  500,  497,  810,  496,  498,  499,  500,  499,

      500,  498,  501,  497,  499,  805,  501,  806,  500,  499,
        0,  807,  501,  809,    0,  500,    0,  499,  811,  500,
      813,  810,  501,  502,  499,  500,  499,  500,  814,  501,
      502,  499,    0,  501,  815,  500,  499,  502,  901,  501,
      502,  503,    0,  503,  504,  811,  903,  813,  503,  501,
      502,  505,  504,  503,  505,  814,  504,  502,  905,  504,
      906,  815,  505,    0,  502,  901,  505,  502,  503,  505,
      503,  504,    0,  903,  907,  503,  508,    0,  505,  504,
      503,  505,  506,  504,  508,  905,  504,  906,  508,  505,
      506,  508,  507,  505,  506,    0,  505,  506,  909,  506,

      507,  907,    0,  508,  507,  911,  507,  507,    0,  506,
        0,  508,    0,    0,  912,  508,  913,  506,  508,  507,
      914,  506,  509,  510,  506,  909,  506,  507,  622,  509,
      510,  507,  911,  507,  507,  622,  509,  510,  916,  509,
      510,  912,  622,  913,  623,  622,    0,  914,    0,  509,
      510,  623,    0,    0,  918,  622,  509,  510,  623,  922,
        0,  623,  622,  509,  510,  916,  509,  510,  924,  622,
      624,  623,  622,  627,  624,  625,  925,  627,  623,  626,
      624,  918,  625,  627,  931,  623,  922,  626,  623,  625,
      624,  626,  625,  627,  626,  924,    0,  624,    0,    0,

      627,  624,  625,  925,  627,    0,  626,  624,    0,  625,
      627,  931,    0,    0,  626,  628,  625,  624,  626,  625,
      627,  626,    0,  628,  629,  630,  631,  628,  629,  630,
      628,  932,  632,  631,  629,  630,  933,  936,  937,  632,
      631,    0,  628,  631,  629,  630,  632,    0,    0,  632,
      628,  629,  630,  631,  628,  629,  630,  628,  932,  632,
      631,  629,  630,  933,  936,  937,  632,  631,  633,  939,
      631,  629,  630,  632,  634,  633,  632,  940,  941,  636,
      635,  634,  633,  636,  942,  633,  637,  635,  634,  636,
      944,  634,  635,  637,  635,  633,  939,  635,  945,  636,

      637,  634,  633,  637,  940,  941,  636,  635,  634,  633,
      636,  942,  633,  637,  635,  634,  636,  944,  634,  635,
      637,  635,  638,  946,  635,  945,  636,  637,  639,  638,
      637,  640,  949,  640,  951,  639,  638,  953,  640,  638,
      954,  955,  639,  640,    0,  639,    0,  639,    0,  638,
      946,    0,    0,    0,  956,  639,  638,    0,  640,  949,
      640,  951,  639,  638,  953,  640,  638,  954,  955,  639,
      640,  641,  639,  641,  639,  642,  957,  642,  641,  641,
      644,  956,  642,  641,  643,  643,  643,  642,  644,    0,
      962,  643,  644,    0,  963,  644,  643,    0,  641, 1033,

      641,    0,  642,  957,  642,  641,  641,  644, 1034,  642,
      641,  643,  643,  643,  642,  644,  645,  962,  643,  644,
      646,  963,  644,  643,  645,  647, 1033,  646,  645, 1037,
      645,  645,  647,    0,  646, 1034,    0,  646, 1038,  647,
     1043,    0,  647,  645, 1044,    0,  648,  646,  648,    0,
        0,  645,  647,  648,  646,  645, 1037,  645,  645,  647,
      648,  646,    0,  648,  646, 1038,  647, 1043,  649,  647,
     1046, 1044,  649,  648,  650,  648,  650,  651,  649,  651,
      648,  650, 1047, 1051,  651,    0,  650,  648,  649,  651,
      648,    0,    0,    0,    0,  649,    0, 1046,    0,  649,

      652,  650,  652,  650,  651,  649,  651,  652,  650, 1047,
     1051,  651,  652,  650, 1052,  649,  651, 1054,  653,  654,
      653,  654,  653,  654, 1056,  653,  654,  652,  655,  652,
      653,  654, 1057, 1059,  652,    0,  655, 1060,    0,  652,
      655, 1052,    0,  655, 1054,  653,  654,  653,  654,  653,
      654, 1056,  653,  654,  656,  655, 1100,  653,  654, 1057,
     1059,    0,  656,  655, 1060,  657,  656,  655,  656,  656,
      655,  658,  657,    0, 1103, 1106, 1110,    0,  658,  657,
      659,  656,  657, 1100,  659,  658, 1111,    0,  658,  656,
      659,    0,  657,  656, 1112,  656,  656,    0,  658,  657,

      659, 1103, 1106, 1110,  660,  658,  657,  659,  660,  657,
        0,  659,  658, 1111,  660,  658,    0,  659,  661,    0,
     1129, 1112,  661,  662,  660,  663, 1131,  659,  661,  664,
      662,  660,  663,  661,    0,  660,  664,  662,  661,  663,
      662,  660,  663,  664,    0,  661,  664, 1129, 1134,  661,
      662,  660,  663, 1131,  665,  661,  664,  662, 1143,  663,
      661,  665,    0,  664,  662,  661,  663,  662,  665,  663,
      664,  665,  666,  664,    0, 1134,  667,    0,    0,  666,
        0,  665,    0,  667,    0, 1143,  666,  666,  665,  666,
      667,    0,  668,  667,    0,  665,    0,  669,  665,  666,

      668,    0,    0,  667,  668,  669,  666,  668,    0,  669,
      667,    0,  669,  666,  666,    0,  666,  667,  670,  668,
      667,    0,    0,    0,  669,    0,  670,  668,    0,  672,
      670,  668,  669,  670,  668,    0,  669,  672,  671,  669,
        0,  672,  671,    0,  672,  670,    0,  673,  671,  673,
        0,    0,    0,  670,  673,  674,  672,  670,  671,  673,
      670,    0,    0,  674,  672,  671,    0,  674,  672,  671,
      674,  672,  675,    0,  673,  671,  673,    0,    0,    0,
      675,  673,  674,  677,  675,  671,  673,  675,  676,  676,
      674,  677,    0,    0,  674,  677,  676,  674,  677,  675,

      676,    0,    0,  676,    0,    0,    0,  675,    0,    0,
      677,  675,    0,    0,  675,  676,  676,  678,  677,  678,
        0,    0,  677,  676,  678,  677,  679,  676,  679,  678,
      676,    0,    0,  679,    0,  680,    0,  680,  679,    0,
        0,    0,  680,    0,  678,    0,  678,  680,    0,    0,
        0,  678,    0,  679,    0,  679,  678,    0,    0,  681,
      679,  681,  680,    0,  680,  679,  681,    0,  682,  680,
      682,  681,    0,    0,  680,  682,  682,  683,    0,  683,
      682,    0,    0,    0,  683,    0,  681,    0,  681,  683,
        0,    0,    0,  681,    0,  682,    0,  682,  681,    0,

        0,    0,  682,  682,  683,    0,  683,  682,  684,    0,
      684,  683,  685,  686,  685,  684,  683,  686,    0,  685,
      684,    0,    0,  686,  685,    0,    0,    0,    0,    0,
        0,  688,    0,  686,    0,  684,    0,  684,  688,  685,
      686,  685,  684,    0,  686,  688,  685,  684,  688,    0,
      686,  685,    0,    0,  687,    0,  687,  689,  688,    0,
      686,  687,  687,  690,  689,  688,  687,    0,    0,    0,
      690,  689,  688,    0,  689,  688,    0,  690,    0,    0,
      690,  687,    0,  687,  689,  691,    0,  691,  687,  687,
      690,  689,  691,  687,    0,    0,  692,  690,  689,  691,

      692,  689,  691,  693,  690,    0,  692,  690,  694,    0,
      693,    0,  691,    0,  691,  694,  692,  693,    0,  691,
      693,    0,  694,  692,  695,  694,  691,  692,    0,  691,
      693,  695,    0,  692,    0,  694,  695,  693,  695,  696,
        0,  695,  694,  692,  693,    0,  696,  693,    0,  694,
      697,  695,  694,  696,    0,  698,  696,  697,  695,    0,
        0,    0,  698,  695,  697,  695,  696,  697,  695,  698,
        0,  699,  698,  696,    0,    0,    0,  697,  699,    0,
      696,    0,  698,  696,  697,  699,  701,    0,  699,  698,
      699,  697,    0,  701,  697,    0,  698,  700,  699,  698,

      701,    0,    0,  701,  700,  699,    0,    0,    0,  700,
        0,  700,  699,  701,  700,  699,    0,  699,  702,    0,
      701,    0,    0,    0,  700,  702,    0,  701,    0,    0,
      701,  700,  702,  703,  703,  702,  700,  702,  700,  704,
      703,  700,  705,    0,  705,  702,  704,  703,    0,  705,
      703,  704,  702,  704,  705,    0,  704,    0,    0,  702,
      703,  703,  702,    0,  702,    0,  704,  703,    0,  705,
        0,  705,    0,  704,  703,  706,  705,  703,  704,    0,
      704,  705,    0,  704,  706,  707,  706,  707,  708,  709,
      708,  706,  707,  709,    0,  708,  706,  707,    0,  709,

      708,    0,  706,    0,    0,    0,    0,    0,    0,  709,
        0,  706,  707,  706,  707,  708,  709,  708,  706,  707,
      709,  710,  708,  706,  707,  710,  709,  708,    0,  711,
      712,  710,    0,  711,  712,    0,  709,    0,    0,  711,
      712,  710,    0,  713,    0,    0,    0,  713,  710,  711,
      712,    0,  710,  713,    0,  714,  711,  712,  710,  714,
      711,  712,    0,  713,    0,  714,  711,  712,  710,    0,
      713,  715,    0,  715,  713,  714,  711,  712,  715,    0,
      713,  716,  714,  715,    0,  716,  714,  717,    0,  717,
      713,  716,  714,    0,  717,    0,    0,    0,  715,  717,

      715,  716,  714,    0,    0,  715,    0,    0,  716,    0,
      715,    0,  716,  718,  717,  718,  717,  720,  716,  720,
      718,  717,  719,    0,  720,  718,  717,    0,  716,  720,
        0,  719,    0,  719,    0,    0,    0,    0,  719,    0,
      718,    0,  718,  719,  720,    0,  720,  718,    0,  719,
      722,  720,  718,    0,  721,    0,  720,  722,  719,    0,
      719,  723,  721,    0,  722,  719,  721,  722,  723,  721,
      719,    0,    0,    0,    0,  723,    0,  722,  723,    0,
      723,  721,    0,    0,  722,    0,    0,    0,  723,  721,
        0,  722,  724,  721,  722,  723,  721,    0,  724,  724,

      725,  726,  723,    0,  725,  723,  724,  723,  726,  724,
      725,    0,    0,    0,    0,  726,    0,    0,  726,  724,
      725,    0,    0,    0,    0,  724,  724,  725,  726,    0,
        0,  725,  727,  724,    0,  726,  724,  725,    0,  727,
      728,    0,  726,    0,    0,  726,  727,  725,  728,  727,
      729,    0,  728,    0,    0,  728,    0,    0,  729,  727,
      730,    0,  729,    0,  730,  729,  727,  728,  731,    0,
      730,    0,  731,  727,    0,  728,  727,  729,  731,  728,
      730,    0,  728,    0,    0,  729,  732,  730,  731,  729,
      732,  730,  729,    0,  817,  731,  732,  730,  817,  731,

        0,    0,    0,    0,  817,  731,  732,  730,  818,    0,
        0,    0,  818,  732,  817,  731,  819,  732,  818,    0,
      819,  817,    0,  732,    0,  817,  819,    0,  818,    0,
      820,  817,    0,  732,  820,  818,  819,  819,  821,  818,
      820,  817,  821,  819,    0,  818,    0,  819,  821,    0,
      820,    0,  822,  819,    0,  818,  822,  820,  821,    0,
        0,  820,  822,  819,  819,  821,  823,  820,    0,  821,
      823,    0,  822,  824,    0,  821,  823,  820,    0,  822,
      824,  823,    0,  822,    0,  821,  823,  824,  825,  822,
      824,  825,    0,  823,    0,  825,    0,  823,    0,  822,

      824,    0,  825,  823,  826,  825,    0,  824,  823,    0,
        0,    0,  826,  823,  824,  825,  826,  824,  825,  826,
        0,    0,  825,    0,    0,    0,  827,    0,  828,  825,
        0,  826,  825,    0,  827,  828,    0,    0,  827,  826,
      827,  827,  828,  826,  829,  828,  826,    0,  829,    0,
        0,    0,    0,  827,  829,  828,  830,    0,    0,    0,
      830,  827,  828,    0,  829,  827,  830,  827,  827,  828,
      831,  829,  828,    0,  831,  829,  830,  834,  832,  834,
      831,  829,  832,  830,  834,  833,    0,  830,  832,  834,
      831,  829,  833,  830,    0,    0,    0,  831,  832,  833,

        0,  831,  833,  830,  834,  832,  834,  831,    0,  832,
      835,  834,  833,    0,  835,  832,  834,  831,  836,  833,
      835,    0,  836,  837,    0,  832,  833,  837,  836,  833,
      835,    0,  839,  837,  839,    0,  838,  835,  836,  839,
      838,  835,    0,  837,  839,  836,  838,  835,  840,  836,
      837,  838,  840,    0,  837,  836,  838,  835,  840,  839,
      837,  839,    0,  838,    0,  836,  839,  838,  840,    0,
      837,  839,  841,  838,    0,  840,  841,    0,  838,  840,
        0,    0,  841,  838,  845,  840,  842,  843,  845,    0,
      842,  843,  841,    0,  845,  840,  842,  843,  844,  841,

      844,  842,  843,  841,  845,  844,  842,  843,    0,  841,
      844,  845,    0,  842,  843,  845,    0,  842,  843,  841,
        0,  845,    0,  842,  843,  844,    0,  844,  842,  843,
        0,  845,  844,  842,  843,  847,  846,  844,  846,  847,
      848,    0,  846,    0,  848,  847,    0,    0,  846,  850,
      848,  850,    0,    0,    0,  847,  850,    0,  846,    0,
      848,  850,  847,  846,  849,  846,  847,  848,  849,  846,
        0,  848,  847,    0,  849,  846,  850,  848,  850,  849,
        0,    0,  847,  850,  849,  846,    0,  848,  850,    0,
      851,  849,  851,  852,    0,  849,    0,  851,  852,    0,

      852,  849,  851,    0,    0,  852,  849,    0,    0,    0,
      852,  849,    0,    0,  853,    0,  853,  851,    0,  851,
      852,  853,    0,    0,  851,  852,  853,  852,  854,  851,
      854,    0,  852,    0,    0,  854,  854,  852,    0,    0,
      854,  853,  855,  853,  855,    0,    0,    0,  853,  855,
        0,    0,    0,  853,  855,  854,    0,  854,  856,    0,
      856,    0,  854,  854,    0,  856,  857,  854,  857,  855,
      856,  855,    0,  857,  857,    0,  855,    0,  857,  858,
        0,  855,    0,  858,  859,  856,  859,  856,    0,  858,
        0,  859,  856,  857,  859,  857,  859,  856,    0,  858,

      857,  857,  860,    0,  860,  857,  858,    0,    0,  860,
      858,  859,    0,  859,  860,  861,  858,  861,  859,    0,
        0,  859,  861,  859,    0,    0,  858,  861,  862,  860,
      862,  860,    0,    0,    0,  862,  860,    0,    0,    0,
      862,  860,  861,    0,  861,    0,  863,    0,  863,  861,
        0,    0,    0,  863,  861,  862,    0,  862,  863,  864,
        0,  864,  862,    0,  865,    0,  864,  862,  865,    0,
        0,  864,  866,  863,  865,  863,  866,    0,    0,    0,
      863,    0,  866,  867,  865,  863,  864,    0,  864,    0,
      867,  865,  866,  864,    0,  865,    0,  867,  864,  866,

      867,  865,    0,  866,    0,    0,  868,    0,    0,  866,
      867,  865,    0,  868,  870,  869,    0,  867,    0,  866,
      868,  870,  869,  868,  867,    0,  872,  867,  870,  869,
      872,  870,  869,  868,  869,    0,  872,  871,    0,    0,
      868,  870,  869,    0,  871,    0,  872,  868,  870,  869,
      868,  871,    0,  872,  871,  870,  869,  872,  870,  869,
      873,  869,  874,  872,  871,    0,    0,  873,    0,  874,
        0,  871,    0,  872,  873,    0,  874,  873,  871,  874,
      875,  871,  876,    0,  875,    0,  876,  873,    0,  874,
      875,    0,  876,    0,  873,  877,  874,    0,    0,  877,

      875,  873,  876,  874,  873,  877,  874,  875,  878,  876,
        0,  875,  878,  876,    0,  877,  879,  875,  878,  876,
        0,    0,  877,  879,  880,    0,  877,  875,  878,  876,
      879,  880,  877,  879,    0,  878,    0,    0,  880,  878,
        0,  880,  877,  879,    0,  878,    0,    0,    0,  881,
      879,  880,  881,    0,    0,  878,  881,  879,  880,    0,
      879,    0,    0,  881,    0,  880,  881,  882,  880,    0,
        0,    0,    0,    0,  882,    0,  881,    0,  883,  881,
        0,  882,  883,  881,  882,    0,  882,    0,  883,    0,
      881,  884,  884,  881,  882,    0,  884,    0,  883,    0,

      885,  882,  884,    0,    0,  883,    0,  885,  882,  883,
        0,  882,  884,  882,  885,  883,    0,  885,  884,  884,
        0,  887,    0,  884,  886,  883,  886,  885,  887,  884,
      889,  886,  889,  888,  885,  887,  886,  889,  887,  884,
      888,  885,  889,    0,  885,    0,    0,  888,  887,    0,
      888,  886,  888,  886,  890,  887,    0,  889,  886,  889,
      888,  890,  887,  886,  889,  887,  891,  888,  890,  889,
        0,  890,    0,  891,  888,  892,    0,  888,    0,  888,
      891,  890,  892,  891,    0,    0,  893,    0,  890,  892,
      893,    0,  892,  891,    0,  890,  893,    0,  890,    0,

      891,  895,  892,  894,  894,  895,  893,  891,  894,  892,
      891,  895,    0,  893,  894,    0,  892,  893,    0,  892,
        0,  895,    0,  893,  894,    0,    0,    0,  895,    0,
      894,  894,  895,  893,    0,  894,  896,  897,  895,  897,
      896,  894,    0,  898,  897,  899,  896,    0,  895,  897,
      898,  894,  899,    0,    0,    0,  896,  898,    0,  899,
      898,  900,  899,  896,  897,    0,  897,  896,  900,    0,
      898,  897,  899,  896,    0,  900,  897,  898,  900,  899,
        0,  964,    0,  896,  898,  964,  899,  898,  900,  899,
      965,  964,    0,    0,  965,  900,    0,  966,    0,  966,

      965,  964,  900,    0,  966,  900,    0,    0,  964,  966,
      965,    0,  964,  967,    0,  967,    0,  965,  964,    0,
      967,  965,    0,    0,  966,  967,  966,  965,  964,    0,
        0,  966,  968,    0,  968,    0,  966,  965,    0,  968,
      967,  970,  967,  970,  968,  969,    0,  967,  970,  969,
        0,    0,  967,  970,    0,  969,    0,    0,    0,  968,
        0,  968,  971,    0,  971,  969,  968,    0,  970,  971,
      970,  968,  969,    0,  971,  970,  969,    0,    0,    0,
      970,  972,  969,  972,    0,    0,    0,    0,  972,  971,
        0,  971,  969,  972,    0,  973,  971,  973,    0,    0,

        0,  971,  973,    0,  974,  974,  974,  973,  972,    0,
      972,  974,    0,    0,  975,  972,  974,    0,    0,    0,
      972,    0,  973,  975,  973,  975,    0,    0,    0,  973,
      975,  974,  974,  974,  973,  975,    0,  976,  974,  976,
        0,  975,    0,  974,  976,    0,  977,    0,  977,  976,
      975,    0,  975,  977,  977,    0,    0,  975,  977,    0,
        0,    0,  975,    0,  976,  978,  976,  978,    0,    0,
        0,  976,  978,  977,  979,  977,  976,  978,    0,    0,
      977,  977,    0,    0,  979,  977,  979,    0,  980,    0,
      980,  979,  978,    0,  978,  980,  979,    0,  981,  978,

      980,  979,    0,    0,  978,    0,    0,  981,    0,  981,
        0,  979,    0,  979,  981,  980,    0,  980,  979,  981,
        0,    0,  980,  979,    0,  981,  982,  980,  982,    0,
      983,    0,  983,  982,  981,    0,  981,  983,  982,    0,
        0,  981,  983,    0,    0,    0,  981,    0,  985,  984,
        0,  984,  985,  982,    0,  982,  984,  983,  985,  983,
      982,  984,  986,    0,  983,  982,  986,    0,  985,  983,
        0,    0,  986,    0,    0,  985,  984,    0,  984,  985,
        0,    0,  986,  984,  987,  985,  987,    0,  984,  986,
      988,  987,  988,  986,    0,  985,  987,  988,  988,  986,

        0,    0,  988,  989,    0,  989,    0,    0,    0,  986,
      989,  987,    0,  987,  990,  989,  990,  988,  987,  988,
        0,  990,    0,  987,  988,  988,  990,    0,    0,  988,
      989,    0,  989,  991,    0,  991,    0,  989,    0,    0,
      991,  990,  989,  990,  992,  991,  992,  993,  990,  993,
        0,  992,    0,  990,  993,    0,  992,    0,    0,  993,
      991,    0,  991,  994,    0,  995,    0,  991,    0,  995,
      994,  992,  991,  992,  993,  995,  993,  994,  992,    0,
      994,  993,    0,  992,  996,  995,  993,    0,    0,    0,
      994,  996,  995,    0,    0,    0,  995,  994,  996,  997,

        0,  996,  995,  998,  994,    0,  997,  994,    0,    0,
      998,  996,  995,  997,    0,    0,  997,  998,  996,    0,
      998,    0,  999,    0,  999,  996,  997,    0,  996,  999,
      998, 1000,    0,  997,  999,    0,    0,  998, 1000,    0,
      997,    0,    0,  997,  998, 1000, 1001,  998, 1000,  999,
     1002,  999,    0, 1001,    0,    0,  999, 1002, 1000,    0,
     1001,  999,    0, 1001, 1002, 1000, 1003, 1002,    0, 1002,
     1003,    0, 1000, 1001,    0, 1000, 1003, 1002, 1004,    0,
     1001,    0, 1004,    0, 1002, 1005, 1003, 1001, 1004,    0,
     1001, 1002, 1005, 1003, 1002,    0, 1002, 1003, 1004, 1005,

     1006,    0, 1005, 1003, 1007, 1004, 1007, 1006,    0, 1004,
        0, 1007, 1005, 1003, 1006, 1004,    0, 1006, 1007, 1005,
        0, 1007,    0,    0,    0, 1004, 1005, 1006,    0, 1005,
        0, 1007,    0, 1007, 1006, 1008,    0, 1008, 1007,    0,
        0, 1006, 1008,    0, 1006, 1007,    0,    0, 1007, 1008,
        0, 1009, 1008, 1009, 1010,    0, 1010,    0, 1009,    0,
        0, 1010, 1008, 1009, 1008, 1011, 1010, 1011,    0, 1008,
        0,    0, 1011,    0,    0,    0, 1008, 1011, 1009, 1008,
     1009, 1010,    0, 1010, 1012, 1009, 1012,    0, 1010,    0,
     1009, 1012, 1011, 1010, 1011, 1013, 1012, 1013, 1014, 1011,

     1014,    0, 1013,    0, 1011, 1014,    0, 1013,    0,    0,
     1014, 1012,    0, 1012, 1015,    0, 1015,    0, 1012,    0,
        0, 1015, 1013, 1012, 1013, 1014, 1015, 1014, 1016, 1013,
        0,    0, 1014, 1017, 1013, 1016,    0, 1014,    0,    0,
     1017, 1015, 1016, 1015, 1018, 1016,    0, 1017, 1015,    0,
     1017, 1018,    0, 1015,    0, 1016,    0,    0, 1018,    0,
     1017, 1018, 1016, 1018,    0,    0, 1019, 1017, 1019, 1016,
        0, 1018, 1016, 1019, 1017, 1020,    0, 1017, 1018,    0,
     1019,    0, 1020, 1019, 1021, 1018,    0,    0, 1018, 1020,
     1018, 1021, 1020, 1019, 1020, 1019,    0,    0, 1021,    0,

     1019, 1021, 1020,    0,    0,    0, 1022, 1019,    0, 1020,
     1019, 1021,    0, 1022,    0, 1023, 1020, 1024, 1021, 1020,
     1022, 1020, 1023, 1022, 1024, 1021,    0,    0, 1021, 1023,
        0, 1024, 1023, 1022, 1024,    0,    0,    0, 1025,    0,
     1022, 1026, 1023, 1026, 1024, 1025,    0, 1022, 1026, 1023,
     1022, 1024, 1025, 1026,    0, 1025, 1023,    0, 1024, 1023,
        0, 1024, 1063,    0, 1063, 1025,    0,    0, 1026, 1063,
     1026, 1064, 1025, 1064, 1063, 1026,    0,    0, 1064, 1025,
     1026,    0, 1025, 1064,    0, 1065,    0, 1065,    0, 1063,
        0, 1063, 1065,    0,    0,    0, 1063, 1065, 1064,    0,

     1064, 1063,    0,    0, 1066, 1064, 1066,    0,    0,    0,
     1064, 1066, 1065, 1067, 1065, 1067, 1066,    0,    0, 1065,
     1067,    0,    0,    0, 1065, 1067, 1069, 1068,    0, 1068,
     1069, 1066,    0, 1066, 1068,    0, 1069,    0, 1066, 1068,
     1067, 1070, 1067, 1066,    0,    0, 1069, 1067, 1070,    0,
        0,    0, 1067, 1069, 1068, 1070, 1068, 1069, 1070,    0,
     1071, 1068, 1072, 1069,    0,    0, 1068, 1071, 1070, 1072,
        0,    0,    0, 1069, 1071, 1070, 1072, 1071,    0, 1072,
     1073,    0, 1070,    0, 1073, 1070,    0, 1071,    0, 1072,
     1073,    0,    0,    0, 1071, 1074, 1072,    0, 1075, 1074,

     1073, 1071, 1075, 1072, 1071, 1074, 1072, 1073, 1075,    0,
     1074, 1073,    0,    0,    0, 1074,    0, 1073, 1075,    0,
     1076,    0, 1074,    0, 1076, 1075, 1074, 1073,    0, 1075,
     1076,    0, 1074,    0, 1077, 1075,    0, 1074, 1077, 1078,
     1076,    0, 1074, 1078, 1077, 1075, 1079, 1076, 1079, 1078,
        0, 1076, 1079,    0, 1077,    0,    0, 1076, 1079, 1078,
        0, 1077, 1080,    0, 1080, 1077, 1078, 1076, 1079, 1080,
     1078, 1077,    0, 1079, 1080, 1079, 1078,    0,    0, 1079,
     1081, 1077, 1081, 1082, 1083, 1079, 1078, 1081, 1083, 1080,
     1082, 1080, 1081,    0, 1083, 1079, 1080, 1082, 1084,    0,

     1082, 1080, 1084,    0, 1083,    0,    0, 1081, 1084, 1081,
     1082, 1083, 1085,    0, 1081, 1083, 1085, 1082, 1084, 1081,
        0, 1083, 1085,    0, 1082, 1084, 1086, 1082,    0, 1084,
     1086, 1083, 1085,    0,    0, 1084, 1086,    0,    0, 1085,
     1087,    0,    0, 1085, 1087, 1084, 1086,    0, 1088, 1085,
     1087,    0, 1088, 1086, 1088, 1087,    0, 1086, 1088, 1085,
     1087,    0,    0, 1086,    0,    0, 1089, 1087, 1088,    0,
     1089, 1087,    0, 1086, 1090, 1088, 1089, 1087, 1090, 1088,
        0, 1088, 1087,    0, 1090, 1088, 1089, 1087, 1091, 1090,
        0,    0, 1091, 1089, 1090, 1088,    0, 1089, 1091,    0,

     1092, 1090,    0, 1089,    0, 1090,    0, 1092, 1091,    0,
        0, 1090,    0, 1089, 1092, 1091, 1090, 1092,    0, 1091,
        0, 1090, 1094,    0,    0, 1091, 1093, 1092,    0, 1094,
        0,    0,    0, 1093, 1092, 1091, 1094,    0, 1093, 1094,
     1093, 1092,    0, 1093, 1092, 1095,    0,    0,    0, 1094,
        0, 1096, 1095, 1093,    0, 1096, 1094,    0,    0, 1095,
     1093, 1096, 1095, 1094, 1095, 1093, 1094, 1093,    0,    0,
     1093, 1096, 1095, 1097,    0,    0,    0, 1097, 1096, 1095,
        0,    0, 1096, 1097,    0,    0, 1095,    0, 1096, 1095,
        0, 1095, 1098, 1097,    0, 1114, 1098, 1116, 1096, 1114,

     1097, 1116, 1098,    0, 1097, 1114,    0, 1116,    0,    0,
     1097,    0, 1098,    0,    0, 1114,    0, 1116,    0, 1098,
     1097, 1115, 1114, 1098, 1116, 1115, 1114,    0, 1116, 1098,
        0, 1115, 1114, 1117, 1116,    0, 1115, 1117,    0, 1098,
        0, 1115, 1114, 1117, 1116, 1119, 1118, 1120, 1115, 1119,
     1118, 1120, 1115, 1117,    0, 1119, 1118, 1120, 1115,    0,
     1117, 1118,    0, 1115, 1117, 1119, 1118, 1120, 1115,    0,
     1117,    0, 1119, 1118, 1120,    0, 1119, 1118, 1120,    0,
     1117,    0, 1119, 1118, 1120,    0,    0,    0, 1118, 1121,
     1122, 1123, 1119, 1118, 1120, 1124, 1121, 1122, 1123,    0,

        0,    0, 1124, 1121, 1122, 1123, 1121, 1122, 1123, 1124,
        0,    0, 1124,    0,    0,    0, 1121, 1122, 1123,    0,
        0,    0, 1124, 1121, 1122, 1123,    0,    0,    0, 1124,
     1121, 1122, 1123, 1121, 1122, 1123, 1124, 1125, 1126, 1124,
     1127, 1125, 1126,    0, 1127,    0,    0, 1125, 1126, 1126,
     1127,    0, 1128,    0,    0,    0, 1128, 1125, 1126,    0,
     1127,    0, 1128,    0, 1125, 1126,    0, 1127, 1125, 1126,
        0, 1127, 1128,    0, 1125, 1126, 1126, 1127, 1135, 1128,
        0,    0, 1135, 1128, 1125, 1126, 1136, 1127, 1135, 1128,
     1136,    0,    0,    0,    0, 1137, 1136, 1137, 1135, 1128,

     1140,    0, 1137,    0, 1140, 1135, 1136, 1137,    0, 1135,
     1140,    0,    0, 1136, 1138, 1135, 1138, 1136,    0,    0,
     1140, 1138, 1137, 1136, 1137, 1135, 1138, 1140, 1139, 1137,
     1139, 1140, 1144, 1136, 1137, 1139, 1144, 1140,    0,    0,
     1139, 1138, 1144, 1138,    0,    0, 1145, 1140, 1138,    0,
     1145,    0, 1144, 1138,    0, 1139, 1145, 1139, 1146, 1144,
     1146,    0, 1139, 1144,    0, 1146, 1145, 1139,    0, 1144,
     1146,    0,    0, 1145, 1148,    0, 1148, 1145,    0, 1144,
        0, 1148,    0, 1145,    0, 1146, 1148, 1146,    0,    0,
        0,    0, 1146, 1145,    0,    0,    0, 1146,    0,    0,

        0, 1148,    0, 1148,    0,    0,    0,    0, 1148,    0,
        0,    0,    0, 1148, 1150, 1150, 1150, 1150, 1150, 1151,
        0,    0, 1151, 1151, 1153, 1153, 1153,    0, 1153, 1154,
        0, 1154, 1154, 1154, 1155,    0, 1155, 1155, 1155, 1156,
        0, 1156, 1156, 1156, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,

     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 2688 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2702 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 58 "flex_lexer.l"


#line 2989 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1150 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1149 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 64 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(QUARTER)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(TINYINT)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(BOOLEAN)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 147:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 154:
#line 220 "flex_lexer.l"
case 155:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 225 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 230 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 236 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 241 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 242 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 243 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 244 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 245 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 247 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 250 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3880 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1150 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1150 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1149);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 250 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

