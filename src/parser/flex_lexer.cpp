#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 159
#define YY_END_OF_BUFFER 160
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1092] =
    {   0,
        0,    0,  156,  156,    2,    2,  160,  158,    4,    4,
      158,  158,  148,  154,  148,  148,  151,  148,  148,  148,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  148,  156,  157,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  143,    0,    1,  151,
      150,  149,  145,  144,  142,  146,  153,  153,  153,  153,

      153,  153,  121,  153,  153,  122,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      123,  153,  153,  124,  125,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  126,  127,  128,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  129,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  147,  156,  155,    2,
        2,    2,    2,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  152,  149,  109,  153,  110,  153,  153,  111,
      153,  112,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  133,  153,  153,  153,

      153,  153,  153,  153,  153,  153,  113,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  114,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      115,  153,  153,  116,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  117,  153,  153,  118,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  119,  153,  153,  153,  153,  153,  153,  153,  153,
      120,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  153,  153,  153,  153,

      153,  153,  153,  153,   78,  153,   79,   41,   80,  153,
      153,  153,   81,  153,  153,   82,  153,  153,  153,  153,
       84,  153,  153,  153,   85,   86,  153,  153,  153,  153,
      153,  153,  153,   87,  153,  153,   88,   89,  153,  153,
       90,  153,   91,  132,  153,  153,  153,  153,  153,  153,
       92,  153,   93,   94,   95,  153,   97,  153,   98,  153,
      153,  153,  153,  100,  153,  153,  153,  153,  153,  101,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  102,
      153,  153,  153,  153,  103,  104,  105,  153,  136,  153,
      153,  153,  153,  153,  153,  153,  153,  106,  153,  107,

      153,  108,  135,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       58,   59,  153,   60,  153,  139,  153,  153,  153,  153,
      153,  153,  153,   61,  153,  153,  153,  153,   62,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  137,
       63,  153,  153,   64,  153,   96,  153,   65,   66,  153,
      153,  153,  153,   67,   68,   69,   70,  153,  134,  153,
      153,  153,   71,   72,  153,  153,  153,  153,  153,   73,
      153,  153,  153,  153,  153,  153,   74,  153,  153,  153,
      153,   75,  153,  153,  153,   76,  153,  153,  153,   77,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      153,   31,  153,   99,  153,   32,  141,  153,   33,  153,
      153,  153,   34,  153,   35,  153,   36,   37,   38,  153,
       39,  153,  153,   42,   43,   44,   45,   46,  153,  153,

       47,  131,  153,  153,   48,  153,  153,  153,   49,  153,
      153,   50,  130,   51,   52,  153,   53,  153,  153,  153,
      153,   54,   55,   56,   57,  153,  153,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   15,   16,   17,   18,   19,  153,
      153,   20,  153,  153,   21,   22,   40,   23,  153,   24,

      153,  153,   25,   26,  153,  153,   27,   28,  153,  153,
      153,  153,   29,   30,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   83,  153,   10,   11,  153,   12,
      153,   13,  140,  153,  153,  153,   14,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      153,    7,  153,    8,    9,  153,    2,    2,    2,    2,
        2,    2,    5,    6,  153,    2,    2,    2,  138,    2,
        0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1099] =
    {   0,
        0,    0,  365,  361,   67,    0,  365, 5710,  133,  135,
      352,    0, 5710, 5710,  131,  353,  133,  132,  317,  312,
      129,  129,  138,  154,  165,  216,  146,  193,  226,  125,
      139,  188,  218,  221,  262,  261,    0,  242,  282,  325,
      272,  292,  179,  144,  255,    0,  308,    0,  147,  161,
      300,  285,    0,    0,  203,  274,  213,  213,  257,  247,
      383,  450,  504,  556,  604,  656,  391,  452,  699,  321,
      333,  375,  447,  750,  799,  456,  491,  506,  845,  897,
      548,  550,  568,  501,  187,  229, 5710,  215, 5710,  285,
      204,  198, 5710, 5710, 5710, 5710,    0,  174,  206,  284,

      304,  230,  289,  563,  287,    0,  374,  326,  619,  383,
      321,  660,  386,  316,  376,  375,  392,  405,  705,  439,
      442,  443,  445,  450,  454,  461,  492,  495,  494,  497,
        0,  511,  509,  607,  549,  559,  554,  574,  601,  666,
      597,  603,  605,  602,  604,  613,  662,  664,    0,  669,
      655,  658,  681,  710,  703,  682,  708,  718,  754,  712,
      710,  728,  731,  746,  729,  723,  746,  775,  755,  771,
      768,  770,  801,  776,  763,  810, 5710,    0, 5710,    0,
      355,    0,  200,    0,  351,  160,  155,    0,    0,    0,
        0,  820,  826,  864,  898,  939,  944,  949,  997, 1000,

      899,  949, 1010, 1051, 1036, 1049, 1102, 1086, 1108, 1113,
     1142, 1154, 1159, 1209, 1168, 1196, 1167, 1208, 1222, 1237,
     1250, 1262, 1274, 1276, 1286,  988, 1114, 1300, 1349, 1321,
     1322, 1339, 1372, 1374, 1426, 1398, 1423, 1452, 1413, 1465,
     1464, 1482, 1500, 1490, 1515, 1518, 1530, 1536, 1544, 1559,
     1572, 1582, 1584, 1634, 1608, 1617, 1646, 1636, 1670, 1671,
     1680, 1692, 1724, 1722, 1732, 1734, 1770, 1760, 1762, 1788,
     1798,    0, 5710,  148,    0,  807,    0,  811,  810,    0,
      827,    0,  821,  828,  836,  856,  854,  952,  849,  847,
      861,  862,  865,  898,  895,  914,    0,  908,  937, 1149,

      953,  954,  940,  992,  994, 1007,    0, 1015, 1018, 1023,
     1009, 1044, 1039, 1040, 1055, 1065, 1066, 1067, 1070, 1113,
     1149, 1163, 1166, 1163, 1198, 1212, 1209, 1225, 1231, 1265,
     1314, 1267, 1289,    0, 1304, 1334, 1340, 1351, 1356, 1352,
     1358, 1372, 1374, 1377,    0, 1397, 1397, 1398, 1414, 1436,
     1451, 1439, 1455, 1468, 1485, 1474, 1494, 1518, 1526, 1544,
     1558,    0, 1551, 1564, 1565, 1590, 1587, 1605, 1617, 1652,
        0, 1649, 1748, 1696, 1662, 1686, 1677, 1671, 1696, 1692,
     1726, 1786, 1742, 1765,    0,  145, 1812, 1820, 1833, 1834,
     1842, 1848, 1870, 1878, 1884, 1883, 1902, 1892, 1928, 1936,

     1937, 1938, 1966, 1972, 1990, 2000, 1991, 2008, 2025, 2026,
     2044, 2050, 2076, 2058, 2079, 2098, 2100, 2108, 2113, 2146,
     2132, 2158, 2161, 2164, 2186, 2196, 2214, 2224, 2232, 2238,
     2250, 2256, 2262, 2288, 2286, 2296, 2294, 2320, 2332, 2344,
     2345, 2346, 2358, 2370, 2394, 2380, 2404, 2402, 2412, 2438,
     2440, 2448, 2453, 2470, 2488, 2489, 2494, 2522, 2524, 2534,
     2539, 2558, 2572, 2573, 2563, 2598, 2611, 2608, 2637, 2649,
     2632, 2661, 2662, 2670, 2687, 2695, 2716, 2721, 2719, 2729,
     2761, 2769, 2774, 2775, 2803, 2815, 2828, 2813, 2847, 2837,
     2872, 2869, 2886, 2909, 2904, 2923, 1773, 1783, 1794, 1808,

     1818, 1827, 1844, 1841,    0, 1876,    0,    0,    0, 1878,
     1887, 1887,    0, 1901, 1912, 1929, 1939, 1936, 1965, 1986,
     1975, 1991, 2020, 2027,    0,    0, 2025, 2030, 2026, 2044,
     2070, 2086, 2087,    0, 2073, 2120,    0,    0, 2128, 2119,
        0, 2140,    0,    0, 2153, 2154, 2151, 2161, 2169, 2299,
        0, 2196,    0,    0,    0, 2189,    0, 2205,    0, 2221,
     2315, 2219, 2255,    0, 2274, 2275, 2291, 2297, 2346,    0,
     2359, 2364, 2353, 2370, 2381, 2402, 2410, 2411, 2436,    0,
     2454, 2452, 2472, 2481,    0,    0, 2482, 2490,    0, 2508,
     2543, 2541, 2564, 2582, 2614, 2617, 2618,    0, 2611,    0,

     2646,    0,    0, 2926, 2955, 2938, 2940, 2976, 2974, 2977,
     3009, 3011, 3026, 3028, 3043, 3060, 3061, 3062, 3097, 3094,
     3100, 3099, 3118, 3132, 3151, 3153, 3154, 3183, 3188, 3189,
     3217, 3202, 3207, 3239, 3241, 3242, 3256, 3295, 3296, 3274,
     3293, 3310, 3308, 3329, 3334, 3362, 3359, 3344, 3368, 3347,
     3380, 3383, 3392, 3398, 3420, 3422, 3446, 3434, 3464, 3452,
     3470, 3476, 3485, 3488, 3502, 3510, 3520, 3538, 3556, 3550,
     3544, 3568, 3574, 3596, 3598, 3604, 3606, 3644, 3646, 3652,
     3661, 3680, 3658, 3686, 3710, 3698, 3712, 3720, 3734, 3744,
     3752, 3749, 3766, 3774, 3798, 3800, 3810, 3824, 3822, 3836,

     3846, 3870, 3848, 3878, 3876, 3900, 3902, 3910, 3915, 3924,
        0,    0, 2630,    0, 2675,    0, 2677, 2670, 2687, 2691,
     2696, 2714, 2735,    0, 2736, 2735, 2746, 2759,    0, 2760,
     2762, 2774, 2787, 2793, 2784, 2803, 2817, 2857, 2868,    0,
        0, 2856, 2875,    0, 2883,    0, 2887,    0,    0, 2890,
     2920, 2907, 2954,    0,    0,    0,    0, 2964,    0, 2976,
     2976, 2975,    0,    0, 2992, 2980, 2985, 3000, 3008,    0,
     3018, 3048, 3051, 3036, 3053, 3072, 3070, 3072, 3087, 3120,
     3138,    0, 3135, 3149, 3164,    0, 3156, 3176, 3208,    0,
     3932, 3934, 3956, 3964, 3966, 3969, 3974, 4002, 4008, 4010,

     4023, 4032, 4020, 4056, 4058, 4064, 4073, 4082, 4088, 4090,
     4112, 4114, 4122, 4124, 4148, 4158, 4156, 4182, 4194, 4184,
     4206, 4208, 4220, 4218, 4232, 4242, 4256, 4264, 4266, 4281,
     4290, 4300, 4302, 4315, 4330, 4339, 4340, 4348, 4354, 4369,
     4390, 4384, 4378, 4402, 4403, 4428, 4438, 4436, 4453, 4462,
     4490, 4491, 4472, 4508, 4516, 4529, 4526, 4541, 4544, 4562,
     4574, 4579, 4580, 4604, 4592, 4598, 4628, 4637, 4650, 4616,
     3205,    0, 3217,    0, 3228, 3226,    0, 3250,    0, 3255,
     3277, 3265,    0, 3285,    0, 3348,    0,    0,    0, 3401,
        0, 3407, 3416,    0,    0,    0,    0,    0, 3423, 3455,

        0,    0, 3487, 3508,    0, 3503, 3528, 3514,    0, 3548,
     3564, 3578,    0,    0,    0, 3600,    0, 3618, 3624, 3624,
     3615,    0,    0,    0,    0, 3619, 3663, 4652, 4658, 4667,
     4682, 4688, 4696, 4691, 4721, 4720, 4726, 4756, 4759, 4758,
     4780, 4771, 4795, 4792, 4809, 4810, 4824, 4834, 4843, 4849,
     4846, 4858, 4868, 4882, 4883, 4904, 4907, 4912, 4921, 4933,
     4946, 4945, 4970, 4971, 4979, 4984, 4996, 5005, 5020, 5029,
     5035, 5037, 5038, 5050, 5075, 5087, 5088, 5074, 5100, 5124,
     5125, 5126, 5150, 5158,    0,    0,    0,    0,    0, 3676,
     3708,    0, 3709, 3700,    0,    0,    0,    0, 3730,    0,

     3737, 3758,    0,    0, 3745, 3757,    0,    0, 3755, 3774,
     3769, 3792,    0,    0, 5160, 5175, 5184, 5194, 5196, 5199,
     5213, 5208, 5234, 5247, 5248, 5249, 5266, 5283, 5284, 5298,
     5308, 5316, 5322, 5334, 5337, 5340, 5358, 5366, 5388, 5390,
     5376, 5400, 5402, 5412,    0, 3792,    0,    0, 3801,    0,
     3845,    0,    0, 3842, 3853, 3880,    0, 5426, 5436, 5434,
     5444, 5462, 5468, 5490, 5480, 5492, 5498, 5520, 5522, 5528,
     3886,    0, 3880,    0,    0, 3902, 5534, 5546, 5556, 5564,
     5574, 5582,    0,    0, 3909, 5596, 5604, 5606,    0, 5614,
     5710, 5679, 5684,  135, 5689, 5694, 5699, 5704

    } ;

static const flex_int16_t yy_def[1099] =
    {   0,
     1091,    1, 1092, 1092, 1091,    5, 1091, 1091, 1091, 1091,
     1091, 1093, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1091, 1095, 1091, 1096, 1096, 1091,
     1096, 1097, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1098, 1098,   62,   62,   62,   63,   63,   63,   65,   63,
       62,   62,   62,   63,   63,   63,   62,   62,   62,   63,
       65,   62,   62,   62, 1096, 1091, 1091, 1093, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1091, 1095, 1091, 1096,
     1096, 1096, 1097, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   65,   62,   65,   62,   62,   65,   65,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   65,   65,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   65,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62, 1096, 1091, 1091, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1096, 1096,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   75,   62,   62, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1094, 1094, 1094, 1094, 1094, 1094,   62,   62,   62,   62,
       62,   62, 1094, 1094, 1094,   62,   62,   62, 1094,   62,
        0, 1091, 1091, 1091, 1091, 1091, 1091, 1091

    } ;

static const flex_int16_t yy_nxt[5778] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   37,   44,   37,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   37,   44,   37,   45,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,

       81,   82,   83,   77,   84,   77,   48,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       77,   84,   77,   85,   86,   86,   86,   86,   89,   97,
       90,   92,   90,   93,   94,   98,  104,   99,  181,   86,
      105,  107,  136,  100,  386,  101,  137,  274,  108,  102,
      103,  176,   86,   86,  386,  109,  106,  111,  110,  186,
      126,  112,   98,  104,   99,  113,  127,  105,  107,  136,
      100,  114,  101,  137,  115,  108,  102,  103,  176,  116,
      275,  117,  109,  106,  111,  110,  118,  126,  112,  174,

      175,  119,  113,  127,  385,  138,  128,  274,  114,  139,
      184,  115,  185,   91,  129,  140,  116,  275,  117,  273,
      130,  187,  185,  118,  188,  189,  174,  175,  119,  120,
       86,   86,  138,  128,  144,  141,  139,  121,  276,  142,
      122,  129,  140,  123,  131,  143,  124,  130,  145,  125,
      132,  133,  134,  272,  146,  147,  120,  135,  191,  155,
      281,  144,  141,  156,  121,  276,  142,  122,  190,  157,
      123,  131,  143,  124,  152,  145,  125,  132,  133,  134,
      148,  146,  147,  186,  135,  153,  155,  281,  149,  180,
      156,  154,  150,   92,   90,  151,  157,  158,  169,  159,

      170,  152,  160,  171,  282,  172,  286,  148,  277,  161,
      162,  182,  153,  173,  179,  149,  278,  279,  154,  150,
      280,  177,  151,   96,  158,  169,  159,  170,   95,  160,
      171,  282,  172,  286,  192,  277,  161,  162,  163,  289,
      173,  192,  164,  278,  279,  165,  166,  280,  231,  304,
      232,  192,  167,  296,  192,  168,  181,   86,  297,  187,
      185,  192,   91,   87, 1091,  163,  289,   47,  192,  164,
      192,   47,  165,  166, 1091,  231,  304,  232,  192,  167,
      296,  192,  168,  180,  180,  297,  180,  180,  180,  180,
      180,  180,  233,  180,  180,  180,  234,  192,  287,  193,

      294,  194,  235,  305,  192,  288,  306,  195,  307,  196,
      295,  192,  192,  197,  198,  221,  302,  303,  192,  233,
      308,  222, 1091,  234, 1091,  287,  193,  294,  194,  235,
      305,  192,  288,  306,  195,  307,  196,  295,  192,  192,
      197,  198,  221,  302,  303,  192, 1091,  308,  222,  180,
      180,  180, 1091,  180,  180,  180,  180,  180,  180, 1091,
      180,  180,  180,  314,  236,  223,  315,  199,  237,  247,
      316,  200,  192,  224,  238,  317,  192,  318,  319,  225,
      248, 1091,  192,  192,  192, 1091,  249,  201,  320, 1091,
      314,  236,  223,  315,  199,  237,  247,  316,  200,  192,

      224,  238,  317,  192,  318,  319,  225,  248,  192,  192,
      192,  192,  192,  249,  201,  320,  180,  202,  271,  321,
      324,  192,  192,  250,  203,  192,  322,  251,  192,  323,
      325,  204,  326,  252,  205,  192, 1091,  327,  192,  192,
     1091,  192, 1091,  192,  202,  271,  321,  324,  192,  192,
      250,  203,  192,  322,  251,  192,  323,  325,  204,  326,
      252,  205, 1091,  267,  327,  192, 1091,  192,  192,  206,
      192,  268,  192,  207,  264,  332,  265,  208, 1091,  266,
      333,  283,  284,  209,  192,  192,  210,  192,  269,  270,
      267,  334,  335,  192,  192,  285,  206, 1091,  268,  192,

      207,  264,  332,  265,  208,  192,  266,  333,  283,  284,
      209,  192,  192,  210,  192,  269,  270, 1091,  334,  335,
      192,  192,  285,  328,  336,  192,  337,  341,  211,  342,
      212,  343,  192,  329,  344,  213,  345,  346,  330,  331,
      214,  192, 1091,  290,  291,  292, 1091,  293,  192, 1091,
      328,  336,  192,  337,  341,  211,  342,  212,  343, 1091,
      329,  344,  213,  345,  346,  330,  331,  214,  192,  215,
      290,  291,  292,  298,  293,  347,  192,  216,  299,  338,
      217,  339,  348,  218,  300,  349,  219,  350,  351,  220,
     1091,  301,  340, 1091,  352, 1091,  215, 1091, 1091, 1091,

      298,  357,  347,  192,  216,  299,  338,  217,  339,  348,
      218,  300,  349,  219,  350,  351,  220,  226,  301,  340,
      309,  352,  310,  227,  228,  229,  311,  353,  357,  355,
      230,  354,  358,  312,  356,  192, 1091,  313,  359,  363,
      364,  365, 1091, 1091,  226,  366,  369,  309,  370,  310,
      227,  228,  229,  311,  353, 1091,  355,  230,  354,  358,
      312,  356,  192,  239,  313,  359,  363,  364,  365,  360,
      192,  367,  366,  369,  371,  370,  374,  240,  361,  375,
      192, 1091,  368,  241,  242, 1091,  362,  376,  372,  377,
      239, 1091, 1091,  382,  378,  383,  360,  192,  367, 1091,

      379,  371, 1091,  374,  240,  361,  375,  192,  373,  368,
      241,  242,  192,  362,  376,  372,  377,  243,  380,  192,
      382,  378,  383,  384,  497,  244,  192,  379,  498,  245,
     1091,  381,  246, 1091,  499,  373, 1091,  192, 1091,  192,
      500,  192,  387,  192,  243,  380,  192,  192,  501,  502,
      384,  497,  244,  192, 1091,  498,  245,  192,  381,  246,
      253,  499,  254,  192,  192,  255,  192,  500,  192,  387,
      192,  503,  256,  257,  192,  501,  502,  504,  505,  509,
      510,  192,  192, 1091,  192,  192,  511,  253, 1091,  254,
      192, 1091,  255,  192,  512, 1091,  388, 1091,  503,  256,

      257,  192,  513, 1091,  504,  505,  509,  510,  192,  192,
      258,  514,  192,  511,  259,  192,  192,  260,  261,  192,
      192,  512,  389,  388,  262, 1091,  515,  263,  192,  513,
      390,  516,  517, 1091, 1091,  192,  192,  258,  514, 1091,
     1091,  259,  192,  192,  260,  261,  192,  192, 1091,  389,
      518,  262,  391,  515,  263,  392,  192,  390,  516,  517,
      192,  192,  192,  192,  394,  192,  192,  506,  521,  507,
      192,  522,  523,  399,  393,  192,  192,  518, 1091,  391,
      400,  192,  392,  192,  508,  192,  192,  192,  192, 1091,
     1091,  394,  192,  192,  506,  521,  507,  192,  522,  523,

      399,  393,  192,  192, 1091,  192,  524,  400,  192,  192,
     1091,  508,  192,  192,  192,  395,  396,  192,  192,  398,
     1091,  192,  525,  401,  526,  192, 1091,  192,  527,  397,
     1091,  192,  192,  524,  192,  528,  192,  192,  529, 1091,
      530,  192,  395,  396,  192,  192,  398,  192,  192,  525,
      401,  526,  192,  406,  192,  527,  397,  192,  192, 1091,
     1091,  192,  528,  407,  192,  529,  192,  530,  531,  532,
      192,  533,  534,  192,  192,  402,  403,  404,  535,  405,
      406,  408,  192, 1091,  192, 1091,  409,  192, 1091, 1091,
      407,  536,  537,  192,  538,  531,  532,  192,  533,  534,

      192, 1091,  402,  403,  404,  535,  405, 1091,  408,  192,
      192, 1091,  192,  409,  192,  410,  414,  415,  536,  537,
      411,  538,  192, 1091, 1091,  192,  412,  539,  192,  192,
      192,  192, 1091,  413,  192,  438, 1091,  192,  192,  192,
      417,  416,  410,  414,  415,  192, 1091,  411, 1091,  192,
      192,  192,  192,  412,  539,  192,  192,  192,  192,  192,
      413,  192,  438,  192, 1091,  192,  519,  417,  416, 1091,
      419,  192,  192,  418,  420,  192,  192,  192,  192,  192,
      192,  520,  540,  541,  192,  192,  192,  542,  192,  192,
      192,  192,  426,  519,  428,  543,  192,  419,  192, 1091,

      418,  420,  192,  192,  192,  192,  192,  192,  520,  540,
      541,  192,  192,  192,  542,  192,  192,  192,  192,  426,
      427,  428,  543,  192,  421,  192,  422, 1091,  544,  192,
      423,  192,  192,  192, 1091,  545,  546,  424,  429,  192,
      192,  425,  547,  192,  192,  192,  192,  427,  548,  430,
     1091,  421,  192,  422,  192,  544,  192,  423,  192,  192,
      192,  431,  545,  546,  424,  429,  192,  192,  425,  547,
      192,  192,  192,  192,  192,  548,  430,  432, 1091,  192,
     1091,  192,  549,  192, 1091,  192,  192,  192,  431,  433,
     1091,  192, 1091,  192,  192,  192, 1091,  192,  192,  192,

      552,  192,  436,  192,  432,  434,  192,  192,  435,  549,
      192,  192, 1091,  192,  192,  553,  433,  192,  192,  437,
      192,  192,  192,  192,  192, 1091,  192,  552,  439,  436,
      192,  550,  434, 1091,  192,  435,  554,  192,  192,  192,
      192,  551,  553,  445,  192,  192,  437,  444,  192, 1091,
      192,  555,  192, 1091, 1091,  439,  192,  192,  550,  192,
      192,  556, 1091,  554,  192,  440,  192,  557,  551,  558,
      445,  559,  192,  192,  444,  441,  446,  560,  555,  192,
      442,  443, 1091,  192,  192,  192,  192,  192,  556,  192,
      447,  192,  440,  192,  557,  192,  558,  448,  559,  449,

      192, 1091,  441,  446,  560,  561,  562,  442,  443,  192,
      563,  192,  192, 1091, 1091,  192,  192,  447,  192,  192,
      192,  564,  192, 1091,  448, 1091,  449,  565,  453,  566,
      192,  567,  561,  562,  192,  192,  192,  563,  192,  450,
      192,  451,  192,  192,  192,  456,  192,  192,  564,  454,
      192, 1091,  452,  568,  565,  453,  566,  192,  567, 1091,
      192,  192,  192,  192,  569,  570,  450,  192,  451,  192,
      192,  192,  456,  192,  192, 1091,  454,  192,  455,  452,
      568,  192,  192,  571, 1091,  192,  192,  192,  458,  192,
      192,  569,  570,  572, 1091,  459,  192,  457,  573,  192,

      192,  192,  192,  192, 1091,  455,  574,  192,  192,  192,
      571,  192,  192,  192,  575,  458,  192,  192,  460,  192,
      572,  192,  459, 1091,  457,  573,  192,  192,  192,  192,
      192,  461,  192,  574,  192,  192,  192,  192,  192,  192,
     1091,  575,  576,  577,  192,  460,  192,  192,  192,  464,
      462,  192,  192,  192,  192,  192, 1091,  192,  461,  192,
      463,  465,  192,  192,  192,  466,  192,  192, 1091,  576,
      577,  578, 1091,  192,  192,  579,  464,  462,  192,  192,
      192,  192,  192,  192,  192,  467,  580,  463,  465,  192,
      468,  469,  466,  192,  192,  192,  581,  582,  578,  192,

      192,  192,  579,  192,  471,  192,  470, 1091,  192,  192,
      192, 1091,  467,  580,  583,  584,  192,  468,  469,  192,
      192,  192,  192,  581,  582,  192,  192, 1091,  192,  192,
      192,  471,  192,  470,  192,  475,  192,  585,  192, 1091,
     1091,  583,  584,  586, 1091,  192,  192,  476,  192,  472,
      478,  192,  192,  192,  192,  192,  192,  192,  473,  477,
     1091,  192,  475,  192,  585,  192,  474,  192, 1091,  587,
      586,  192,  192,  192,  476,  588,  472,  478,  192, 1091,
      192,  192,  192,  192,  192,  473,  477,  192,  481,  593,
      192,  192,  192,  474,  192,  479,  587,  192,  192,  594,

      192,  192,  588,  595,  596,  482,  480,  192,  192,  192,
      192,  597, 1091,  192,  192,  481,  593,  192,  192,  192,
      483, 1091,  479,  591,  192,  592,  594,  598,  192,  192,
      595,  596,  482,  480,  192,  192,  192,  484,  597,  192,
      192,  192, 1091,  486,  192,  192,  487,  483,  488,  192,
      591,  192,  592,  192,  598,  489,  192,  485,  599,  192,
     1091,  192,  602, 1091,  484,  589,  192, 1091,  192,  192,
      486,  192,  192,  487,  590,  488,  192,  492,  192,  494,
      192,  192,  489,  192,  485,  599,  192,  192,  192,  602,
      493,  192,  589, 1091,  490,  603,  192,  192,  192,  192,

      491,  590, 1091,  711,  492,  192,  494,  192,  192,  192,
      192,  496,  600,  712,  192,  192,  601,  493,  192,  192,
      495,  490,  603, 1091,  192,  192,  192,  491, 1091,  192,
      711,  713,  192,  192,  192,  192,  192,  604,  496,  600,
      712,  192,  192,  601, 1091,  714,  192,  495,  715,  192,
      192,  605,  192,  716,  192,  192,  192,  192,  713,  192,
      192,  717,  192,  192,  604,  192,  606,  718,  192,  192,
      192,  192,  714, 1091, 1091,  715,  192,  192,  605,  192,
      716,  192,  192,  607,  192,  192,  192,  192,  717,  719,
      192,  192,  192,  606,  718,  192,  192,  192,  192,  192,

      192,  192, 1091,  720,  609,  192,  192,  192,  721,  192,
      607,  608,  192,  611,  192,  192,  719,  722,  192,  192,
      192,  192,  192,  192, 1091, 1091,  192,  192,  192,  192,
      720,  609,  192,  723,  192,  721,  192,  610,  608,  192,
      611, 1091,  192,  724,  722,  192,  192,  192,  192,  192,
      192,  613,  612,  614,  192,  192,  192,  192,  192,  192,
      723,  725, 1091,  726,  610,  192,  192,  616,  615,  727,
      724,  617,  192,  192,  192,  192,  192, 1091,  613,  612,
      614,  192,  192,  192,  192,  192,  192,  192,  725,  192,
      726,  618,  192,  192,  616,  615,  727,  728,  617,  729,

      192,  192,  192,  192,  619,  730,  731,  192,  192,  192,
      192,  192,  192,  621,  192, 1091,  192,  192,  618, 1091,
      192,  192,  622, 1091,  728,  623,  729,  620,  192,  192,
      192,  619,  730,  731,  192,  192,  192,  192,  192,  192,
      621,  732,  192,  192,  192,  192,  192,  192,  192,  622,
      624,  733,  623,  734,  620,  192,  192,  625,  735,  736,
     1091,  192,  192,  192,  192,  192, 1091,  626,  732,  192,
      192,  192,  192,  192,  192,  629,  737,  624,  733,  192,
      734,  192,  627,  738,  625,  735,  736,  192,  192,  192,
      192,  628,  192,  192,  626,  192,  192,  192,  192,  739,

      192, 1091,  629,  737,  740,  741,  192, 1091,  192,  627,
      738,  630,  631,  192,  192,  192,  192,  192,  628,  192,
      192,  192,  192,  192,  192,  633,  739,  192,  632,  192,
      192,  740,  741,  742,  192,  192, 1091,  192,  630,  631,
      192,  743,  192,  192,  192,  192,  192,  744,  192,  635,
      192, 1091,  633,  192, 1091,  632,  192,  192, 1091,  634,
      742,  192,  192,  192,  192, 1091,  745,  192,  743,  192,
      746, 1091,  192,  636,  744,  192,  635,  192,  192,  192,
      192,  192,  192,  192,  747,  192,  634,  748,  638, 1091,
      192,  749,  637,  745,  192,  192,  192,  746,  192,  750,

      636,  192,  192,  192, 1091,  192,  192,  192,  192,  192,
      192,  747,  192,  192,  748,  638,  639,  192,  749,  637,
      753,  754,  192,  192, 1091,  192,  750,  640,  192,  755,
      192,  641, 1091,  192,  192,  192, 1091,  642,  756,  759,
      192,  192, 1091,  639,  192,  192, 1091,  753,  754,  192,
      192,  192, 1091,  192,  640,  192,  755,  643,  641,  192,
      192,  192,  192,  644,  642,  756,  759,  192,  192,  192,
      646,  192,  192,  192,  645,  192,  192,  192,  192,  192,
      192, 1091,  192,  192,  643,  760,  192,  192,  192,  761,
      644, 1091,  762,  192,  192,  647,  192,  646,  192,  192,

      192,  645,  192,  192,  192,  192,  192,  649,  648,  192,
      192,  192,  760,  192,  192,  192,  761,  192,  751,  762,
      192,  763,  647,  192,  651,  192,  192,  764,  650,  752,
      192,  192,  192,  192,  649,  648,  192,  192,  192, 1091,
      192,  192,  192,  652,  192,  751,  757,  758,  763,  192,
      192,  651,  192,  192,  764,  650,  752,  192,  192,  653,
      192,  654,  655,  656,  192,  192,  192,  192,  192,  192,
      652,  765,  766,  757,  758,  657,  192,  767,  768,  192,
      192,  192,  192,  192,  192,  658,  653,  192,  654,  655,
      656,  192,  192,  192,  192,  192,  192,  192,  765,  766,

      769,  192,  657,  659,  767,  768,  192,  192,  192,  192,
      192,  192,  658,  770,  192,  192,  771,  192,  192,  662,
      660,  192,  192,  192,  192,  192, 1091,  769,  192,  192,
      659,  192, 1091,  663,  192,  772,  661,  773,  192,  192,
      770,  192,  192,  771,  192, 1091,  662,  660,  192,  192,
      192,  774,  192,  665,  664,  192,  192,  192,  192,  192,
      663,  192,  772,  661,  773,  192,  192,  666,  192,  192,
      192,  775,  667,  776,  192,  192,  192,  192,  774, 1091,
      665,  664,  192, 1091,  192,  192,  192,  192,  192,  777,
      192,  192,  192, 1091,  666, 1091,  192,  192,  775,  667,

      776,  192,  192,  668,  192,  192,  192,  192,  778,  192,
      192,  192,  192,  779,  192,  192,  777,  192,  192, 1091,
      669,  780,  670,  781, 1091,  192,  192, 1091, 1091, 1091,
      668,  192,  192,  192,  192,  778,  192,  192,  192,  192,
      779,  192,  192,  192, 1091,  192,  671,  669,  780,  670,
      781,  192,  192,  192,  672,  192,  674, 1091,  192,  192,
      192,  192, 1091, 1091, 1091,  673,  192, 1091,  192,  782,
      192,  192,  192,  671,  783,  675,  192,  784,  192,  192,
      192,  672,  192,  674,  192,  676,  192,  192,  192,  192,
      192,  678,  673,  192,  192,  192,  782, 1091,  192,  677,

      192,  783,  675,  192,  784, 1091,  192,  192, 1091,  192,
      192,  192,  676, 1091,  785,  192,  192,  192,  678,  192,
      192,  192,  192,  679,  680,  192,  677,  192,  192,  192,
     1091, 1091,  192,  786,  787,  192,  192,  192,  788, 1091,
      681,  785,  192, 1091,  789,  192,  192, 1091,  192,  684,
      679,  680,  192,  192,  192,  192,  192,  682,  192,  192,
      786,  787,  192,  790, 1091,  788,  192,  681,  871,  192,
      192,  789,  192,  683,  192,  192,  684, 1091,  192,  686,
      192,  192,  192,  192,  682,  192,  192,  192,  685, 1091,
      790,  192,  872,  192,  873,  871,  192,  192,  192,  192,

      683,  192,  874,  875,  192,  192,  686,  192,  192,  192,
      192, 1091,  192,  192,  192,  685,  192,  876,  192,  872,
     1091,  873,  687, 1091,  192,  192,  192,  688,  877,  874,
      875,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  878,  192,  192,  876,  690,  192,  691,  689,  687,
      192,  192,  879,  192,  688,  877,  192,  880,  192,  192,
      192,  692,  881,  192,  192,  192,  192,  192,  878,  192,
      882, 1091,  690,  192,  691,  689,  883,  192,  192,  879,
      192,  884,  192,  192,  880,  192,  694,  693,  692,  881,
      192,  192,  192,  192,  885,  192,  192,  882,  192, 1091,

      886,  695, 1091,  883,  887,  192,  192, 1091,  884,  192,
      888,  192,  192,  694,  693, 1091,  889,  192,  192,  192,
      696,  885,  192,  192,  192,  192,  701,  886,  695,  697,
      192,  887,  192,  192,  192,  890,  192,  888,  192,  192,
      192, 1091,  698,  889,  699,  192, 1091,  696,  891,  192,
      192,  192,  192,  701,  192,  700,  697,  192,  192,  192,
     1091,  192,  890,  192,  192,  192, 1091,  192,  192,  698,
      703,  699,  192,  702,  192,  891,  192,  192,  892,  192,
     1091,  192,  700,  893,  192,  192,  192,  704,  894,  192,
      192,  192,  192,  192, 1091,  192, 1091,  703, 1091,  895,

      702,  192,  896,  192,  705,  892,  192,  192, 1091,  192,
      893,  192, 1091,  192,  704,  894,  192,  192,  706,  897,
      192,  192,  898,  192,  709,  192,  895,  192, 1091,  896,
      192,  705, 1091,  192,  192,  707,  192,  899,  900,  708,
      192,  192,  192,  192,  192,  706,  897,  192,  192,  898,
      192,  709,  192,  710,  192,  192,  791,  192, 1091,  192,
      192,  192,  707,  192,  899,  900,  708,  192,  192,  192,
      192,  192,  192, 1091,  192,  793,  192,  794,  901, 1091,
      710,  902,  192,  791,  192,  792,  192,  192,  192,  903,
      192,  192,  192,  192,  797,  192,  904,  192,  192,  192,

      796, 1091,  793,  192,  794,  901,  795,  905,  902,  906,
      907,  192,  792,  192,  192,  908,  903,  909,  192,  192,
      192,  797,  192,  904,  192,  192,  192,  796,  192,  910,
      192,  911,  192,  795,  905,  798,  906,  907,  192,  799,
      192,  192,  908,  192,  909,  192,  192,  192,  192,  192,
     1091, 1091, 1091,  192, 1091,  192,  910,  192,  911,  192,
      192,  912,  798,  192,  192,  192,  799,  913,  914,  915,
      192, 1091,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  801, 1091,  916,  800,  192,  912, 1091,
      192,  192,  192, 1091,  913,  914,  915,  192,  192,  192,

     1091,  917,  918, 1091,  192,  192,  192,  192,  192,  192,
      801,  192,  916,  800,  192,  192,  192,  192,  192,  919,
      192,  192, 1091, 1091,  192,  192,  192,  802,  917,  918,
      804,  192,  803,  920,  192,  192,  192,  192,  192,  192,
     1091,  192,  192,  192,  192,  192,  919,  192,  192,  192,
      805,  921,  922,  192,  802,  192,  806,  804,  192,  803,
      920,  192,  192,  192,  192,  923,  192,  809,  192,  192,
      192,  192,  192, 1091,  192,  192,  192,  805,  921,  922,
      192,  924,  192,  806,  807,  808, 1091,  925,  192,  926,
      192,  192,  923, 1091,  809,  192,  192,  192,  192,  192,

      192,  192,  192,  811,  192,  192,  192, 1091,  924,  192,
      812,  807,  808,  810,  925,  192,  926,  192,  192,  192,
      192,  927,  985,  192,  192,  192,  192,  192,  192, 1091,
      811,  192,  192,  192,  192, 1091,  192,  812,  192,  192,
      810,  813, 1091,  986,  192,  987,  192,  192,  927,  985,
      192,  192,  192,  192,  192,  192,  192,  988,  192,  192,
      192,  192,  192,  192, 1091,  192,  192,  814,  813,  815,
      986,  192,  987,  192,  989,  816,  192,  192,  192,  192,
      990,  192, 1091,  192,  988,  192,  192,  192,  817,  192,
      192,  820,  991,  192,  814,  192,  815,  992, 1091,  993,

      192,  989,  816,  192,  192,  192,  192,  990,  818,  819,
      192,  192,  192,  192,  192,  817,  192,  192,  820,  991,
      192,  822,  192, 1091,  992,  192,  993,  192, 1091,  192,
      192,  192,  192,  192, 1091,  818,  819,  192,  192,  192,
      192,  192,  821,  192,  192,  192,  192,  192,  822, 1091,
      192,  192,  192, 1091,  192,  192,  192,  192,  192,  192,
      192,  192, 1091,  994,  192,  192,  192, 1091,  192,  821,
     1091,  192,  192,  192,  192,  823,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192, 1091,  824,  192,  192,
      994,  192,  192,  192,  825,  192,  192,  192,  192,  192,

      826,  192,  823,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  824,  192,  192,  192,  995,  192,
      192,  825,  827,  192,  192, 1091,  192,  826,  192,  192,
     1091,  192,  192,  996,  828,  192,  192,  192, 1091,  192,
      192,  192,  192,  192,  192,  995,  192,  192,  997,  827,
      829,  192,  830,  998, 1091,  192,  192,  192, 1091,  192,
      996,  828,  192,  192,  192,  831,  192,  192,  192,  192,
      192,  192,  999,  192, 1091,  997,  832,  829,  192,  830,
      998,  192,  192,  192,  192,  192,  192,  192,  833,  192,
      192,  192,  831,  192,  192, 1091,  192,  192,  192,  999,

      192,  192,  192,  832, 1091,  192,  192,  192,  192,  192,
      192, 1000,  192,  192,  192,  833,  192,  834,  192,  192,
      192, 1001,  192,  192,  192,  192,  835,  192,  192,  192,
     1091,  192,  192,  192,  192, 1002,  192,  836, 1000,  192,
      192,  192, 1091, 1091,  834, 1003,  192,  192, 1001,  192,
      192, 1004,  192,  835,  192,  192, 1091,  192,  192,  192,
     1091,  192, 1002, 1005,  836,  192,  192,  192,  192,  837,
      838,  192, 1003,  192,  192,  192,  839,  192, 1004, 1006,
      840,  192,  192,  841,  192,  192,  192,  192,  192,  192,
     1005,  842,  192,  192,  192,  192,  837,  838,  192, 1091,

      192, 1091,  192,  839,  192,  192, 1006,  840,  192, 1007,
      841,  192,  192,  192,  192,  192,  192,  192,  842,  192,
      192,  192,  192,  192, 1008,  192,  843,  192,  844,  845,
     1091, 1009,  192,  192, 1091,  192, 1007, 1010,  192, 1011,
      192,  192,  192,  192,  192, 1091,  192, 1012,  192, 1013,
      192, 1008,  192,  843,  192,  844,  845,  846, 1009,  847,
      192,  192,  192,  192, 1010,  192, 1011,  192,  192,  192,
      192, 1091,  851,  192, 1012,  192, 1013,  848,  192,  192,
     1091,  192,  192,  192,  846, 1091,  847, 1014,  192,  192,
      192,  849,  192, 1045,  192,  192,  192,  192,  192,  851,

      192,  192,  192,  192,  848,  192,  192,  192,  192,  192,
      192,  852,  850,  854, 1014,  192,  192,  192,  849,  192,
     1045, 1046,  192,  192,  192,  192, 1047,  192,  192,  192,
      192,  192, 1048,  192,  192,  192,  853,  855,  852,  850,
      854,  192,  192, 1091,  192, 1049,  192,  192, 1046,  192,
      192,  192, 1091, 1047,  192,  856,  192,  192,  192, 1048,
      192,  857,  192,  853,  855,  192,  192, 1050,  192,  192,
      192,  192, 1049,  192,  192, 1051,  192, 1052,  192,  858,
     1053,  192,  856,  192,  192, 1054,  192,  192,  857,  192,
     1091,  192,  192,  192, 1050,  192,  192,  192,  192, 1055,

      192, 1056, 1051,  192, 1052,  859,  858, 1053,  192, 1057,
      192,  192, 1054,  192,  192,  192,  192,  192,  192,  192,
     1091,  192,  192, 1091, 1071,  861, 1055,  192, 1056,  860,
      192,  192,  859, 1072, 1091,  192, 1057,  192,  192,  192,
     1091,  192,  192,  192,  192,  192,  192,  192,  192,  864,
      862, 1071,  861,  192,  192,  863,  860,  192,  192,  192,
     1072,  192,  192,  192,  192,  867,  192,  192,  192,  192,
      192, 1091,  192,  192,  192, 1073,  864,  862,  865, 1074,
      192, 1075,  863,  192,  192,  192,  192,  192,  192,  866,
      192,  192,  867,  192,  192,  192,  192,  192,  868,  192,

      192, 1076, 1073, 1083, 1091,  865, 1074,  192, 1075, 1091,
      192, 1084,  192,  192,  192,  192,  866,  192,  192,  192,
      192,  192,  192,  192,  192,  868,  192,  870, 1076, 1085,
     1083,  192,  192,  869,  192, 1089,  192,  192, 1084,  192,
      192,  192,  192, 1091,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  870,  192, 1085, 1091,  192,  192,
      869,  192, 1089,  192,  192, 1091,  192, 1091,  192,  192,
     1091,  192,  192,  192,  192, 1091,  192,  192,  192,  192,
      192,  192,  192,  929, 1091,  192,  192,  192,  192, 1091,
      192,  930, 1091,  192,  928,  192,  192, 1091,  192, 1091,

      192,  192, 1091,  192,  192, 1091,  192, 1091,  192, 1091,
      929,  192,  192,  192,  192, 1091, 1091,  192,  930,  192,
      192,  928,  192,  192,  932,  192, 1091,  192,  192,  192,
      192,  192, 1091,  192,  931, 1091,  933,  936,  192,  192,
      192,  192, 1091, 1091,  192,  192,  192,  192, 1091,  192,
      192,  932,  192,  192,  192,  934,  192,  192,  192,  935,
      192,  931, 1091,  933,  936, 1091,  192,  192,  192,  192,
     1091,  192,  192,  192,  192,  192,  192,  192, 1091,  937,
      192,  192,  934, 1091,  192,  192,  935,  192, 1091, 1091,
      192,  938, 1091,  192,  192,  192,  192,  939, 1091,  940,

      192,  192,  192,  192,  192,  192,  937,  192,  192,  192,
      192,  941,  192, 1091, 1091, 1091, 1091,  192,  938,  192,
      192,  192,  192, 1091,  939,  192,  940,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  941,  944,
      943,  945, 1091,  192,  942,  192,  192, 1091, 1091,  192,
     1091,  192,  192, 1091,  192, 1091,  192, 1091,  192,  192,
      192,  192,  192, 1091, 1091,  192,  944,  943,  945,  192,
      192,  942,  192,  192, 1091,  192,  192,  192,  192,  192,
      946, 1091, 1091, 1091, 1091,  192,  192,  948,  192, 1091,
      947, 1091,  192,  192, 1091,  192,  192, 1091, 1091,  192,

      192,  192,  192,  949,  192,  192,  192,  946, 1091,  950,
     1091,  192,  192, 1091,  948,  192, 1091,  947, 1091,  192,
      192,  192,  192,  192, 1091,  192,  192,  192,  192,  192,
      949,  192,  192, 1091, 1091,  192,  950,  192,  192,  192,
      951,  192,  192,  192,  952,  192,  192, 1091,  192,  192,
      192,  953,  192,  192,  192,  192,  192,  192,  192,  192,
     1091, 1091,  192,  192,  192, 1091,  192,  951,  192,  192,
      192,  952,  192,  192, 1091, 1091,  192,  192,  953,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  954, 1091,
      192, 1091, 1091,  192, 1091, 1091,  192, 1091,  192, 1091,

      192,  192,  192,  192,  192, 1091,  192,  956,  192, 1091,
      192,  192,  192,  955,  192,  954, 1091,  192,  192,  192,
      192,  192, 1091,  192, 1091,  192,  958,  192,  192,  192,
      192,  957,  192, 1091,  956, 1091,  192,  192,  192,  192,
      955, 1091, 1091, 1091,  192,  192,  192,  192,  192, 1091,
      192,  192,  192,  958,  192, 1091,  192,  192,  957,  192,
      192,  192, 1091,  192,  192,  959,  192,  192, 1091,  192,
     1091,  192, 1091, 1091,  192,  192,  192,  192,  192,  192,
     1091, 1091,  960,  192,  192,  192,  192,  192,  192, 1091,
      192,  192,  959, 1091,  192,  192,  192, 1091,  192,  192,

     1091,  192,  192,  192,  192,  192,  192,  192, 1091,  960,
      961,  192,  192,  192, 1091,  192,  962,  192,  192,  192,
      963,  192,  192,  192,  192, 1091,  192,  192,  192, 1091,
     1091, 1091,  192,  192,  192, 1091, 1091,  961,  192,  192,
      192, 1091,  192,  962, 1091,  192,  192,  963,  192,  192,
      192,  192, 1091,  966,  192,  192, 1091,  192,  964,  192,
     1091, 1091, 1091, 1091, 1091,  192,  192,  192,  965, 1091,
      192, 1091,  192,  192,  967,  192,  192, 1091, 1091,  192,
      966, 1091,  192,  192,  192,  964,  192, 1091,  970,  192,
      192, 1091,  192,  192, 1091,  965, 1091,  192, 1091,  192,

      192,  967,  192,  968,  969, 1091,  192,  192,  192,  192,
      192,  192,  192, 1091, 1091,  970,  192,  192, 1091, 1091,
      192, 1091, 1091, 1091, 1091,  192,  192,  192,  192,  192,
      968,  969,  972,  192,  192,  192,  192,  192,  192,  192,
      971, 1091,  973,  192, 1091,  192,  192,  192, 1091, 1091,
      192, 1091,  192,  192,  192,  192,  192,  974,  192,  972,
      192,  192,  192,  192,  192,  192,  192,  971, 1091,  973,
      192,  975,  192,  192,  192,  977,  976,  192,  192,  192,
      192,  192, 1091,  192,  974,  192, 1091,  978,  192,  192,
      192,  192,  192,  192, 1091,  192,  192,  979,  975,  192,

      192,  192,  977,  976, 1091,  192,  192, 1091,  192,  981,
      192,  192, 1091,  192,  978,  192,  192,  192,  192,  192,
      980,  192,  192,  192,  979,  192,  192,  192,  192,  192,
     1091, 1091, 1091,  192, 1091,  192,  981,  192,  192, 1091,
      192,  192,  192,  192,  192,  192,  192,  980,  192,  192,
      983, 1091,  192,  192,  192, 1091,  192, 1091,  192,  982,
      192, 1091,  192,  984,  192,  192, 1091,  192,  192, 1015,
     1091,  192,  192,  192,  192,  192,  192,  983, 1091,  192,
      192,  192, 1091, 1091,  192,  192,  982,  192,  192,  192,
      984, 1091,  192, 1016,  192,  192, 1015, 1091,  192,  192,

      192,  192,  192,  192,  192, 1017,  192, 1091,  192,  192,
     1091,  192,  192,  192,  192,  192,  192,  192, 1091,  192,
     1016, 1091,  192, 1091, 1091,  192,  192, 1018,  192, 1091,
      192,  192, 1017,  192, 1091,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192, 1019,  192,  192, 1091, 1091,
     1091, 1020,  192, 1091, 1018,  192, 1091,  192,  192, 1091,
      192, 1091, 1091,  192,  192,  192, 1091, 1091,  192,  192,
      192, 1021, 1019,  192,  192,  192,  192,  192, 1020,  192,
      192, 1091, 1091, 1091,  192,  192, 1091, 1091,  192, 1091,
      192, 1022,  192,  192, 1023,  192,  192,  192, 1021, 1091,

      192,  192,  192,  192,  192, 1091,  192,  192,  192,  192,
     1024, 1091,  192,  192, 1091,  192,  192,  192, 1022,  192,
      192, 1023,  192,  192,  192, 1091,  192,  192,  192,  192,
      192,  192,  192, 1091, 1091,  192,  192, 1024, 1091,  192,
      192, 1025, 1091,  192,  192,  192,  192,  192, 1091, 1091,
     1091,  192, 1091,  192,  192,  192,  192,  192,  192,  192,
      192,  192, 1091,  192,  192, 1091,  192,  192, 1025, 1026,
      192,  192,  192,  192,  192,  192, 1091, 1091,  192,  192,
      192, 1027,  192,  192, 1091,  192,  192,  192,  192,  192,
      192,  192, 1091,  192,  192,  192, 1026,  192,  192,  192,

      192, 1091,  192,  192,  192,  192,  192,  192, 1027, 1091,
      192, 1091,  192,  192, 1091, 1091,  192, 1091, 1091,  192,
      192,  192,  192, 1091, 1029,  192,  192,  192,  192,  192,
      192,  192,  192,  192, 1028, 1091, 1091, 1091,  192, 1091,
     1091,  192,  192, 1091,  192, 1091,  192,  192,  192,  192,
      192, 1029,  192, 1091,  192,  192,  192, 1030,  192, 1031,
      192, 1028,  192,  192, 1091,  192,  192,  192,  192,  192,
      192,  192, 1091, 1091, 1091, 1091,  192,  192, 1091, 1091,
     1091,  192,  192,  192, 1030,  192, 1031,  192, 1033,  192,
      192,  192,  192,  192,  192, 1091,  192,  192, 1091, 1091,

      192,  192, 1032, 1091, 1091,  192, 1091,  192,  192,  192,
      192, 1035, 1091,  192,  192, 1033, 1034,  192,  192,  192,
     1036,  192,  192,  192, 1091, 1091,  192,  192,  192, 1032,
     1091, 1091,  192,  192,  192,  192, 1091,  192, 1035, 1091,
      192,  192,  192, 1034,  192, 1091,  192, 1036,  192,  192,
      192, 1037,  192,  192,  192,  192,  192,  192,  192,  192,
      192, 1091, 1038, 1091,  192, 1091,  192,  192,  192,  192,
     1091,  192,  192,  192,  192,  192, 1091,  192, 1037,  192,
     1091,  192,  192,  192,  192,  192,  192,  192, 1039, 1038,
     1091,  192,  192,  192,  192,  192,  192, 1091,  192,  192,

     1040,  192,  192, 1041,  192,  192, 1042, 1091,  192,  192,
     1091,  192,  192, 1091,  192, 1039, 1091,  192,  192,  192,
     1091,  192,  192,  192,  192,  192, 1091, 1040, 1091, 1091,
     1041,  192,  192, 1042, 1091,  192,  192,  192,  192,  192,
     1091,  192,  192,  192,  192,  192,  192,  192,  192, 1091,
     1091,  192,  192, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091,  192,  192,  192,  192, 1091, 1091,  192,  192,  192,
      192,  192,  192,  192,  192,  192, 1091,  192, 1091,  192,
     1043,  192, 1044, 1091, 1091, 1091, 1091,  192,  192,  192,
      192, 1091,  192, 1091,  192,  192,  192,  192,  192, 1091,

     1091,  192,  192, 1091,  192,  192,  192, 1043,  192, 1044,
     1091,  192,  192,  192,  192,  192, 1058,  192, 1091,  192,
      192,  192,  192,  192,  192,  192, 1059, 1091,  192,  192,
      192,  192,  192,  192,  192, 1091,  192, 1091,  192,  192,
      192, 1091,  192, 1058,  192,  192, 1091,  192,  192, 1091,
      192, 1060,  192, 1059, 1091,  192,  192,  192,  192, 1091,
      192,  192, 1091,  192,  192,  192,  192, 1091,  192,  192,
      192,  192,  192, 1091, 1091, 1091, 1091,  192, 1060, 1061,
     1091, 1091,  192,  192,  192,  192,  192,  192, 1091, 1091,
     1091,  192,  192,  192, 1091,  192,  192,  192,  192, 1062,

      192,  192, 1091,  192,  192,  192, 1061, 1091, 1091, 1091,
      192,  192,  192,  192,  192,  192, 1091, 1091, 1091,  192,
      192,  192, 1091, 1091, 1091,  192, 1062,  192,  192,  192,
      192,  192,  192, 1064, 1091,  192, 1091,  192, 1063,  192,
     1091, 1091,  192,  192, 1091,  192,  192,  192,  192, 1091,
     1091,  192,  192,  192,  192,  192,  192,  192,  192,  192,
     1064,  192,  192, 1066,  192, 1063,  192, 1091, 1091, 1065,
      192,  192,  192, 1091,  192,  192, 1091,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192, 1091,
     1066, 1091, 1091,  192, 1091,  192, 1065,  192,  192, 1091,

     1091,  192,  192,  192,  192,  192,  192,  192, 1069,  192,
      192,  192, 1091,  192,  192, 1068, 1091, 1070, 1067,  192,
      192,  192,  192,  192,  192,  192, 1091,  192, 1091,  192,
      192, 1091,  192,  192,  192, 1069,  192,  192,  192,  192,
      192, 1091, 1068,  192, 1070, 1067,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192, 1091, 1091,
      192,  192, 1091,  192,  192,  192,  192, 1091, 1077, 1091,
      192,  192, 1091,  192,  192, 1091,  192, 1091,  192,  192,
      192,  192,  192,  192,  192,  192, 1091, 1091,  192,  192,
      192, 1091,  192, 1091, 1078, 1077, 1091,  192,  192,  192,

      192,  192, 1091, 1091, 1091,  192,  192,  192,  192,  192,
      192,  192,  192,  192, 1091,  192,  192,  192, 1091,  192,
     1079, 1078, 1091, 1091,  192, 1091,  192,  192,  192,  192,
     1091, 1091,  192, 1091,  192, 1080,  192,  192,  192,  192,
      192,  192,  192, 1082,  192,  192,  192, 1079, 1081,  192,
     1091, 1086, 1091, 1091,  192,  192,  192,  192, 1091,  192,
     1091, 1091, 1080,  192,  192,  192,  192,  192,  192, 1091,
     1082,  192,  192,  192, 1091, 1081,  192,  192, 1086, 1091,
     1091,  192,  192,  192,  192,  192,  192, 1087, 1091, 1091,
      192,  192,  192,  192,  192,  192, 1091, 1091,  192,  192,

      192,  192, 1091,  192,  192, 1091, 1091, 1091,  192, 1088,
      192,  192,  192,  192, 1087, 1091, 1091,  192,  192,  192,
      192,  192,  192,  192, 1091,  192,  192,  192,  192, 1091,
      192,  192, 1090,  192, 1091,  192, 1088, 1091,  192, 1091,
      192,  192, 1091,  192,  192, 1091,  192, 1091,  192, 1091,
      192,  192,  192, 1091,  192, 1091, 1091, 1091,  192, 1090,
      192, 1091,  192, 1091, 1091, 1091, 1091, 1091,  192, 1091,
      192, 1091, 1091, 1091, 1091, 1091, 1091, 1091,  192,   46,
       46,   46,   46,   46,   88, 1091, 1091,   88,   88,  178,
      178,  178, 1091,  178,  180, 1091,  180,  180,  180,  183,

     1091,  183,  183,  183,  192, 1091,  192,  192,  192,    7,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091
    } ;

static const flex_int16_t yy_chk[5778] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   15, 1094,
       15,   17,   17,   18,   18,   21,   22,   21,   49,   49,
       22,   23,   30,   21,  386,   21,   31,  274,   23,   21,
       21,   44,   50,   50,  187,   23,   22,   24,   23,  186,
       27,   24,   21,   22,   21,   24,   27,   22,   23,   30,
       21,   24,   21,   31,   24,   23,   21,   21,   44,   25,
       98,   25,   23,   22,   24,   23,   25,   27,   24,   43,

       43,   25,   24,   27,  183,   32,   28,   92,   24,   32,
       55,   24,   55,   91,   28,   32,   25,   98,   25,   88,
       28,   57,   57,   25,   58,   58,   43,   43,   25,   26,
       86,   86,   32,   28,   34,   33,   32,   26,   99,   33,
       26,   28,   32,   26,   29,   33,   26,   28,   34,   26,
       29,   29,   29,   85,   34,   34,   26,   29,   60,   38,
      102,   34,   33,   38,   26,   99,   33,   26,   59,   38,
       26,   29,   33,   26,   36,   34,   26,   29,   29,   29,
       35,   34,   34,   56,   29,   36,   38,  102,   35,   52,
       38,   36,   35,   90,   90,   35,   38,   39,   41,   39,

       41,   36,   39,   41,  103,   42,  105,   35,  100,   39,
       39,   51,   36,   42,   47,   35,  100,  101,   36,   35,
      101,   45,   35,   20,   39,   41,   39,   41,   19,   39,
       41,  103,   42,  105,   70,  100,   39,   39,   40,  108,
       42,   70,   40,  100,  101,   40,   40,  101,   70,  114,
       71,   70,   40,  111,   71,   40,  181,  181,  111,  185,
      185,   70,   16,   11,    7,   40,  108,    4,   70,   40,
       71,    3,   40,   40,    0,   70,  114,   71,   70,   40,
      111,   71,   40,   61,   61,  111,   61,   61,   61,   61,
       61,   61,   72,   61,   61,   61,   72,   71,  107,   61,

      110,   61,   72,  115,   67,  107,  116,   61,  117,   61,
      110,   67,   72,   61,   61,   67,  113,  113,   67,   72,
      118,   67,    0,   72,    0,  107,   61,  110,   61,   72,
      115,   67,  107,  116,   61,  117,   61,  110,   67,   72,
       61,   61,   67,  113,  113,   67,    0,  118,   67,   61,
       62,   62,    0,   62,   62,   62,   62,   62,   62,    0,
       62,   62,   62,  120,   73,   68,  121,   62,   73,   76,
      122,   62,   68,   68,   73,  123,   76,  124,  125,   68,
       76,    0,   68,   76,   73,    0,   76,   62,  126,    0,
      120,   73,   68,  121,   62,   73,   76,  122,   62,   68,

       68,   73,  123,   76,  124,  125,   68,   76,   77,   68,
       76,   73,   77,   76,   62,  126,   62,   63,   84,  127,
      129,   63,   84,   78,   63,   63,  128,   78,   77,  128,
      130,   63,  132,   78,   63,   77,    0,  133,   84,   77,
        0,   63,    0,   78,   63,   84,  127,  129,   63,   84,
       78,   63,   63,  128,   78,   77,  128,  130,   63,  132,
       78,   63,    0,   82,  133,   84,    0,   82,   63,   64,
       78,   82,   81,   64,   81,  135,   81,   64,    0,   81,
      136,  104,  104,   64,   81,   83,   64,   82,   83,   83,
       82,  137,  138,   64,   82,  104,   64,    0,   82,   81,

       64,   81,  135,   81,   64,   83,   81,  136,  104,  104,
       64,   81,   83,   64,   82,   83,   83,    0,  137,  138,
       64,   65,  104,  134,  139,   65,  139,  141,   65,  142,
       65,  143,   83,  134,  144,   65,  145,  146,  134,  134,
       65,   65,    0,  109,  109,  109,    0,  109,   65,    0,
      134,  139,   65,  139,  141,   65,  142,   65,  143,    0,
      134,  144,   65,  145,  146,  134,  134,   65,   65,   66,
      109,  109,  109,  112,  109,  147,   66,   66,  112,  140,
       66,  140,  148,   66,  112,  150,   66,  151,  152,   66,
        0,  112,  140,    0,  153,    0,   66,    0,    0,    0,

      112,  156,  147,   66,   66,  112,  140,   66,  140,  148,
       66,  112,  150,   66,  151,  152,   66,   69,  112,  140,
      119,  153,  119,   69,   69,   69,  119,  154,  156,  155,
       69,  154,  157,  119,  155,   69,    0,  119,  158,  160,
      161,  162,    0,    0,   69,  163,  165,  119,  166,  119,
       69,   69,   69,  119,  154,    0,  155,   69,  154,  157,
      119,  155,   69,   74,  119,  158,  160,  161,  162,  159,
       74,  164,  163,  165,  167,  166,  169,   74,  159,  169,
       74,    0,  164,   74,   74,    0,  159,  170,  168,  171,
       74,    0,    0,  174,  172,  175,  159,   74,  164,    0,

      172,  167,    0,  169,   74,  159,  169,   74,  168,  164,
       74,   74,   75,  159,  170,  168,  171,   75,  173,   75,
      174,  172,  175,  176,  276,   75,   75,  172,  278,   75,
        0,  173,   75,    0,  279,  168,    0,  192,    0,   75,
      281,  192,  193,  193,   75,  173,   75,  193,  283,  284,
      176,  276,   75,   75,    0,  278,   75,  192,  173,   75,
       79,  279,   79,  193,  192,   79,   79,  281,  192,  193,
      193,  285,   79,   79,  193,  283,  284,  286,  287,  289,
      290,  194,   79,    0,  192,  194,  291,   79,    0,   79,
      193,    0,   79,   79,  292,    0,  194,    0,  285,   79,

       79,  194,  293,    0,  286,  287,  289,  290,  194,   79,
       80,  294,  194,  291,   80,  195,  201,   80,   80,  195,
      201,  292,  195,  194,   80,    0,  295,   80,  194,  293,
      195,  296,  298,    0,    0,  195,  201,   80,  294,    0,
        0,   80,  195,  201,   80,   80,  195,  201,    0,  195,
      299,   80,  196,  295,   80,  196,  196,  195,  296,  298,
      196,  197,  195,  201,  198,  197,  198,  288,  301,  288,
      198,  302,  303,  202,  197,  202,  196,  299,    0,  196,
      202,  197,  196,  196,  288,  202,  198,  196,  197,    0,
        0,  198,  197,  198,  288,  301,  288,  198,  302,  303,

      202,  197,  202,  196,    0,  226,  304,  202,  197,  226,
        0,  288,  202,  198,  199,  199,  199,  200,  199,  200,
        0,  200,  305,  203,  306,  226,    0,  203,  308,  199,
        0,  203,  226,  304,  199,  309,  226,  200,  310,    0,
      311,  199,  199,  199,  200,  199,  200,  203,  200,  305,
      203,  306,  226,  205,  203,  308,  199,  205,  203,    0,
        0,  199,  309,  205,  200,  310,  206,  311,  312,  313,
      206,  314,  315,  205,  203,  204,  204,  204,  316,  204,
      205,  206,  204,    0,  205,    0,  206,  204,    0,    0,
      205,  317,  318,  206,  319,  312,  313,  206,  314,  315,

      205,    0,  204,  204,  204,  316,  204,    0,  206,  204,
      208,    0,  208,  206,  204,  207,  208,  208,  317,  318,
      207,  319,  208,    0,    0,  209,  207,  320,  207,  209,
      210,  227,    0,  207,  210,  227,    0,  208,  207,  208,
      210,  209,  207,  208,  208,  209,    0,  207,    0,  208,
      210,  227,  209,  207,  320,  207,  209,  210,  227,  211,
      207,  210,  227,  211,    0,  207,  300,  210,  209,    0,
      212,  212,  209,  211,  213,  212,  213,  210,  227,  211,
      213,  300,  321,  322,  217,  215,  211,  323,  217,  215,
      211,  212,  215,  300,  217,  324,  213,  212,  212,    0,

      211,  213,  212,  213,  217,  215,  211,  213,  300,  321,
      322,  217,  215,  216,  323,  217,  215,  216,  212,  215,
      216,  217,  324,  213,  214,  218,  214,    0,  325,  218,
      214,  217,  215,  216,    0,  326,  327,  214,  218,  219,
      216,  214,  328,  219,  216,  218,  214,  216,  329,  219,
        0,  214,  218,  214,  220,  325,  218,  214,  220,  219,
      216,  220,  326,  327,  214,  218,  219,  221,  214,  328,
      219,  221,  218,  214,  220,  329,  219,  221,    0,  222,
        0,  220,  330,  222,    0,  220,  219,  221,  220,  222,
        0,  223,    0,  224,  221,  223,    0,  224,  221,  222,

      332,  220,  224,  225,  221,  223,  222,  225,  223,  330,
      222,  223,    0,  224,  221,  333,  222,  228,  223,  225,
      224,  228,  223,  225,  224,    0,  222,  332,  228,  224,
      225,  331,  223,    0,  225,  223,  335,  228,  223,  231,
      224,  331,  333,  231,  228,  230,  225,  230,  228,    0,
      225,  336,  230,    0,    0,  228,  232,  230,  331,  231,
      232,  337,    0,  335,  228,  229,  231,  338,  331,  339,
      231,  340,  230,  229,  230,  229,  232,  341,  336,  230,
      229,  229,    0,  232,  230,  229,  231,  232,  337,  233,
      233,  234,  229,  233,  338,  234,  339,  234,  340,  234,

      229,    0,  229,  232,  341,  342,  343,  229,  229,  233,
      344,  234,  229,    0,    0,  236,  233,  233,  234,  236,
      233,  346,  234,    0,  234,    0,  234,  347,  236,  348,
      239,  349,  342,  343,  239,  236,  233,  344,  234,  235,
      237,  235,  236,  235,  237,  239,  236,  235,  346,  237,
      239,    0,  235,  350,  347,  236,  348,  239,  349,    0,
      237,  239,  236,  235,  351,  352,  235,  237,  235,  238,
      235,  237,  239,  238,  235,    0,  237,  239,  238,  235,
      350,  241,  240,  353,    0,  241,  240,  237,  241,  238,
      235,  351,  352,  354,    0,  242,  238,  240,  355,  242,

      238,  241,  240,  242,    0,  238,  356,  244,  241,  240,
      353,  244,  241,  240,  357,  241,  238,  243,  243,  242,
      354,  243,  242,    0,  240,  355,  242,  244,  241,  240,
      242,  245,  245,  356,  244,  246,  245,  243,  244,  246,
        0,  357,  358,  359,  243,  243,  242,  247,  243,  248,
      246,  247,  245,  248,  244,  246,    0,  248,  245,  245,
      247,  249,  246,  245,  243,  249,  246,  247,    0,  358,
      359,  360,    0,  248,  247,  361,  248,  246,  247,  245,
      248,  249,  246,  250,  248,  250,  363,  247,  249,  251,
      250,  251,  249,  251,  247,  250,  364,  365,  360,  252,

      248,  253,  361,  252,  253,  253,  252,    0,  249,  251,
      250,    0,  250,  363,  366,  367,  251,  250,  251,  252,
      251,  253,  250,  364,  365,  255,  252,    0,  253,  255,
      252,  253,  253,  252,  256,  255,  251,  368,  256,    0,
        0,  366,  367,  369,    0,  255,  252,  256,  253,  254,
      258,  254,  255,  258,  256,  254,  255,  258,  254,  257,
        0,  256,  255,  257,  368,  256,  254,  257,    0,  370,
      369,  254,  255,  258,  256,  372,  254,  258,  254,    0,
      258,  256,  254,  257,  258,  254,  257,  259,  260,  375,
      257,  259,  260,  254,  257,  259,  370,  261,  254,  376,

      258,  261,  372,  377,  378,  261,  259,  259,  260,  262,
      257,  379,    0,  262,  259,  260,  375,  261,  259,  260,
      262,    0,  259,  374,  261,  374,  376,  380,  261,  262,
      377,  378,  261,  259,  259,  260,  262,  263,  379,  264,
      262,  263,    0,  264,  261,  263,  264,  262,  265,  265,
      374,  266,  374,  265,  380,  266,  262,  263,  381,  264,
        0,  263,  383,    0,  263,  373,  264,    0,  263,  265,
      264,  266,  263,  264,  373,  265,  265,  268,  266,  269,
      265,  268,  266,  269,  263,  381,  264,  267,  263,  383,
      268,  267,  373,    0,  267,  384,  265,  268,  266,  269,

      267,  373,    0,  497,  268,  270,  269,  267,  268,  270,
      269,  271,  382,  498,  267,  271,  382,  268,  267,  271,
      270,  267,  384,    0,  268,  270,  269,  267,    0,  387,
      497,  499,  270,  387,  267,  271,  270,  388,  271,  382,
      498,  388,  271,  382,    0,  500,  271,  270,  501,  387,
      389,  390,  270,  502,  389,  390,  387,  388,  499,  391,
      387,  503,  271,  391,  388,  392,  391,  504,  388,  392,
      389,  390,  500,    0,    0,  501,  387,  389,  390,  391,
      502,  389,  390,  393,  388,  392,  391,  393,  503,  506,
      391,  393,  392,  391,  504,  394,  392,  389,  390,  394,

      396,  395,    0,  510,  396,  395,  391,  393,  511,  398,
      393,  395,  392,  398,  393,  394,  506,  512,  393,  397,
      396,  395,  394,  397,    0,    0,  394,  396,  395,  398,
      510,  396,  395,  514,  393,  511,  398,  397,  395,  397,
      398,    0,  394,  515,  512,  399,  397,  396,  395,  399,
      397,  400,  399,  400,  401,  402,  398,  400,  401,  402,
      514,  516,    0,  517,  397,  399,  397,  401,  400,  518,
      515,  402,  399,  400,  401,  402,  399,    0,  400,  399,
      400,  401,  402,  403,  400,  401,  402,  403,  516,  404,
      517,  403,  399,  404,  401,  400,  518,  519,  402,  520,

      400,  401,  402,  403,  404,  521,  522,  405,  407,  404,
      403,  405,  407,  406,  403,    0,  404,  406,  403,    0,
      404,  406,  407,    0,  519,  408,  520,  405,  407,  408,
      403,  404,  521,  522,  405,  407,  404,  406,  405,  407,
      406,  523,  409,  410,  406,  408,  409,  410,  406,  407,
      410,  524,  408,  527,  405,  407,  408,  411,  528,  529,
        0,  411,  409,  410,  406,  411,    0,  412,  523,  409,
      410,  412,  408,  409,  410,  414,  530,  410,  524,  414,
      527,  411,  412,  531,  411,  528,  529,  412,  411,  409,
      410,  413,  411,  413,  412,  414,  415,  413,  412,  532,

      415,    0,  414,  530,  533,  535,  414,    0,  411,  412,
      531,  415,  416,  413,  412,  416,  415,  417,  413,  416,
      413,  417,  414,  415,  413,  418,  532,  415,  417,  418,
      419,  533,  535,  536,  419,  416,    0,  417,  415,  416,
      413,  539,  416,  415,  417,  418,  416,  540,  417,  421,
      419,    0,  418,  421,    0,  417,  418,  419,    0,  420,
      536,  419,  416,  420,  417,    0,  542,  420,  539,  421,
      545,    0,  418,  422,  540,  422,  421,  419,  423,  422,
      421,  424,  423,  420,  546,  424,  420,  547,  424,    0,
      420,  548,  423,  542,  420,  422,  421,  545,  423,  549,

      422,  424,  422,  425,    0,  423,  422,  425,  424,  423,
      420,  546,  424,  426,  547,  424,  425,  426,  548,  423,
      552,  556,  422,  425,    0,  423,  549,  426,  424,  558,
      425,  427,    0,  426,  425,  427,    0,  428,  560,  562,
      426,  428,    0,  425,  426,  428,    0,  552,  556,  429,
      425,  427,    0,  429,  426,  430,  558,  429,  427,  430,
      426,  428,  427,  430,  428,  560,  562,  431,  428,  429,
      432,  431,  428,  432,  431,  430,  429,  432,  427,  433,
      429,    0,  430,  433,  429,  563,  430,  431,  428,  565,
      430,    0,  566,  432,  431,  433,  429,  432,  431,  433,

      432,  431,  430,  435,  432,  434,  433,  435,  434,  434,
      433,  437,  563,  436,  431,  437,  565,  436,  550,  566,
      432,  567,  433,  435,  437,  434,  433,  568,  436,  550,
      435,  437,  434,  436,  435,  434,  434,  438,  437,    0,
      436,  438,  437,  438,  436,  550,  561,  561,  567,  439,
      435,  437,  434,  439,  568,  436,  550,  438,  437,  439,
      436,  440,  441,  442,  438,  440,  441,  442,  438,  439,
      438,  569,  571,  561,  561,  443,  439,  572,  573,  443,
      439,  440,  441,  442,  438,  443,  439,  444,  440,  441,
      442,  444,  440,  441,  442,  443,  439,  446,  569,  571,

      574,  446,  443,  444,  572,  573,  443,  444,  440,  441,
      442,  445,  443,  575,  444,  445,  576,  446,  444,  448,
      445,  447,  443,  448,  446,  447,    0,  574,  446,  449,
      444,  445,    0,  449,  444,  577,  447,  578,  445,  448,
      575,  447,  445,  576,  446,    0,  448,  445,  447,  449,
      448,  579,  447,  451,  450,  450,  449,  451,  445,  450,
      449,  451,  577,  447,  578,  452,  448,  452,  447,  452,
      453,  581,  453,  582,  453,  450,  449,  451,  579,    0,
      451,  450,  450,    0,  451,  452,  450,  454,  451,  583,
      453,  454,  452,    0,  452,    0,  452,  453,  581,  453,

      582,  453,  450,  454,  451,  455,  456,  454,  584,  455,
      456,  457,  452,  587,  454,  457,  583,  453,  454,    0,
      455,  588,  456,  590,    0,  455,  456,    0,    0,    0,
      454,  457,  455,  456,  454,  584,  455,  456,  457,  458,
      587,  459,  457,  458,    0,  459,  458,  455,  588,  456,
      590,  460,  455,  456,  459,  460,  461,    0,  457,  458,
      461,  459,    0,    0,    0,  460,  458,    0,  459,  591,
      458,  460,  459,  458,  592,  462,  461,  593,  460,  462,
      465,  459,  460,  461,  465,  463,  458,  461,  459,  463,
      464,  465,  460,  463,  464,  462,  591,    0,  460,  464,

      465,  592,  462,  461,  593,    0,  462,  465,    0,  463,
      464,  465,  463,    0,  594,  466,  463,  464,  465,  466,
      463,  464,  462,  466,  467,  468,  464,  465,  467,  468,
        0,    0,  467,  595,  596,  466,  463,  464,  597,    0,
      468,  594,  466,    0,  599,  468,  466,    0,  467,  471,
      466,  467,  468,  471,  469,  467,  468,  469,  469,  467,
      595,  596,  466,  601,    0,  597,  470,  468,  713,  471,
      470,  599,  468,  470,  469,  467,  471,    0,  472,  473,
      471,  469,  472,  473,  469,  469,  470,  474,  472,    0,
      601,  474,  715,  470,  717,  713,  471,  470,  472,  473,

      470,  469,  718,  719,  475,  472,  473,  474,  475,  472,
      473,    0,  476,  470,  474,  472,  476,  720,  474,  715,
        0,  717,  475,    0,  475,  472,  473,  476,  721,  718,
      719,  475,  476,  477,  474,  475,  479,  477,  478,  476,
      479,  722,  478,  476,  720,  478,  480,  479,  477,  475,
      480,  475,  723,  477,  476,  721,  479,  725,  478,  476,
      477,  480,  726,  479,  477,  478,  480,  479,  722,  478,
      727,    0,  478,  480,  479,  477,  728,  480,  481,  723,
      477,  730,  481,  479,  725,  478,  482,  481,  480,  726,
      482,  483,  484,  480,  731,  483,  484,  727,  481,    0,

      732,  484,    0,  728,  733,  481,  482,    0,  730,  481,
      734,  483,  484,  482,  481,    0,  735,  482,  483,  484,
      485,  731,  483,  484,  485,  481,  488,  732,  484,  485,
      488,  733,  486,  482,  488,  736,  486,  734,  483,  484,
      485,    0,  486,  735,  486,  487,    0,  485,  737,  487,
      488,  485,  486,  488,  490,  487,  485,  488,  490,  486,
        0,  488,  736,  486,  489,  487,    0,  485,  489,  486,
      490,  486,  487,  489,  490,  737,  487,  488,  738,  486,
        0,  490,  487,  739,  489,  490,  492,  491,  742,  491,
      492,  489,  487,  491,    0,  489,    0,  490,    0,  743,

      489,  490,  745,  493,  492,  738,  492,  493,    0,  491,
      739,  489,    0,  492,  491,  742,  491,  492,  493,  747,
      491,  495,  750,  493,  495,  495,  743,  494,    0,  745,
      493,  492,    0,  492,  493,  494,  491,  751,  752,  494,
      496,  495,  494,  604,  496,  493,  747,  604,  495,  750,
      493,  495,  495,  496,  494,  606,  604,  607,    0,  606,
      496,  607,  494,  604,  751,  752,  494,  496,  495,  494,
      604,  496,  605,    0,  604,  606,  605,  607,  753,    0,
      496,  758,  606,  604,  607,  605,  606,  496,  607,  760,
      604,  609,  605,  608,  610,  609,  761,  608,  610,  605,

      609,    0,  606,  605,  607,  753,  608,  762,  758,  765,
      766,  609,  605,  608,  610,  767,  760,  768,  609,  605,
      608,  610,  609,  761,  608,  610,  611,  609,  612,  769,
      611,  771,  612,  608,  762,  611,  765,  766,  609,  613,
      608,  610,  767,  613,  768,  614,  611,  613,  612,  614,
        0,    0,    0,  611,    0,  612,  769,  611,  771,  612,
      615,  772,  611,  613,  615,  614,  613,  773,  774,  775,
      613,    0,  614,  611,  613,  612,  614,  616,  617,  618,
      615,  616,  617,  618,    0,  776,  617,  615,  772,    0,
      613,  615,  614,    0,  773,  774,  775,  616,  617,  618,

        0,  777,  778,    0,  616,  617,  618,  615,  616,  617,
      618,  620,  776,  617,  619,  620,  622,  621,  619,  779,
      622,  621,    0,    0,  616,  617,  618,  619,  777,  778,
      622,  620,  621,  780,  619,  623,  622,  621,  620,  623,
        0,  619,  620,  622,  621,  619,  779,  622,  621,  624,
      623,  781,  783,  624,  619,  623,  624,  622,  620,  621,
      780,  619,  623,  622,  621,  784,  623,  627,  625,  624,
      626,  627,  625,    0,  626,  627,  624,  623,  781,  783,
      624,  785,  623,  624,  625,  626,    0,  787,  625,  788,
      626,  627,  784,    0,  627,  625,  624,  626,  627,  625,

      628,  626,  627,  629,  628,  629,  630,    0,  785,  629,
      630,  625,  626,  628,  787,  625,  788,  626,  627,  632,
      628,  789,  871,  632,  633,  629,  630,  628,  633,    0,
      629,  628,  629,  630,  631,    0,  629,  630,  631,  632,
      628,  631,    0,  873,  633,  875,  632,  628,  789,  871,
      632,  633,  629,  630,  631,  633,  634,  876,  635,  636,
      634,  631,  635,  636,    0,  631,  632,  634,  631,  635,
      873,  633,  875,  637,  878,  636,  634,  637,  635,  636,
      880,  631,    0,  634,  876,  635,  636,  634,  637,  635,
      636,  640,  881,  637,  634,  640,  635,  882,    0,  884,

      637,  878,  636,  634,  637,  635,  636,  880,  638,  639,
      641,  640,  638,  639,  641,  637,  638,  639,  640,  881,
      637,  643,  640,    0,  882,  643,  884,  642,    0,  643,
      641,  642,  638,  639,    0,  638,  639,  641,  640,  638,
      639,  641,  642,  638,  639,  643,  644,  642,  643,    0,
      644,  645,  643,    0,  642,  645,  643,  641,  642,  638,
      639,  648,    0,  886,  650,  648,  644,    0,  650,  642,
        0,  645,  643,  644,  642,  646,  647,  644,  645,  646,
      647,  648,  645,  646,  650,  649,    0,  647,  648,  649,
      886,  650,  648,  644,  649,  650,  647,  651,  645,  646,

      652,  651,  646,  647,  652,  649,  646,  647,  648,  653,
      646,  650,  649,  653,  647,  654,  649,  651,  890,  654,
      652,  649,  653,  647,  651,    0,  646,  652,  651,  653,
        0,  652,  649,  892,  654,  654,  653,  655,    0,  656,
      653,  655,  654,  656,  651,  890,  654,  652,  893,  653,
      655,  658,  656,  899,    0,  658,  653,  655,    0,  656,
      892,  654,  654,  657,  655,  657,  656,  657,  655,  660,
      656,  658,  900,  660,    0,  893,  657,  655,  658,  656,
      899,  659,  658,  657,  655,  659,  656,  661,  659,  660,
      657,  661,  657,  662,  657,    0,  660,  662,  658,  900,

      660,  659,  663,  657,    0,  664,  663,  661,  659,  664,
      657,  903,  659,  662,  661,  659,  660,  663,  661,  665,
      662,  904,  663,  665,  662,  664,  665,  666,  659,  663,
        0,  666,  664,  663,  661,  906,  664,  667,  903,  665,
      662,  667,    0,    0,  663,  907,  665,  666,  904,  663,
      665,  908,  664,  665,  666,  668,    0,  667,  666,  668,
        0,  671,  906,  910,  667,  671,  665,  670,  667,  668,
      668,  670,  907,  669,  666,  668,  669,  669,  908,  911,
      670,  671,  668,  672,  667,  672,  668,  670,  671,  672,
      910,  673,  671,  669,  670,  673,  668,  668,  670,    0,

      669,    0,  668,  669,  669,  672,  911,  670,  671,  912,
      672,  673,  672,  674,  670,  675,  672,  674,  673,  675,
      669,  676,  673,  677,  916,  676,  674,  677,  675,  676,
        0,  918,  672,  674,    0,  675,  912,  919,  673,  920,
      674,  676,  675,  677,  674,    0,  675,  921,  676,  926,
      677,  916,  676,  674,  677,  675,  676,  678,  918,  679,
      674,  678,  675,  679,  919,  678,  920,  679,  676,  680,
      677,    0,  683,  680,  921,  683,  926,  680,  681,  683,
        0,  678,  681,  679,  678,    0,  679,  927,  678,  680,
      679,  681,  678,  990,  679,  683,  680,  682,  681,  683,

      680,  682,  683,  684,  680,  681,  683,  684,  678,  681,
      679,  684,  682,  686,  927,  686,  680,  682,  681,  686,
      990,  991,  683,  684,  682,  681,  993,  685,  682,  687,
      684,  685,  994,  687,  684,  686,  685,  688,  684,  682,
      686,  688,  686,    0,  682,  999,  686,  685,  991,  687,
      684,  689,    0,  993,  685,  689,  687,  688,  685,  994,
      687,  690,  686,  685,  688,  690,  692, 1001,  688,  691,
      692,  689,  999,  691,  685, 1002,  687, 1005,  689,  691,
     1006,  690,  689,  693,  688, 1009,  692,  693,  690,  691,
        0,  694,  690,  692, 1001,  694,  691,  692,  689, 1010,

      691, 1011, 1002,  693, 1005,  694,  691, 1006,  690, 1012,
      693,  694, 1009,  692,  693,  695,  691,  696,  694,  695,
        0,  696,  694,    0, 1046,  697, 1010,  697, 1011,  695,
      693,  697,  694, 1049,    0,  695, 1012,  696,  694,  699,
        0,  698,  695,  699,  696,  698,  695,  697,  696,  700,
      698, 1046,  697,  700,  697,  699,  695,  700,  697,  699,
     1049,  698,  695,  701,  696,  703,  699,  701,  698,  703,
      699,    0,  698,  700,  697, 1051,  700,  698,  701, 1054,
      700, 1055,  699,  701,  700,  703,  699,  702,  698,  702,
      701,  702,  703,  705,  701,  704,  703,  705,  704,  704,

      700, 1056, 1051, 1071,    0,  701, 1054,  702, 1055,    0,
      701, 1073,  703,  705,  702,  704,  702,  706,  702,  707,
      705,  706,  704,  707,  705,  704,  704,  708, 1056, 1076,
     1071,  708,  709,  706,  702, 1085,  709,  706, 1073,  707,
      705,  710,  704,    0,  706,  710,  707,  708,  706,  791,
      707,  792,  709,  791,  708,  792, 1076,    0,  708,  709,
      706,  710, 1085,  709,  706,    0,  707,    0,  710,  791,
        0,  792,  710,  793,  708,    0,  791,  793,  792,  709,
      791,  794,  792,  795,    0,  794,  796,  795,  710,    0,
      796,  797,    0,  793,  793,  797,  791,    0,  792,    0,

      793,  794,    0,  795,  793,    0,  796,    0,  794,    0,
      795,  797,  794,  796,  795,    0,    0,  796,  797,  798,
      793,  793,  797,  798,  799,  799,    0,  800,  794,  799,
      795,  800,    0,  796,  798,    0,  800,  803,  797,  798,
      801,  803,    0,    0,  801,  799,  798,  800,    0,  802,
      798,  799,  799,  802,  800,  801,  799,  803,  800,  802,
      801,  798,    0,  800,  803,    0,  798,  801,  803,  802,
        0,  801,  799,  804,  800,  805,  802,  804,    0,  805,
      802,  806,  801,    0,  803,  806,  802,  801,    0,    0,
      807,  806,    0,  804,  807,  805,  802,  807,    0,  808,

      804,  806,  805,  808,  804,  809,  805,  810,  806,  809,
      807,  810,  806,    0,    0,    0,    0,  807,  806,  808,
      804,  807,  805,    0,  807,  809,  808,  810,  806,  811,
      808,  812,  809,  811,  810,  812,  809,  807,  810,  813,
      812,  814,    0,  813,  811,  814,  808,    0,    0,  811,
        0,  812,  809,    0,  810,    0,  811,    0,  812,  813,
      811,  814,  812,    0,    0,  815,  813,  812,  814,  815,
      813,  811,  814,  817,    0,  816,  811,  817,  812,  816,
      815,    0,    0,    0,    0,  815,  813,  817,  814,    0,
      816,    0,  815,  817,    0,  816,  815,    0,    0,  818,

      817,  820,  816,  818,  817,  820,  816,  815,    0,  819,
        0,  819,  815,    0,  817,  819,    0,  816,    0,  818,
      817,  820,  816,  821,    0,  822,  818,  821,  820,  822,
      818,  819,  820,    0,    0,  824,  819,  823,  819,  824,
      822,  823,  819,  821,  823,  822,  818,    0,  820,  825,
      821,  825,  822,  825,  821,  824,  822,  823,  819,  826,
        0,    0,  824,  826,  823,    0,  824,  822,  823,  825,
      821,  823,  822,  827,    0,    0,  825,  827,  825,  826,
      825,  828,  824,  829,  823,  828,  826,  829,  827,    0,
      826,    0,    0,  827,    0,    0,  825,    0,  830,    0,

      827,  828,  830,  829,  827,    0,  826,  831,  828,    0,
      829,  831,  828,  830,  829,  827,    0,  832,  830,  833,
      827,  832,    0,  833,    0,  830,  833,  831,  828,  830,
      829,  832,  834,    0,  831,    0,  834,  832,  831,  833,
      830,    0,    0,    0,  832,  830,  833,  835,  832,    0,
      833,  835,  834,  833,  831,    0,  836,  837,  832,  834,
      836,  837,    0,  834,  832,  838,  833,  835,    0,  838,
        0,  839,    0,    0,  835,  839,  836,  837,  835,  834,
        0,    0,  840,  836,  837,  838,  840,  836,  837,    0,
      840,  839,  838,    0,  835,  843,  838,    0,  839,  843,

        0,  842,  839,  836,  837,  842,  840,  841,    0,  840,
      841,  841,  838,  840,    0,  843,  842,  840,  839,  844,
      845,  842,  843,  844,  845,    0,  843,  841,  842,    0,
        0,    0,  842,  840,  841,    0,    0,  841,  841,  844,
      845,    0,  843,  842,    0,  846,  844,  845,  842,  846,
      844,  845,    0,  848,  841,  847,    0,  848,  846,  847,
        0,    0,    0,    0,    0,  846,  844,  845,  847,    0,
      849,    0,  846,  848,  849,  847,  846,    0,    0,  850,
      848,    0,  847,  850,  848,  846,  847,    0,  853,  853,
      849,    0,  846,  853,    0,  847,    0,  849,    0,  850,

      848,  849,  847,  851,  852,    0,  850,  851,  852,  853,
      850,  851,  852,    0,    0,  853,  853,  849,    0,    0,
      853,    0,    0,    0,    0,  854,  850,  851,  852,  854,
      851,  852,  855,  855,  851,  852,  853,  855,  851,  852,
      854,    0,  856,  857,    0,  854,  856,  857,    0,    0,
      856,    0,  854,  855,  851,  852,  854,  857,  858,  855,
      855,  859,  858,  857,  855,  859,  856,  854,    0,  856,
      857,  858,  854,  856,  857,  860,  859,  856,  858,  860,
      855,  859,    0,  860,  857,  858,    0,  861,  859,  858,
      857,  861,  859,  856,    0,  861,  862,  863,  858,  860,

      862,  863,  860,  859,    0,  858,  860,    0,  859,  865,
      860,  861,    0,  865,  861,  866,  862,  863,  861,  866,
      864,  864,  861,  862,  863,  864,  860,  862,  863,  865,
        0,    0,    0,  870,    0,  866,  865,  870,  861,    0,
      865,  864,  866,  862,  863,  867,  866,  864,  864,  867,
      868,    0,  864,  870,  868,    0,  865,    0,  868,  867,
      870,    0,  866,  869,  870,  867,    0,  869,  864,  928,
        0,  869,  867,  928,  868,  929,  867,  868,    0,  929,
      870,  868,    0,    0,  930,  868,  867,  869,  930,  928,
      869,    0,  867,  930,  869,  929,  928,    0,  869,  931,

      928,  868,  929,  931,  930,  932,  929,    0,  934,  932,
        0,  930,  934,  933,  869,  930,  928,  933,    0,  931,
      930,    0,  929,    0,    0,  932,  931,  933,  934,    0,
      931,  930,  932,  933,    0,  934,  932,  936,  935,  934,
      933,  936,  935,  937,  933,  935,  931,  937,    0,    0,
        0,  937,  932,    0,  933,  934,    0,  936,  935,    0,
      933,    0,    0,  937,  936,  935,    0,    0,  936,  935,
      937,  938,  935,  938,  937,  940,  939,  938,  937,  940,
      939,    0,    0,    0,  936,  935,    0,    0,  942,    0,
      937,  939,  942,  938,  941,  940,  939,  941,  938,    0,

      938,  941,  940,  939,  938,    0,  940,  939,  942,  944,
      943,    0,  943,  944,    0,  942,  943,  941,  939,  942,
      938,  941,  940,  939,  941,    0,  945,  946,  941,  944,
      945,  946,  943,    0,    0,  942,  944,  943,    0,  943,
      944,  947,    0,  943,  941,  947,  945,  946,    0,    0,
        0,  948,    0,  945,  946,  948,  944,  945,  946,  943,
      949,  947,    0,  951,  949,    0,  950,  951,  947,  949,
      950,  948,  947,  945,  946,  952,    0,    0,  948,  952,
      949,  950,  948,  951,    0,  953,  950,  949,  947,  953,
      951,  949,    0,  950,  951,  952,  949,  950,  948,  954,

      955,    0,  952,  954,  955,  953,  952,  949,  950,    0,
      951,    0,  953,  950,    0,    0,  953,    0,    0,  954,
      955,  956,  952,    0,  957,  956,  954,  955,  957,  958,
      954,  955,  953,  958,  956,    0,    0,    0,  959,    0,
        0,  956,  959,    0,  957,    0,  954,  955,  956,  958,
      960,  957,  956,    0,  960,  957,  958,  960,  959,  961,
      958,  956,  962,  961,    0,  959,  962,  961,  956,  959,
      960,  957,    0,    0,    0,    0,  958,  960,    0,    0,
        0,  960,  962,  961,  960,  959,  961,  963,  964,  962,
      961,  963,  964,  962,  961,    0,  965,  960,    0,    0,

      965,  966,  963,    0,    0,  966,    0,  963,  964,  962,
      961,  967,    0,  967,  963,  964,  965,  967,  963,  964,
      968,  966,  968,  965,    0,    0,  968,  965,  966,  963,
        0,    0,  966,  967,  963,  964,    0,  969,  967,    0,
      967,  969,  968,  965,  967,    0,  970,  968,  966,  968,
      970,  969,  971,  968,  972,  973,  971,  969,  972,  973,
      967,    0,  973,    0,  969,    0,  970,  974,  969,  968,
        0,  974,  971,  970,  972,  973,    0,  970,  969,  971,
        0,  972,  973,  971,  969,  972,  973,  974,  975,  973,
        0,  978,  975,  970,  974,  978,  975,    0,  974,  971,

      976,  972,  973,  977,  976,  977,  978,    0,  976,  977,
        0,  978,  975,    0,  974,  975,    0,  979,  978,  975,
        0,  979,  978,  975,  976,  977,    0,  976,    0,    0,
      977,  976,  977,  978,    0,  976,  977,  979,  978,  975,
        0,  980,  981,  982,  979,  980,  981,  982,  979,    0,
        0,  976,  977,    0,    0,    0,    0,    0,    0,    0,
        0,  980,  981,  982,  979,    0,    0,  983,  980,  981,
      982,  983,  980,  981,  982,  984,    0, 1015,    0,  984,
      983, 1015,  984,    0,    0,    0,    0,  983,  980,  981,
      982,    0, 1016,    0,  983,  984, 1016, 1015,  983,    0,

        0, 1017,  984,    0, 1015, 1017,  984,  983, 1015,  984,
        0, 1018, 1016, 1019,  983, 1018, 1020, 1019,    0, 1016,
     1020, 1017,  984, 1016, 1015, 1022, 1021,    0, 1017, 1022,
     1021, 1018, 1017, 1019, 1021,    0, 1020,    0, 1018, 1016,
     1019,    0, 1018, 1020, 1019, 1022,    0, 1020, 1017,    0,
     1021, 1023, 1022, 1021,    0, 1023, 1022, 1021, 1018,    0,
     1019, 1021,    0, 1020, 1024, 1025, 1026,    0, 1024, 1025,
     1026, 1023, 1022,    0,    0,    0,    0, 1021, 1023, 1024,
        0,    0, 1023, 1027, 1024, 1025, 1026, 1027,    0,    0,
        0, 1024, 1025, 1026,    0, 1024, 1025, 1026, 1023, 1029,

     1028, 1029,    0, 1027, 1028, 1029, 1024,    0,    0,    0,
     1027, 1024, 1025, 1026, 1027, 1030,    0,    0,    0, 1030,
     1028, 1029,    0,    0,    0, 1031, 1029, 1028, 1029, 1031,
     1027, 1028, 1029, 1032,    0, 1030,    0, 1032, 1031, 1033,
        0,    0, 1030, 1033,    0, 1031, 1030, 1028, 1029,    0,
        0, 1034, 1031, 1032, 1035, 1034, 1031, 1036, 1035, 1033,
     1032, 1036, 1030, 1036, 1032, 1031, 1033,    0,    0, 1035,
     1033, 1034, 1031,    0, 1035, 1037,    0, 1036, 1034, 1037,
     1032, 1035, 1034, 1038, 1036, 1035, 1033, 1038, 1036,    0,
     1036,    0,    0, 1041,    0, 1037, 1035, 1041, 1034,    0,

        0, 1035, 1037, 1038, 1036, 1039, 1037, 1040, 1041, 1039,
     1038, 1040,    0, 1041, 1038, 1040,    0, 1042, 1039, 1043,
     1041, 1042, 1037, 1043, 1041, 1039,    0, 1040,    0, 1044,
     1038,    0, 1039, 1044, 1040, 1041, 1039, 1042, 1040, 1043,
     1041,    0, 1040, 1058, 1042, 1039, 1043, 1058, 1042, 1044,
     1043, 1060, 1039, 1059, 1040, 1060, 1044, 1059,    0,    0,
     1044, 1061,    0, 1058, 1042, 1061, 1043,    0, 1059,    0,
     1058, 1060,    0, 1059, 1058,    0, 1044,    0, 1060, 1062,
     1059, 1061, 1060, 1062, 1059, 1063,    0,    0, 1061, 1063,
     1058,    0, 1061,    0, 1062, 1059,    0, 1065, 1060, 1062,

     1059, 1065,    0,    0,    0, 1063, 1062, 1064, 1061, 1066,
     1062, 1064, 1063, 1066,    0, 1067, 1063, 1065,    0, 1067,
     1064, 1062,    0,    0, 1065,    0, 1062, 1064, 1065, 1066,
        0,    0, 1063,    0, 1064, 1067, 1066, 1068, 1064, 1069,
     1066, 1068, 1067, 1069, 1065, 1070, 1067, 1064, 1068, 1070,
        0, 1077,    0,    0, 1064, 1077, 1066, 1068,    0, 1069,
        0,    0, 1067, 1078, 1068, 1070, 1069, 1078, 1068,    0,
     1069, 1077, 1070, 1079,    0, 1068, 1070, 1079, 1077,    0,
        0, 1080, 1077, 1078, 1068, 1080, 1069, 1079,    0,    0,
     1078, 1081, 1070, 1079, 1078, 1081,    0,    0, 1077, 1082,

     1079, 1080,    0, 1082, 1079,    0,    0,    0, 1080, 1082,
     1078, 1081, 1080, 1086, 1079,    0,    0, 1086, 1081, 1082,
     1079, 1087, 1081, 1088,    0, 1087, 1082, 1088, 1080,    0,
     1082, 1090, 1088, 1086,    0, 1090, 1082,    0, 1081,    0,
     1086, 1087,    0, 1088, 1086,    0, 1082,    0, 1087,    0,
     1088, 1090, 1087,    0, 1088,    0,    0,    0, 1090, 1088,
     1086,    0, 1090,    0,    0,    0,    0,    0, 1087,    0,
     1088,    0,    0,    0,    0,    0,    0,    0, 1090, 1092,
     1092, 1092, 1092, 1092, 1093,    0,    0, 1093, 1093, 1095,
     1095, 1095,    0, 1095, 1096,    0, 1096, 1096, 1096, 1097,

        0, 1097, 1097, 1097, 1098,    0, 1098, 1098, 1098, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 2309 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2323 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 58 "flex_lexer.l"


#line 2610 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1092 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1091 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 64 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 142:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 149:
#line 215 "flex_lexer.l"
case 150:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 225 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 231 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 236 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 237 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 238 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 239 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 240 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 242 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 245 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3476 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1092 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1092 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1091);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 245 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

