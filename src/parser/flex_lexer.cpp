#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 161
#define YY_END_OF_BUFFER 162
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1116] =
    {   0,
        0,    0,  158,  158,    2,    2,  162,  160,    4,    4,
      160,  160,  150,  156,  150,  150,  153,  150,  150,  150,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  150,  158,  159,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  145,    0,    1,  153,
      152,  151,  147,  146,  144,  148,  155,  155,  155,  155,

      155,  155,  123,  155,  155,  124,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      125,  155,  155,  126,  127,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  128,  129,  130,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  131,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  149,  158,  157,
        2,    2,    2,    2,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  154,  151,  111,  155,  112,  155,
      155,  113,  155,  114,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  135,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  115,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  116,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  117,  155,  155,  118,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  119,  155,  155,  120,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  121,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  122,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,  155,  155,  155,  155,  155,  155,  155,  155,
       80,  155,   81,   43,   82,  155,  155,  155,   83,  155,
      155,   84,  155,  155,  155,  155,   86,  155,  155,  155,
       87,   88,  155,  155,  155,  155,  155,  155,  155,   89,
      155,  155,   90,   91,  155,  155,   92,  155,   93,  134,
      155,  155,  155,  155,  155,  155,   94,  155,   95,   96,
       97,  155,   99,  155,  100,  155,  155,  155,  155,  102,
      155,  155,  155,  155,  155,  103,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  104,  155,  155,  155,  155,
      155,  105,  106,  107,  155,  155,  138,  155,  155,  155,

      155,  155,  155,  155,  155,  108,  155,  109,  155,  110,
      137,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       60,   61,  155,   62,  155,  141,  155,  155,  155,  155,
      155,  155,  155,   63,  155,  155,  155,  155,   64,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  139,
       65,  155,  155,   66,  155,   98,  155,   67,   68,  155,
      155,  155,  155,   69,   70,   71,   72,  155,  136,  155,
      155,  155,   73,   74,  155,  155,  155,  155,  155,   75,
      155,  155,  155,  155,  155,  155,  155,   76,  155,  155,
      155,  155,  155,   77,  155,  155,  155,   78,  155,  155,

      155,   79,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  155,   33,  155,  101,  155,   34,
      143,  155,   35,  155,  155,  155,   36,  155,   37,  155,

       38,   39,   40,  155,   41,  155,  155,   44,   45,   46,
       47,   48,  155,  155,   49,  133,  155,  155,   50,  155,
      155,  155,   51,  155,  155,   52,  132,   53,  155,   54,
      155,   55,  155,  155,  155,  155,  155,   56,   57,   58,
       59,  155,  155,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,   15,   16,   17,   18,   19,  155,  155,   20,
      155,  155,   21,   22,   42,   23,  155,   26,  155,  155,
       27,   28,  155,  155,   29,  155,   30,  155,  155,   24,
      155,  155,   31,   32,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   85,  155,   10,   11,
      155,   12,  155,   13,  142,   25,  155,  155,  155,   14,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  155,    7,  155,    8,    9,  155,

        2,    2,    2,    2,    2,    2,    5,    6,  155,    2,
        2,    2,  140,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1123] =
    {   0,
        0,    0,  387,  384,   67,    0,  390, 5784,  133,  135,
      376,    0, 5784, 5784,  131,  377,  133,  132,  371,  343,
      129,  129,  138,  154,  165,  216,  146,  193,  226,  125,
      139,  188,  218,  221,  262,  261,    0,  242,  308,  351,
      271,  290,  179,  144,  285,    0,  339,    0,  147,  161,
      326,  330,    0,    0,  203,  289,  213,  213,  257,  247,
      409,  476,  530,  582,  630,  682,  319,  411,  725,  416,
      283,  340,  468,  776,  825,  479,  386,  473,  871,  923,
      528,  405,  481,  518,  187,  229, 5784,  215, 5784,  285,
      204,  198, 5784, 5784, 5784, 5784,    0,  174,  206,  289,

      301,  230,  268,  570,  270,    0,  334,  329,  572,  420,
      342,  619,  518,  320,  329,  344,  412,  429,  669,  472,
      480,  480,  481,  487,  520,  519,  526,  559,  532,  532,
        0,  580,  576,  673,  580,  586,  571,  593,  619,  695,
      583,  588,  592,  589,  617,  628,  640,  637,    0,  642,
      628,  635,  660,  697,  694,  677,  683,  699,  739,  711,
      727,  723,  742,  743,  739,  741,  734,  738,  759,  773,
      752,  752,  777,  787,  788,  776,  799, 5784,    0, 5784,
        0,  304,    0,  200,    0,  300,  160,  155,    0,    0,
        0,    0,  805,  846,  863,  917,  935,  925,  969, 1017,

      829,  975,  967,  984, 1058, 1023, 1053, 1109, 1042, 1086,
     1111, 1120, 1126, 1156, 1206, 1162, 1164, 1208, 1216, 1230,
     1242, 1254, 1268, 1266, 1294, 1292, 1300, 1302, 1332, 1381,
     1156, 1324, 1334, 1356, 1342, 1432, 1378, 1393, 1433, 1431,
     1434, 1467, 1486, 1484, 1496, 1520, 1521, 1522, 1534, 1555,
     1557, 1570, 1580, 1585, 1635, 1609, 1634, 1659, 1647, 1621,
     1676, 1671, 1700, 1701, 1729, 1710, 1751, 1734, 1766, 1783,
     1764, 1801, 1822,    0, 5784,  148,    0,  796,    0,  797,
      796,    0,  814,    0,  802,  839,  839,  855,  873,  915,
      872,  871,  881,  880,  900,  945,  929,  971,    0,  971,

      987,  997,  989,  993,  984, 1012, 1014, 1035,    0, 1051,
     1058, 1073, 1067, 1080, 1096, 1098, 1122, 1163, 1164, 1166,
     1171, 1183, 1172, 1197, 1210, 1209, 1212, 1226, 1228, 1260,
     1282, 1284, 1456, 1274, 1309,    0, 1311, 1337, 1336, 1359,
     1376, 1372, 1390, 1378, 1397, 1400,    0, 1438, 1435, 1436,
     1470, 1491, 1506, 1496, 1499, 1542, 1560, 1564, 1592, 1589,
     1604, 1600, 1626,    0, 1640, 1681, 1674, 1677, 1690, 1702,
     1711, 1733, 1758, 1742,    0, 1754, 1808, 1792, 1757, 1784,
     1779, 1776, 1811, 1794, 1805, 1824, 1821, 1812,    0,  145,
     1834, 1846, 1855, 1858, 1863, 1868, 1880, 1892, 1904, 1909,

     1926, 1918, 1943, 1960, 1968, 1962, 1992, 2006, 1997, 2018,
     2016, 2031, 2046, 2052, 2064, 2070, 2094, 2076, 2100, 2109,
     2124, 2118, 2126, 2154, 2139, 2163, 2164, 2172, 2189, 2204,
     2213, 2226, 2234, 2239, 2221, 2267, 2272, 2275, 2280, 2289,
     2297, 2326, 2325, 2334, 2343, 2351, 2375, 2360, 2384, 2396,
     2409, 2401, 2410, 2434, 2446, 2468, 2474, 2455, 2492, 2500,
     2506, 2518, 2528, 2536, 2542, 2554, 2576, 2578, 2584, 2586,
     2612, 2626, 2624, 2638, 2636, 2660, 2662, 2674, 2684, 2692,
     2710, 2713, 2738, 2716, 2746, 2767, 2764, 2770, 2779, 2796,
     2804, 2818, 2842, 2833, 2850, 2867, 2868, 2900, 2892, 2900,

     2902, 2917, 1858, 1861, 1859, 1901, 1912, 1919, 1932, 1925,
        0, 1946,    0,    0,    0, 1959, 1972, 1971,    0, 1971,
     1984, 2019, 2033, 2026, 2039, 2059, 2062, 2091, 2101, 2103,
        0,    0, 2137, 2149, 2153, 2165, 2204, 2227, 2256,    0,
     2243, 2267,    0,    0, 2300, 2301,    0, 2304,    0,    0,
     2321, 2328, 2323, 2337, 2354, 2450,    0, 2385,    0,    0,
        0, 2384,    0, 2401,    0, 2417, 2577, 2415, 2440,    0,
     2460, 2462, 2451, 2471, 2479,    0, 2512, 2521, 2516, 2517,
     2551, 2573, 2594, 2601, 2622,    0, 2627, 2648, 2645, 2650,
     2642,    0,    0, 2667, 2691, 2710,    0, 2734, 2726, 2732,

     2757, 2767, 2790, 2807, 2809,    0, 2804,    0, 2821,    0,
        0, 2938, 2946, 2952, 2967, 2976, 2988, 2991, 3000, 3001,
     3006, 3030, 3039, 3040, 3054, 3045, 3075, 3078, 3093, 3080,
     3099, 3129, 3112, 3138, 3148, 3157, 3147, 3162, 3183, 3192,
     3198, 3211, 3216, 3224, 3233, 3261, 3266, 3252, 3274, 3287,
     3300, 3306, 3312, 3315, 3340, 3341, 3354, 3366, 3369, 3375,
     3394, 3399, 3404, 3423, 3453, 3429, 3458, 3448, 3467, 3477,
     3486, 3499, 3511, 3512, 3521, 3536, 3561, 3549, 3566, 3575,
     3590, 3599, 3605, 3607, 3620, 3653, 3659, 3658, 3661, 3683,
     3644, 3707, 3709, 3719, 3728, 3753, 3731, 3743, 3761, 3779,

     3782, 3791, 3801, 3803, 3827, 3833, 3845, 3835, 3836, 3873,
     3886, 3885, 3891, 3899, 3921, 3923, 3931, 3936, 3945, 3953,
        0,    0, 2815,    0, 2858,    0, 2876, 2869, 2909, 2917,
     2926, 2944, 2955,    0, 2959, 3015, 3034, 3042,    0, 3042,
     3041, 3054, 3064, 3096, 3089, 3095, 3140, 3160, 3175,    0,
        0, 3171, 3192,    0, 3203,    0, 3192,    0,    0, 3193,
     3241, 3232, 3243,    0,    0,    0,    0, 3276,    0, 3286,
     3287, 3280,    0,    0, 3298, 3315, 3317, 3349, 3346,    0,
     3360, 3368, 3366, 3367, 3380, 3406, 3414, 3398, 3402, 3405,
     3452, 3468, 3473,    0, 3483, 3503, 3507,    0, 3506, 3531,

     3548,    0, 3955, 3977, 3985, 3987, 3990, 3995, 4009, 4023,
     4031, 4044, 4059, 4072, 4069, 4077, 4094, 4107, 4122, 4128,
     4131, 4143, 4146, 4167, 4164, 4179, 4181, 4182, 4216, 4215,
     4233, 4218, 4221, 4251, 4269, 4250, 4284, 4275, 4290, 4287,
     4308, 4323, 4320, 4342, 4341, 4359, 4360, 4374, 4377, 4392,
     4395, 4413, 4425, 4431, 4410, 4434, 4443, 4464, 4467, 4479,
     4482, 4485, 4497, 4519, 4531, 4518, 4521, 4555, 4567, 4569,
     4572, 4591, 4604, 4605, 4630, 4617, 4639, 4642, 4645, 4654,
     4679, 4667, 4684, 4696, 3555,    0, 3548,    0, 3560, 3560,
        0, 3597,    0, 3608, 3625, 3614,    0, 3636,    0, 3671,

        0,    0,    0, 3670,    0, 3663, 3662,    0,    0,    0,
        0,    0, 3681, 3695,    0,    0, 3730, 3745,    0, 3734,
     3767, 3749,    0, 3773, 3779, 3771,    0,    0, 3784,    0,
     3790,    0, 3823, 3855, 3842, 3863, 3866,    0,    0,    0,
        0, 3884, 3900, 4705, 4708, 4713, 4730, 4738, 4759, 4747,
     4764, 4762, 4772, 4804, 4801, 4810, 4818, 4813, 4852, 4854,
     4855, 4864, 4867, 4869, 4888, 4903, 4905, 4906, 4927, 4939,
     4940, 4942, 4957, 4972, 4975, 4990, 5005, 4996, 5011, 5014,
     5029, 5035, 5050, 5059, 5069, 5047, 5068, 5098, 5101, 5104,
     5113, 5123, 5153, 5152, 5161, 5162, 5171, 5197, 5203, 5206,

     5212, 5215,    0,    0,    0,    0,    0, 3910, 3919,    0,
     3944, 3932,    0,    0,    0,    0, 3963,    0, 3956, 3993,
        0,    0, 3983, 3995,    0, 4004,    0, 4026, 4033,    0,
     4045, 4061,    0,    0, 5227, 5236, 5241, 5251, 5260, 5265,
     5277, 5275, 5289, 5290, 5299, 5311, 5314, 5323, 5335, 5344,
     5352, 5347, 5349, 5373, 5386, 5403, 5385, 5411, 5398, 5435,
     5443, 5437, 5452, 5461, 5469, 5487,    0, 4068,    0,    0,
     4070,    0, 4080,    0,    0,    0, 4093, 4107, 4126,    0,
     5493, 5502, 5501, 5511, 5526, 5523, 5547, 5535, 5552, 5561,
     5571, 5585, 5580, 5586, 4133,    0, 4151,    0,    0, 4170,

     5610, 5615, 5620, 5625, 5639, 5644,    0,    0, 4191, 5649,
     5673, 5674,    0, 5688, 5784, 5753, 5758,  135, 5763, 5768,
     5773, 5778
    } ;

static const flex_int16_t yy_def[1123] =
    {   0,
     1115,    1, 1116, 1116, 1115,    5, 1115, 1115, 1115, 1115,
     1115, 1117, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1115, 1119, 1115, 1120, 1120, 1115,
     1120, 1121, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1122, 1122,   62,   62,   62,   63,   63,   63,   65,   63,
       62,   62,   62,   63,   63,   63,   62,   62,   62,   63,
       65,   62,   62,   62, 1120, 1115, 1115, 1117, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1118, 1118, 1118, 1118,

     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1115, 1119, 1115,
     1120, 1120, 1120, 1121, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   65,   62,   65,   62,   62,   65,   65,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   65,
       65,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       65,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62, 1120, 1115, 1115, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,

     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1120, 1120,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   75,

       62,   62, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,

     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,

     1118, 1118,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,

     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1118, 1118, 1118, 1118, 1118, 1118,

       62,   62,   62,   62,   62,   62, 1118, 1118, 1118,   62,
       62,   62, 1118,   62,    0, 1115, 1115, 1115, 1115, 1115,
     1115, 1115
    } ;

static const flex_int16_t yy_nxt[5852] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   37,   44,   37,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   37,   44,   37,   45,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,

       81,   82,   83,   77,   84,   77,   48,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       77,   84,   77,   85,   86,   86,   86,   86,   89,   97,
       90,   92,   90,   93,   94,   98,  104,   99,  182,   86,
      105,  107,  136,  100,  390,  101,  137,  276,  108,  102,
      103,  177,   86,   86,  390,  109,  106,  111,  110,  187,
      126,  112,   98,  104,   99,  113,  127,  105,  107,  136,
      100,  114,  101,  137,  115,  108,  102,  103,  177,  116,
      277,  117,  109,  106,  111,  110,  118,  126,  112,  175,

      176,  119,  113,  127,  389,  138,  128,  276,  114,  139,
      185,  115,  186,   91,  129,  140,  116,  277,  117,  275,
      130,  188,  186,  118,  189,  190,  175,  176,  119,  120,
       86,   86,  138,  128,  144,  141,  139,  121,  278,  142,
      122,  129,  140,  123,  131,  143,  124,  130,  145,  125,
      132,  133,  134,  274,  146,  147,  120,  135,  192,  155,
      283,  144,  141,  156,  121,  278,  142,  122,  191,  157,
      123,  131,  143,  124,  152,  145,  125,  132,  133,  134,
      148,  146,  147,  284,  135,  153,  155,  283,  149,  288,
      156,  154,  150,   92,   90,  151,  157,  170,  187,  171,

      233,  152,  172,  173,  193,  182,   86,  148,  188,  186,
      284,  174,  153,  279,  281,  149,  288,  282,  154,  150,
      193,  280,  151,  158,  170,  159,  171,  233,  160,  172,
      173,  193,  193,  161,  181,  162,  163,  183,  174,  193,
      279,  281,  291,  222,  282,  180,  193,  193,  280,  223,
      158,  178,  159,  306,   96,  160,  307,  234,  289,  193,
      161,  235,  162,  163,  164,  290,  193,  236,  165,  291,
      222,  166,  167,  193,  298,  308,  223,  193,  168,  299,
      306,  169,   95,  307,  234,  289,   91,   87,  235, 1115,
       47,  164,  290,   47,  236,  165, 1115, 1115,  166,  167,

     1115,  298,  308,  193,  193,  168,  299,  193,  169,  181,
      181, 1115,  181,  181,  181,  181,  181,  181,  269,  181,
      181,  181,  193,  193,  224,  194,  270,  195,  309,  193,
      193,  193,  225,  196,  193,  197,  193,  296,  226,  198,
      199,  193,  193,  232,  310,  269,  193,  297, 1115,  193,
      193,  224,  194,  270,  195,  309,  193, 1115,  193,  225,
      196, 1115,  197,  193,  296,  226,  198,  199,  193,  193,
      232,  310, 1115,  193,  297,  181,  181,  181, 1115,  181,
      181,  181,  181,  181,  181,  237,  181,  181,  181,  238,
      251, 1115,  248,  200,  252,  239,  316,  201,  193,  193,

      253,  271,  272,  249,  317,  193,  193,  318, 1115,  250,
      193,  319,  237,  202,  320, 1115,  238,  251,  193,  248,
      200,  252,  239,  316,  201,  193,  193,  253,  271,  272,
      249,  317,  193,  193,  318,  273,  250,  193,  319,  193,
      202,  320,  181,  203,  321,  193,  322,  193,  304,  305,
      204,  193,  193,  323,  266,  193,  267,  205,  326,  268,
      206, 1115,  273, 1115,  193,  327,  193,  193, 1115, 1115,
      203,  321, 1115,  322,  193,  304,  305,  204,  193,  193,
      323,  266,  193,  267,  205,  326,  268,  206,  285,  286,
      324,  193,  327,  325,  193,  207,  292,  293,  294,  208,

      295,  328,  287,  209,  329, 1115,  334,  335,  336,  210,
     1115,  337,  211,  343,  344,  285,  286,  324,  345,  193,
      325,  346,  207,  292,  293,  294,  208,  295,  328,  287,
      209,  329,  300,  334,  335,  336,  210,  301,  337,  211,
      343,  344,  338,  302,  339,  345,  193,  193,  346,  347,
      303,  193,  348,  349,  212,  350,  213, 1115,  351,  300,
      352,  214, 1115, 1115,  301,  353,  215,  193, 1115,  338,
      302,  339, 1115,  354,  193, 1115,  347,  303,  193,  348,
      349,  212,  350,  213,  311,  351,  312,  352,  214,  330,
      313, 1115,  353,  215,  193,  216,  359,  314, 1115,  331,

      354,  315,  193,  217,  332,  333,  218,  360,  340,  219,
      341,  311,  220,  312,  355,  221,  330,  313,  356,  361,
      357,  342,  216,  359,  314,  358,  331, 1115,  315,  193,
      217,  332,  333,  218,  360,  340,  219,  341,  365,  220,
      366,  355,  221,  227, 1115,  356,  361,  357,  342,  228,
      229,  230,  358,  367,  362,  368,  231,  369,  372,  373,
      374,  193, 1115,  363,  370,  365,  375,  366,  380, 1115,
      227,  364,  376,  381, 1115,  371,  228,  229,  230, 1115,
      367,  362,  368,  231,  369,  372,  373,  374,  193,  240,
      363,  370,  377,  375,  378,  380,  193,  379,  364,  376,

      381,  382,  371,  241,  384,  386,  193,  383,  387,  242,
      243, 1115,  388,  503,  504, 1115,  240,  385, 1115,  377,
      505,  378,  193,  193,  379, 1115,  193,  506,  382,  507,
      241,  384,  386,  193,  383,  387,  242,  243,  193,  388,
      503,  504,  193,  244,  385,  193,  193,  505,  402,  193,
      193,  245,  193,  193,  506,  246,  507, 1115,  247, 1115,
      508, 1115,  391,  193, 1115,  193,  193,  193, 1115,  193,
      244, 1115,  193,  193,  509,  402,  510,  193,  245,  193,
      193, 1115,  246,  193,  193,  247,  254,  508,  255,  391,
      193,  256,  193,  193,  193,  392,  257,  511,  258,  259,

      193,  509,  515,  510,  516, 1115,  517,  193,  193, 1115,
      193,  193,  518,  254, 1115,  255, 1115, 1115,  256,  193,
     1115, 1115,  392,  257,  511,  258,  259,  193, 1115,  515,
      512,  516,  513,  517,  193,  193,  260,  519,  193,  518,
      261,  393,  193,  262,  263, 1115,  193,  514,  395,  394,
      264,  396,  193,  265,  193,  397,  193,  512,  520,  513,
      521,  193,  193,  260,  519,  193, 1115,  261,  393,  193,
      262,  263,  193,  193,  514,  395,  394,  264,  396,  193,
      265,  193,  397,  193,  398,  520,  193,  521,  522,  193,
      193,  403,  193,  193, 1115,  523,  193,  405,  404,  193,

      524,  193, 1115,  193,  527,  193,  193, 1115, 1115, 1115,
      528,  398,  193,  193,  525,  522,  529,  193,  403,  193,
      193,  193,  523,  193,  405,  404,  530,  524,  193,  526,
      193,  527,  193,  193,  193,  399,  400,  528,  193,  193,
      410,  525,  531,  529,  193, 1115, 1115, 1115,  193,  401,
      411, 1115,  532,  530,  193, 1115,  526, 1115, 1115, 1115,
      193,  193,  399,  400,  533,  193,  193,  410,  193,  531,
      193,  193,  418,  419,  193,  534,  401,  411,  193,  532,
     1115,  193,  406,  407,  408,  412,  409,  193,  535,  193,
      413,  533, 1115,  193,  193,  193, 1115,  193,  536,  418,

      419,  193,  534,  193,  537,  193, 1115,  193, 1115,  406,
      407,  408,  412,  409, 1115,  535,  193,  413, 1115,  420,
     1115,  193,  414,  193, 1115,  536,  538,  415,  193,  539,
      193,  537,  193,  416,  193,  193, 1115,  193,  421,  540,
      417,  193,  423,  193, 1115,  193,  420,  193,  193,  414,
      193,  422, 1115,  538,  415,  193,  539,  193, 1115,  193,
      416, 1115,  193,  193,  193,  421,  540,  417,  193,  423,
      193,  424,  193,  193,  193,  193,  541,  193,  422,  193,
      193,  193,  448,  193,  193,  193,  430,  193,  431,  542,
      193,  543,  193,  193, 1115,  544, 1115,  545,  424,  193,

      193,  193, 1115,  541,  193,  546,  193,  193,  193,  448,
      193, 1115,  193,  430,  193,  431,  542,  547,  543,  193,
      193,  425,  544,  426,  545,  193,  193,  427,  193,  193,
     1115,  548,  546,  193,  428,  432, 1115,  193,  429, 1115,
     1115,  549,  550,  193,  547,  193,  433,  193,  425,  551,
      426,  193,  193,  193,  427,  552,  193,  434,  548,  193,
      193,  428,  432,  193,  193,  429,  435,  193,  549,  550,
      193,  193,  193,  433,  193,  193,  551,  553,  193,  193,
      193,  436,  552,  193,  434,  193,  193,  193, 1115,  193,
      193,  193, 1115,  435,  193,  437, 1115,  438,  193,  554,

      439,  555,  193,  193,  553,  193,  193,  558,  436,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      440,  193,  437,  442,  438,  441,  554,  439,  555,  193,
      193,  193,  193, 1115,  558,  559,  193,  193,  193,  193,
      193,  193,  193,  560,  193,  449,  193,  440,  193,  193,
      442,  193,  441,  193,  561,  193,  193,  562,  193,  193,
      443,  193,  559,  193,  193,  452,  193,  453,  193,  193,
      560,  450,  449,  193,  451,  563,  193,  193,  193,  193,
      193,  561,  193, 1115,  562, 1115,  193,  443,  193,  564,
      193,  565,  452,  193,  453,  193,  193,  444,  450,  193,

      193,  451,  563, 1115,  193,  193,  193,  445,  457,  566,
      193,  567,  446,  447,  193,  193,  564,  193,  565,  458,
      193, 1115,  193, 1115,  444, 1115,  193, 1115, 1115,  568,
      193, 1115,  193,  569,  445,  457,  566,  193,  567,  446,
      447,  193,  193, 1115,  193,  454,  458,  455,  193,  193,
      193,  193,  193,  193,  193,  193,  568,  193,  456,  459,
      569, 1115,  570,  460, 1115,  571,  461,  572,  193,  193,
      193,  193,  454,  556,  455,  193,  193,  193,  193,  193,
      193,  193,  193,  557,  193,  456,  459,  573,  193,  570,
      460,  462,  571,  461,  572,  193,  193,  193,  193,  463,

      556,  193,  464,  193,  193,  193, 1115,  193,  574, 1115,
      557,  193, 1115,  193,  573,  193, 1115,  193,  462,  575,
     1115,  193,  576,  193, 1115, 1115,  463,  577,  193,  464,
      193,  193,  193,  193,  193,  574,  465,  193,  193,  193,
      193,  193,  193,  193,  193, 1115,  575,  468,  193,  576,
      193,  193,  467,  466,  577,  193, 1115,  193,  193,  193,
      193, 1115, 1115,  465,  193,  193,  193,  578,  193,  193,
      193,  193,  469,  579,  468, 1115,  470, 1115,  193,  467,
      466,  193,  193,  471,  193,  193,  193,  193,  472,  473,
     1115,  193,  193,  193,  578, 1115,  580,  193,  193,  469,

      579,  193,  193,  470,  474,  475,  193,  193,  193, 1115,
      471, 1115,  581,  582,  193,  472,  473,  193,  193,  193,
      193,  583,  193,  580,  193, 1115,  193,  584,  193,  193,
      193,  474,  475,  193,  193,  483,  479, 1115,  193,  581,
      582, 1115,  193,  585,  193, 1115,  193,  480,  583,  193,
      476,  193,  193,  193,  584,  193,  193,  193,  193,  477,
      482, 1115,  483,  479,  193,  193, 1115,  478,  193,  193,
      585,  193,  193,  193,  480,  586,  193,  476,  193,  193,
      193, 1115,  193,  193,  193,  193,  477,  482,  486,  481,
     1115,  193,  193,  193,  478,  193,  193,  193,  193,  193,

     1115,  484,  586,  193, 1115,  587,  588,  193,  193,  589,
     1115,  193,  485,  193,  590,  486,  481,  193,  193,  193,
      193,  193,  193,  193,  193,  487,  488,  193,  484,  489,
      591,  492,  587,  588,  493,  193,  589,  193,  193,  485,
      193,  590,  490,  592,  193,  193,  193,  193,  193,  193,
      193,  193,  487,  488,  193,  495,  489,  591,  492,  593,
     1115,  493,  491, 1115,  193,  193,  193,  494,  193,  490,
      592,  193,  193,  193,  193,  594, 1115,  193,  193,  595,
      596,  500,  495,  193,  601,  193,  593,  193,  193,  491,
      496, 1115, 1115,  193,  494,  193,  497,  602,  193,  193,

      498,  193,  594,  193,  193,  603,  595,  596,  500,  604,
      193,  601,  193,  499,  193,  193, 1115,  496,  193,  599,
      193,  600,  193,  497,  602,  597,  605,  498,  193,  606,
      193,  193,  603,  501,  598,  502,  604,  607,  193,  193,
      499,  610,  611,  193, 1115,  193,  599,  193,  600,  193,
      608,  193,  597,  605,  609,  193,  606, 1115, 1115,  193,
      501,  598,  502,  612,  607,  193,  193,  193,  610,  611,
      193,  193,  193, 1115, 1115,  613,  193,  608,  193,  193,
      193,  609,  193,  193,  193,  193,  193,  614,  721,  193,
      612,  722,  193,  615,  193,  193,  723,  193,  193,  193,

      193,  193,  613,  193, 1115,  193,  193,  193, 1115,  193,
      193,  193,  193,  193,  614,  721,  193,  193,  722,  193,
      615,  193,  193,  723,  193,  193,  193,  193,  193,  193,
      617,  616,  193, 1115, 1115,  193,  193, 1115,  724,  619,
      193,  193,  725,  193,  193,  726,  193,  193,  193,  727,
     1115,  728,  193,  193, 1115,  193,  193,  617,  616,  729,
      193,  618,  193,  193,  193,  724,  619,  620,  193,  725,
      193, 1115,  726,  193,  193,  621,  727,  622,  728,  193,
      193,  193,  193,  193,  730,  193,  729,  193,  618,  193,
      193,  193,  623,  731,  620,  625, 1115,  193,  624,  193,

     1115,  732,  621,  733,  622,  193,  193,  193,  193,  193,
      193,  730,  193,  193,  193,  734,  193,  626,  193,  623,
      731, 1115,  625,  193,  193,  624,  193,  193,  732,  193,
      733,  629,  193,  193,  628,  193,  193,  193,  627,  193,
      193,  193,  734,  193,  626,  193, 1115,  630,  631, 1115,
      193,  735,  193,  193,  193,  193,  193,  736,  629,  737,
      193,  628,  193,  193,  193,  627,  193,  193,  193,  193,
      193,  738,  739,  193,  630,  631,  632,  633,  735,  193,
      193,  193,  193,  193,  736,  193,  737,  634, 1115,  193,
      193,  193,  740,  637,  193,  193,  193,  193,  738,  739,

      193,  193,  635,  632,  633, 1115,  741,  193,  193,  636,
      193,  193,  193,  193,  634,  193,  193,  193,  193,  740,
      637,  193,  742,  639,  193, 1115,  193,  743,  193,  635,
      193,  193,  638,  741,  193,  641,  636,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  742,
      639, 1115,  640,  193,  743,  193,  643,  193,  193,  638,
      193,  193,  641,  193,  193,  744,  193,  642,  193, 1115,
      193,  193,  193,  193,  193,  193,  193,  745,  644,  640,
      193,  193,  193,  643,  193,  193,  746,  193,  193,  193,
      193,  193,  744,  193,  642,  645,  646,  747,  193, 1115,

      193,  193,  193,  193,  745,  644,  193,  193,  193,  193,
      193,  193,  193,  746, 1115, 1115,  193,  748,  193,  647,
      193,  193,  645,  646,  747,  193,  193,  193,  193, 1115,
      649, 1115, 1115,  193,  193,  648,  193,  193,  193,  650,
      749,  193,  193,  193,  748,  653,  647,  193,  193, 1115,
      193,  193,  193,  193, 1115,  193,  193,  649,  193,  651,
      193,  193,  648,  193,  652,  193,  650,  749,  193,  193,
      193,  193,  653,  750,  193,  751,  193,  193,  193, 1115,
      752,  654,  193,  193,  193,  193,  651,  193,  193,  193,
      193,  652,  193,  193, 1115,  656,  193,  193,  193, 1115,

      750,  657,  751,  193,  193,  655,  193,  752,  654,  193,
      193,  193,  193,  753,  193,  193,  193,  193,  193,  193,
      193,  658,  656,  193,  193, 1115,  193,  659,  657,  754,
      755,  193,  655,  193,  193, 1115,  193,  193,  756,  193,
      753,  193,  193,  193,  193,  193,  193,  193,  658,  660,
     1115,  662,  661,  193,  659,  193,  754,  755,  757,  758,
      663,  193,  193,  193,  193,  756, 1115,  759,  664,  193,
      193,  193,  193,  193,  193, 1115,  660,  193,  662,  661,
      193,  193,  193, 1115,  760,  757,  758,  663,  193,  193,
      193,  193,  665,  667,  759,  664,  193,  193,  193,  193,

     1115,  193,  666, 1115,  193,  193, 1115,  193,  193,  763,
      668,  760,  193,  193, 1115,  193,  764,  193,  670,  665,
      667,  193,  193,  193,  193,  765,  193,  193,  193,  666,
      193,  671,  193,  193,  766,  769,  763,  668,  193,  193,
      193,  669, 1115,  764,  193,  670,  193,  193,  193,  193,
      672,  193,  765,  193,  193,  193, 1115,  193,  671,  673,
      193,  766,  769,  193, 1115,  193, 1115,  193,  669,  761,
      770,  193,  193,  193,  193,  771,  193,  672,  193,  772,
      762,  773,  193,  193, 1115,  193,  673,  674,  676,  193,
      193,  193,  193,  675,  193,  193,  761,  770,  193,  193,

     1115,  774,  771,  193,  775,  193,  772,  762,  773,  193,
      193,  193,  193,  193,  674,  676,  193,  193,  193,  193,
      675,  193,  193,  193,  677,  776, 1115,  193,  774,  193,
     1115,  775,  193,  678,  777,  193,  193,  193,  193,  193,
      193,  778,  679,  193,  193,  193, 1115,  779,  193,  193,
      193,  677,  776,  193,  193,  193,  193,  193,  680,  682,
      678,  777,  193,  193,  193,  193,  193,  681,  778,  679,
      193,  683,  193,  193,  779,  193,  193, 1115, 1115,  193,
      193, 1115,  193,  780,  193,  680,  682,  781, 1115,  684,
      193,  193,  193,  193,  681,  193, 1115,  193,  683,  193,

      193,  193,  193,  193,  685,  193,  193,  193,  767,  768,
      780,  687,  686,  193,  781,  193,  684, 1115,  193,  782,
      193,  193,  193,  193,  193,  688,  193,  783,  193,  193,
      193,  685,  193,  193,  193,  767,  768,  784,  687,  686,
      193,  193,  193,  193,  690,  193,  782,  193,  193,  193,
      193,  785,  688,  692,  783,  193,  193,  193,  689,  193,
      193,  193,  691,  193,  784,  786,  787,  788,  193,  789,
      193,  690,  193,  193,  193,  193,  193,  193,  785,  694,
      692,  193,  193,  193,  193,  689,  193,  693,  193,  691,
      193,  193,  786,  787,  788,  193,  789,  193,  790,  193,

      193,  193,  193, 1115,  193,  193,  694, 1115,  193,  193,
      193,  193,  791,  193,  693, 1115,  696, 1115,  193,  695,
     1115,  193,  193, 1115,  193,  790,  193,  193,  193,  193,
      193,  193,  193,  193,  193, 1115,  193,  193,  193,  791,
      193,  792,  697,  696,  700,  698,  695,  193,  193,  793,
      193, 1115,  794,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  699,  193,  193,  795, 1115,  193,  792,  697,
      796,  700,  698, 1115,  193,  193,  793,  193,  701,  794,
      193,  703,  193,  193,  193,  193,  193,  193,  193,  699,
      193,  193,  795,  702,  193, 1115,  193,  796, 1115,  797,

      193,  193,  193, 1115,  193,  701, 1115,  704,  703,  798,
      193,  193,  193,  193,  193,  193,  193,  193,  193, 1115,
      702,  706,  705,  193,  799,  193,  797,  193,  193,  800,
      707,  193, 1115,  193,  704,  193,  798,  801,  802,  193,
      193,  193, 1115,  193,  193,  708,  711,  709,  706,  705,
      193,  799,  193,  885,  193,  193,  800,  707, 1115,  193,
      193, 1115,  193,  193,  801,  802,  193,  193,  193,  710,
      193,  193,  708,  711,  709,  886,  712,  193, 1115,  193,
      885,  193,  193,  714,  193,  193,  193,  193,  193,  193,
      193, 1115, 1115,  887,  193, 1115,  710,  193,  193, 1115,

      713,  888,  886,  712,  193,  193,  193, 1115, 1115,  193,
      714,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      887,  193,  719,  193,  716,  889,  717,  713,  888,  193,
      718,  193,  193,  193,  193,  715,  193,  193,  193,  193,
      193, 1115, 1115,  890,  193,  193,  193,  720,  193,  719,
      193,  716,  889,  717,  193,  193,  193,  718,  891,  193,
      193,  193,  715,  193,  193,  193,  193,  193,  803,  193,
      890,  892,  893,  193,  720,  193,  804, 1115, 1115, 1115,
      894,  193,  193,  193,  193,  891,  193, 1115,  193,  805,
      193, 1115, 1115,  193,  193,  803,  193,  193,  892,  893,

      193, 1115,  193,  804,  806,  193,  807,  894,  809,  193,
      193,  193,  193,  193,  808,  193,  805,  193,  193,  811,
      193,  193,  193,  193,  193,  193,  810,  193,  193, 1115,
     1115,  806,  193,  807, 1115,  809,  193,  193,  193,  193,
      193,  808,  895,  193,  193,  193,  811,  193,  193,  193,
      193,  193,  193,  810,  193,  193,  193,  193,  896,  897,
      193,  193,  193,  898,  193,  193,  813,  193, 1115,  895,
      193,  193, 1115,  899,  193,  193,  193,  193,  193,  812,
      900,  901,  193,  193,  193,  896,  897,  193,  193,  193,
      898,  193,  193,  813,  193,  193,  193,  193,  193,  193,

      899,  193,  193,  193,  193,  814,  812,  900,  901,  193,
      193,  816,  193,  902,  193,  193,  193,  193,  193,  193,
      193,  903,  193,  193,  193,  815,  193,  904,  193,  193,
      193,  817,  814,  193, 1115, 1115,  193,  193,  816,  193,
      902,  193,  193,  193,  193,  819,  193,  193,  903,  193,
      193, 1115,  815,  818,  904,  193,  193,  193,  817,  193,
      193,  821,  823,  193,  193,  193,  193, 1115,  193,  193,
      820,  905,  819,  193,  193,  193,  193,  193,  193,  193,
      818,  906,  193,  824,  193,  193,  193,  822,  821,  823,
      907,  193,  193,  193,  193,  193,  193,  820,  905,  193,

      193,  193,  193,  908,  193,  193,  193,  825,  906,  193,
      824,  193,  193,  193,  822,  193,  909,  907, 1115,  193,
      193,  193,  910, 1115,  911,  912,  193,  193,  193,  193,
      908,  193,  193,  193,  825,  193,  193,  193, 1115,  826,
      193,  193,  193,  909,  827,  193,  193,  193,  193,  910,
      193,  911,  912,  193,  193,  193,  193,  828,  913,  193,
      193,  193,  193,  914,  193,  829,  826,  915,  193,  832,
      193,  827,  193,  193,  830,  193, 1115,  193,  193,  831,
      193,  193,  193,  193,  828,  913, 1115,  193,  193,  193,
      914,  193,  829,  916,  915,  193,  832,  193,  193,  917,

      193,  830, 1115,  193,  193,  193,  831,  918,  193,  193,
      193,  193,  919,  834,  193,  920,  193,  193,  193,  833,
      916,  193,  193,  193,  193,  193,  917,  193,  835,  193,
      193,  193,  193,  193,  918,  193,  193,  193,  193,  919,
      834, 1115,  920,  193,  193,  921,  833,  922,  193,  193,
      193,  193,  193, 1115,  193,  835,  193,  193,  193,  193,
      193,  193,  193,  193,  193, 1115,  923,  924,  836, 1115,
      193,  193,  921,  925,  922,  193,  193,  193,  193,  193,
      837,  926,  927,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  838,  923,  924,  836,  193, 1115,  193,  928,

      925,  929,  193,  193,  193,  193,  193,  837,  926,  927,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  838,
      193,  193,  930,  193,  839,  193,  928,  931,  929,  932,
      193,  193,  933,  193,  841,  840,  193,  934,  193,  193,
      193,  193,  193,  193,  193, 1115,  193,  193,  193,  930,
      193,  839,  193,  842,  931, 1115,  932, 1115,  193,  933,
      193,  841,  840,  193,  934,  193,  193,  193,  193,  193,
      193,  193,  843,  193,  193,  193, 1115,  193,  935,  193,
      842,  936,  845,  844,  193,  193,  937,  193,  193, 1115,
      193, 1115,  193,  193,  193,  193,  193,  193,  193,  843,

      938,  193,  193,  193,  193,  935,  193,  193,  936,  845,
      844,  193,  193,  937,  193,  193,  193,  193,  846,  939,
      193,  193,  193,  193,  940,  193, 1115,  938,  193,  193,
      193,  193,  193,  193,  193,  847,  193,  941,  848, 1115,
     1115,  193,  193,  193,  942,  846,  939,  193,  193,  193,
      193,  940, 1115,  193, 1115,  193,  193,  193,  193,  193,
      193,  943,  847,  193,  941,  848,  193,  849,  850,  193,
      193,  942, 1003,  193, 1004,  193,  193, 1005,  193,  852,
      193,  851,  193,  193,  193,  193,  193,  193,  943, 1115,
      853, 1006,  193,  193,  849,  850,  193,  193,  193, 1003,

      193, 1004, 1115,  193, 1005,  193,  852,  854,  851,  193,
      193,  193,  193,  193,  193, 1115,  193,  853, 1006,  193,
      193, 1007,  193,  193,  193,  193,  193,  193,  193,  855,
      193, 1115,  857, 1008,  854,  856,  193,  193,  193,  193,
     1009,  193,  193,  193,  193, 1115, 1010,  193, 1007,  193,
     1011,  193, 1115,  193,  193,  193,  855,  193,  863,  857,
     1008,  193,  856,  193,  193,  193,  858, 1009,  193,  193,
      193,  193,  859, 1010,  193,  193,  193, 1011,  193,  193,
      193,  193,  193,  860,  193,  863, 1012, 1013,  193, 1014,
      193,  861,  193,  858, 1015,  193,  193,  193,  193,  859,

      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      860, 1016, 1017, 1012, 1013,  862, 1014,  193,  861, 1115,
      193, 1015,  193,  193,  193,  193,  193,  193,  193, 1115,
      193,  193,  864, 1115,  866,  865,  193, 1115, 1016, 1017,
      193, 1115,  862, 1115,  193,  193,  193,  193,  868,  193,
     1115,  193,  193,  193, 1018,  193,  193,  193, 1019,  864,
      193,  866,  865,  193,  869,  193, 1020,  193,  193, 1115,
      193,  193,  193,  193,  193,  868,  193,  867,  870,  193,
      193, 1018,  193,  193, 1021, 1019, 1022,  193, 1023, 1115,
      193,  869,  193, 1020, 1024,  193,  193,  193,  193,  193,

      193,  193, 1025,  193,  867,  870,  871,  193,  193,  193,
     1026, 1021,  193, 1022, 1027, 1023,  193,  193,  193,  193,
      193, 1024,  193,  193,  873,  193,  193,  193,  193, 1025,
      193, 1115,  872,  871, 1115,  193, 1028, 1026,  193,  193,
      193, 1027, 1115,  193,  193,  193,  193,  193,  193,  193,
      193,  873,  193,  193,  193,  193,  193,  193,  874,  872,
      875,  876,  193, 1028,  193,  193,  193,  193, 1029,  877,
      193,  193,  193,  193, 1030,  193, 1115,  193, 1031,  193,
      193,  193,  193,  193,  193,  874,  878,  875,  876,  193,
      193,  193, 1115,  193,  193, 1029,  877,  193, 1032,  193,

      193, 1030,  193,  193,  880, 1031,  193,  193,  881,  193,
      193, 1115,  193,  878, 1033, 1115,  193,  193,  879,  882,
      193,  193,  193,  193, 1034, 1032, 1115, 1067,  193,  193,
      193,  880, 1068,  193,  193,  881,  193,  193,  193,  193,
      193, 1033,  193,  193,  193,  879,  882,  193,  193,  193,
      193, 1034,  193,  884, 1067,  193,  883,  193,  193, 1068,
      193, 1069,  193,  193, 1070,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193, 1115, 1071,  193,
      884, 1115,  193,  883,  193,  193, 1072,  193, 1069,  193,
      193, 1070,  193,  193,  193,  193, 1115,  193,  193,  193,

      193,  193,  193,  193,  193, 1071,  193,  945,  193,  193,
     1073,  193,  193, 1072,  193, 1074,  193,  193, 1075,  193,
     1115,  193,  193,  944,  193,  193,  946,  193, 1115,  193,
      193,  193,  193,  193,  945,  193, 1076, 1073,  193,  193,
      193,  193, 1074,  193,  193, 1075,  193,  948,  193,  193,
      944,  193,  193,  946,  193,  947, 1077,  193, 1078,  193,
      193,  193, 1115, 1076, 1115,  193, 1115,  193,  193, 1115,
      949,  193, 1115,  193,  948,  193,  193, 1079, 1080,  193,
      193,  193,  947, 1077, 1115, 1078,  952,  193,  193,  193,
      193,  950,  193,  193,  193,  193,  193,  949,  193,  951,

     1095, 1115, 1096,  193, 1079, 1080,  193,  193,  193,  193,
     1097,  193, 1115,  952,  193,  953,  193,  193,  950, 1115,
      193,  193, 1115,  193,  193,  193,  951, 1095,  193, 1096,
     1098,  193, 1115,  193,  954, 1099,  193, 1097,  193,  193,
     1115,  193,  953,  193,  193,  956,  955, 1100,  193,  193,
     1107,  193,  193, 1115, 1115,  193, 1115, 1098,  193,  193,
      193,  954, 1099,  193,  957,  193,  193,  193,  193, 1115,
      193,  193,  956,  955, 1100,  193,  193, 1107,  958,  193,
      193,  960, 1108,  193,  193,  193,  193,  193,  193, 1115,
      193,  957,  193,  959,  193,  193,  961, 1109,  193,  193,

      193,  193,  193,  193,  193,  958, 1115,  193,  960, 1108,
      193,  193,  193,  962,  963,  193,  193, 1113,  193,  193,
      959, 1115, 1115,  961, 1109,  193,  193,  193,  193,  193,
      193,  193,  193,  193, 1115,  193,  965,  193,  193,  193,
      962,  963,  193,  193, 1113,  193,  193,  964,  966, 1115,
      193, 1115,  193,  193,  193,  193, 1115, 1115,  193,  193,
      193, 1115,  193,  965,  193,  193,  193,  193,  193,  193,
      193,  193,  193, 1115,  964,  966, 1115,  193, 1115,  193,
      193,  193,  193,  967, 1115,  193,  193,  193,  193, 1115,
      193, 1115,  193,  968,  193,  193,  193,  193,  193,  193,

     1115,  193, 1115,  969,  193,  193,  193,  193,  193, 1115,
      967,  193,  193,  193,  193,  193, 1115,  193, 1115,  193,
      968,  193,  970,  193,  193,  193, 1115,  193,  193,  193,
      969,  193,  193,  193,  193,  193, 1115,  972,  193,  193,
      193,  193, 1115, 1115,  193,  193, 1115, 1115,  193,  970,
     1115,  193,  193, 1115,  193,  971,  193,  193,  193,  193,
      193, 1115,  193,  193,  972,  974, 1115,  193,  193, 1115,
     1115,  193,  193,  973, 1115, 1115,  193,  193,  193,  193,
      193,  193,  971, 1115,  193,  193,  193,  193, 1115,  193,
      193,  193,  974, 1115,  193,  193,  193,  193,  193, 1115,

      973, 1115, 1115,  193,  193,  193,  193,  193,  193,  975,
     1115,  193,  193,  193,  193, 1115,  193, 1115,  193, 1115,
     1115,  193,  193,  193,  193,  193,  976,  193, 1115,  193,
      193,  193,  193, 1115,  193, 1115,  975, 1115,  193,  193,
      193,  193,  193,  193, 1115,  977,  193,  193,  193, 1115,
      193,  193,  193,  976,  193,  193,  193,  193,  193,  193,
      979,  193,  193,  978,  193, 1115, 1115, 1115,  193,  193,
     1115,  193,  977,  193,  193,  193, 1115,  193,  193,  193,
      193,  193,  193, 1115,  193,  193, 1115,  979,  193,  193,
      978,  193, 1115, 1115,  980,  193,  982,  981,  193,  193,

      193,  193,  193,  983,  193, 1115,  193,  193,  193, 1115,
      984,  193,  193, 1115,  193,  193,  193, 1115,  193,  193,
     1115,  980,  193,  982,  981, 1115,  193,  193,  193,  193,
      983,  193,  985,  193,  193,  193,  193,  984,  193,  193,
      193,  193,  988,  193, 1115,  193,  193,  986,  193,  193,
      987, 1115,  193, 1115, 1115,  193,  193, 1115,  193,  985,
     1115,  193,  193,  193, 1115,  193,  193,  193,  193,  988,
     1115,  989,  193, 1115,  986,  193,  193,  987, 1115,  193,
      990, 1115,  193,  193,  193,  193,  193, 1115,  193,  193,
      193, 1115,  193,  193, 1115,  193, 1115, 1115,  989,  193,

      991, 1115,  992,  193,  193, 1115,  193,  990,  193,  193,
     1115,  193,  193,  193, 1115,  193,  193,  193,  995,  193,
      193,  193,  193,  993, 1115,  193,  193,  991,  193,  992,
      994,  193, 1115,  193,  193,  193,  193, 1115,  193,  193,
     1115,  193,  193,  996, 1115,  995, 1115,  193,  193,  193,
      993,  193,  193,  193,  193,  193,  997,  994,  998,  193,
      193,  193,  999,  193, 1115,  193,  193,  193,  193,  193,
      996,  193, 1115, 1115,  193,  193,  193, 1115,  193,  193,
     1001,  193,  193,  997,  193,  998,  193,  193,  193,  999,
      193,  193, 1115,  193,  193, 1115,  193, 1002,  193, 1115,

      193,  193,  193,  193,  193,  193,  193, 1001, 1115,  193,
     1000,  193, 1115,  193, 1115,  193,  193,  193,  193, 1115,
     1115,  193, 1035,  193, 1002,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193, 1115, 1115, 1000, 1115, 1036,
      193, 1115,  193,  193,  193,  193, 1115,  193,  193, 1035,
      193,  193,  193,  193, 1115, 1037,  193,  193, 1115,  193,
      193,  193, 1115, 1115,  193, 1115, 1036,  193,  193,  193,
     1115, 1115,  193, 1115,  193,  193,  193,  193,  193,  193,
      193,  193, 1037,  193,  193,  193,  193, 1115, 1039,  193,
     1038,  193, 1115,  193,  193,  193,  193, 1040, 1115,  193,

     1115,  193,  193,  193, 1115, 1115,  193,  193,  193,  193,
      193,  193,  193, 1115, 1115, 1039,  193, 1038,  193, 1041,
      193,  193,  193,  193, 1040,  193,  193,  193,  193, 1115,
      193,  193, 1043, 1042,  193,  193,  193, 1115,  193,  193,
     1115,  193, 1115, 1115, 1115,  193, 1041,  193,  193,  193,
      193, 1115,  193, 1115,  193,  193, 1115,  193,  193, 1043,
     1042,  193,  193, 1115, 1115,  193,  193, 1044,  193,  193,
     1115,  193,  193,  193,  193,  193,  193,  193, 1115, 1115,
     1115,  193,  193, 1115, 1045,  193,  193, 1115,  193,  193,
      193,  193,  193, 1115, 1044, 1115,  193, 1115,  193,  193,

      193,  193,  193,  193,  193,  193,  193, 1115,  193,  193,
     1115, 1045,  193,  193, 1046,  193,  193,  193,  193,  193,
      193, 1115,  193,  193,  193,  193,  193,  193,  193, 1115,
     1115,  193,  193,  193, 1115, 1047,  193, 1115, 1115, 1115,
      193, 1046,  193,  193,  193, 1115, 1115,  193,  193,  193,
      193,  193,  193,  193,  193, 1115,  193,  193, 1115,  193,
      193,  193, 1047,  193,  193, 1115, 1115,  193, 1115,  193,
      193,  193, 1048, 1115, 1049,  193,  193,  193,  193,  193,
     1115, 1115, 1115,  193,  193, 1115,  193,  193,  193,  193,
      193,  193,  193,  193,  193, 1115,  193, 1115, 1115, 1048,

     1115, 1049, 1115,  193,  193,  193,  193,  193, 1115,  193,
     1115,  193,  193,  193, 1050, 1115,  193,  193, 1051,  193,
      193,  193,  193,  193, 1115, 1115,  193,  193,  193, 1115,
     1115, 1053,  193,  193,  193,  193,  193, 1115,  193,  193,
      193, 1050,  193, 1052,  193, 1051,  193, 1115,  193,  193,
      193,  193,  193,  193,  193,  193,  193, 1115, 1053,  193,
      193, 1115,  193, 1115,  193, 1055, 1054,  193,  193,  193,
     1052,  193,  193,  193, 1056,  193,  193,  193,  193,  193,
      193, 1115, 1115,  193,  193,  193,  193,  193, 1115,  193,
      193,  193, 1055, 1054,  193,  193,  193, 1115,  193,  193,

     1057, 1056, 1115,  193, 1115,  193,  193,  193, 1115, 1115,
     1115,  193,  193,  193,  193,  193,  193,  193,  193,  193,
     1115,  193,  193,  193, 1058,  193, 1115, 1057, 1059, 1115,
      193, 1115,  193,  193,  193,  193, 1060, 1115,  193, 1115,
      193,  193,  193, 1115,  193,  193,  193, 1115,  193,  193,
      193, 1058,  193, 1115, 1115, 1059, 1115,  193, 1115, 1115,
      193,  193,  193, 1060, 1115,  193, 1061,  193,  193,  193,
      193,  193, 1115,  193,  193, 1115, 1063,  193,  193,  193,
     1115, 1115,  193,  193, 1062, 1115, 1115,  193,  193,  193,
      193, 1115,  193, 1061, 1064, 1115,  193,  193,  193,  193,

      193,  193, 1115, 1063, 1115,  193,  193, 1115,  193,  193,
      193, 1062, 1115, 1115,  193,  193,  193,  193,  193,  193,
      193, 1064, 1115,  193,  193,  193,  193,  193, 1115,  193,
     1115, 1115,  193,  193,  193,  193,  193, 1115, 1115, 1066,
      193,  193, 1065,  193,  193,  193, 1115,  193,  193,  193,
      193,  193,  193,  193,  193, 1115,  193,  193,  193,  193,
      193,  193,  193,  193,  193, 1115, 1066,  193,  193, 1065,
      193,  193,  193,  193, 1115,  193,  193,  193,  193,  193,
      193,  193, 1081, 1115,  193,  193,  193, 1115,  193,  193,
     1082,  193,  193, 1115,  193,  193,  193,  193,  193,  193,

      193, 1115,  193, 1115,  193,  193, 1083,  193,  193, 1081,
      193,  193,  193,  193,  193,  193,  193, 1082, 1115,  193,
      193,  193, 1084,  193,  193,  193,  193,  193,  193,  193,
     1115,  193,  193, 1083,  193,  193,  193,  193,  193,  193,
      193,  193, 1115,  193,  193, 1115, 1115,  193,  193, 1084,
     1085,  193,  193,  193,  193,  193,  193, 1115,  193,  193,
      193,  193,  193,  193, 1087,  193,  193,  193,  193,  193,
      193,  193,  193,  193, 1115,  193, 1115, 1085,  193,  193,
     1115,  193, 1086,  193,  193, 1115,  193,  193,  193,  193,
      193, 1087,  193,  193,  193,  193,  193,  193, 1115,  193,

      193, 1115,  193,  193, 1115, 1115,  193,  193,  193, 1086,
      193,  193, 1115,  193, 1115,  193,  193,  193, 1088,  193,
      193,  193,  193,  193,  193, 1115, 1089, 1115,  193,  193,
      193, 1115,  193,  193,  193,  193, 1115,  193, 1115, 1115,
      193, 1115,  193, 1090, 1115, 1088,  193,  193,  193,  193,
      193,  193,  193, 1089,  193,  193,  193, 1115,  193,  193,
      193, 1115,  193, 1115,  193, 1091, 1115,  193, 1092,  193,
     1090, 1115,  193,  193,  193,  193, 1115, 1115, 1094,  193,
      193,  193,  193,  193, 1093,  193,  193,  193, 1115,  193,
      193,  193, 1091, 1115, 1115, 1092,  193, 1115,  193,  193,

      193,  193, 1115, 1115,  193, 1094,  193,  193,  193,  193,
      193, 1093, 1115,  193,  193, 1115,  193,  193,  193,  193,
     1115, 1115,  193,  193,  193,  193, 1115, 1115,  193, 1115,
      193,  193,  193,  193, 1101,  193, 1115,  193,  193,  193,
      193,  193, 1115,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193, 1115, 1115,  193,  193,  193, 1102,  193,
      193, 1101, 1115,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193, 1115, 1103,  193,  193,
     1115, 1115,  193,  193,  193, 1102, 1115,  193,  193,  193,
      193,  193,  193, 1115, 1115,  193,  193,  193,  193,  193,

      193, 1106,  193,  193, 1103,  193,  193,  193, 1104,  193,
     1115,  193, 1115, 1105, 1115,  193,  193,  193, 1115,  193,
     1115, 1115,  193,  193,  193,  193, 1115, 1110, 1106,  193,
      193,  193,  193,  193,  193, 1104,  193,  193, 1115, 1115,
     1105,  193,  193, 1115,  193, 1115,  193,  193, 1115,  193,
      193, 1111,  193, 1115, 1110, 1115,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193, 1115,  193,  193,
      193, 1112, 1115,  193,  193, 1115,  193, 1115, 1111,  193,
     1115,  193, 1115,  193,  193, 1115,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193, 1115,  193, 1112, 1115,

     1114, 1115, 1115,  193, 1115,  193, 1115, 1115,  193,  193,
      193,  193, 1115,  193, 1115, 1115, 1115,  193,  193, 1115,
     1115,  193,  193, 1115, 1115,  193, 1115, 1114, 1115, 1115,
     1115, 1115,  193, 1115, 1115, 1115,  193,  193,  193, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115,  193,   46,   46,   46,   46,   46,   88, 1115,
     1115,   88,   88,  179,  179,  179, 1115,  179,  181, 1115,
      181,  181,  181,  184, 1115,  184,  184,  184,  193, 1115,
      193,  193,  193,    7, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,

     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115
    } ;

static const flex_int16_t yy_chk[5852] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   15, 1118,
       15,   17,   17,   18,   18,   21,   22,   21,   49,   49,
       22,   23,   30,   21,  390,   21,   31,  276,   23,   21,
       21,   44,   50,   50,  188,   23,   22,   24,   23,  187,
       27,   24,   21,   22,   21,   24,   27,   22,   23,   30,
       21,   24,   21,   31,   24,   23,   21,   21,   44,   25,
       98,   25,   23,   22,   24,   23,   25,   27,   24,   43,

       43,   25,   24,   27,  184,   32,   28,   92,   24,   32,
       55,   24,   55,   91,   28,   32,   25,   98,   25,   88,
       28,   57,   57,   25,   58,   58,   43,   43,   25,   26,
       86,   86,   32,   28,   34,   33,   32,   26,   99,   33,
       26,   28,   32,   26,   29,   33,   26,   28,   34,   26,
       29,   29,   29,   85,   34,   34,   26,   29,   60,   38,
      102,   34,   33,   38,   26,   99,   33,   26,   59,   38,
       26,   29,   33,   26,   36,   34,   26,   29,   29,   29,
       35,   34,   34,  103,   29,   36,   38,  102,   35,  105,
       38,   36,   35,   90,   90,   35,   38,   41,   56,   41,

       71,   36,   41,   42,   71,  182,  182,   35,  186,  186,
      103,   42,   36,  100,  101,   35,  105,  101,   36,   35,
       71,  100,   35,   39,   41,   39,   41,   71,   39,   41,
       42,   71,   67,   39,   52,   39,   39,   51,   42,   67,
      100,  101,  108,   67,  101,   47,   67,   71,  100,   67,
       39,   45,   39,  114,   20,   39,  115,   72,  107,   67,
       39,   72,   39,   39,   40,  107,   67,   72,   40,  108,
       67,   40,   40,   67,  111,  116,   67,   72,   40,  111,
      114,   40,   19,  115,   72,  107,   16,   11,   72,    7,
        4,   40,  107,    3,   72,   40,    0,    0,   40,   40,

        0,  111,  116,   77,   72,   40,  111,   77,   40,   61,
       61,    0,   61,   61,   61,   61,   61,   61,   82,   61,
       61,   61,   82,   77,   68,   61,   82,   61,  117,   70,
       77,   68,   68,   61,   77,   61,   70,  110,   68,   61,
       61,   68,   82,   70,  118,   82,   70,  110,    0,   82,
       77,   68,   61,   82,   61,  117,   70,    0,   68,   68,
       61,    0,   61,   70,  110,   68,   61,   61,   68,   82,
       70,  118,    0,   70,  110,   61,   62,   62,    0,   62,
       62,   62,   62,   62,   62,   73,   62,   62,   62,   73,
       78,    0,   76,   62,   78,   73,  120,   62,   83,   76,

       78,   83,   83,   76,  121,   73,   76,  122,    0,   76,
       78,  123,   73,   62,  124,    0,   73,   78,   83,   76,
       62,   78,   73,  120,   62,   83,   76,   78,   83,   83,
       76,  121,   73,   76,  122,   84,   76,   78,  123,   84,
       62,  124,   62,   63,  125,   83,  126,   63,  113,  113,
       63,   63,   81,  127,   81,   84,   81,   63,  129,   81,
       63,    0,   84,    0,   81,  130,   84,   63,    0,    0,
       63,  125,    0,  126,   63,  113,  113,   63,   63,   81,
      127,   81,   84,   81,   63,  129,   81,   63,  104,  104,
      128,   81,  130,  128,   63,   64,  109,  109,  109,   64,

      109,  132,  104,   64,  133,    0,  135,  136,  137,   64,
        0,  138,   64,  141,  142,  104,  104,  128,  143,   64,
      128,  144,   64,  109,  109,  109,   64,  109,  132,  104,
       64,  133,  112,  135,  136,  137,   64,  112,  138,   64,
      141,  142,  139,  112,  139,  143,   64,   65,  144,  145,
      112,   65,  146,  147,   65,  148,   65,    0,  150,  112,
      151,   65,    0,    0,  112,  152,   65,   65,    0,  139,
      112,  139,    0,  153,   65,    0,  145,  112,   65,  146,
      147,   65,  148,   65,  119,  150,  119,  151,   65,  134,
      119,    0,  152,   65,   65,   66,  156,  119,    0,  134,

      153,  119,   66,   66,  134,  134,   66,  157,  140,   66,
      140,  119,   66,  119,  154,   66,  134,  119,  154,  158,
      155,  140,   66,  156,  119,  155,  134,    0,  119,   66,
       66,  134,  134,   66,  157,  140,   66,  140,  160,   66,
      161,  154,   66,   69,    0,  154,  158,  155,  140,   69,
       69,   69,  155,  162,  159,  163,   69,  164,  166,  167,
      167,   69,    0,  159,  165,  160,  168,  161,  171,    0,
       69,  159,  169,  172,    0,  165,   69,   69,   69,    0,
      162,  159,  163,   69,  164,  166,  167,  167,   69,   74,
      159,  165,  169,  168,  170,  171,   74,  170,  159,  169,

      172,  173,  165,   74,  174,  175,   74,  173,  176,   74,
       74,    0,  177,  278,  280,    0,   74,  174,    0,  169,
      281,  170,  193,   74,  170,    0,  193,  283,  173,  285,
       74,  174,  175,   74,  173,  176,   74,   74,   75,  177,
      278,  280,  193,   75,  174,   75,  201,  281,  201,  193,
      201,   75,   75,  193,  283,   75,  285,    0,   75,    0,
      286,    0,  194,  194,    0,   75,  201,  194,    0,  193,
       75,    0,   75,  201,  287,  201,  288,  201,   75,   75,
      195,    0,   75,  194,  195,   75,   79,  286,   79,  194,
      194,   79,   79,  201,  194,  195,   79,  289,   79,   79,

      195,  287,  291,  288,  292,    0,  293,  195,   79,    0,
      194,  195,  294,   79,    0,   79,    0,    0,   79,   79,
        0,    0,  195,   79,  289,   79,   79,  195,    0,  291,
      290,  292,  290,  293,  196,   79,   80,  295,  196,  294,
       80,  196,  198,   80,   80,    0,  198,  290,  197,  196,
       80,  197,  197,   80,  196,  198,  197,  290,  296,  290,
      297,  196,  198,   80,  295,  196,    0,   80,  196,  198,
       80,   80,  197,  198,  290,  197,  196,   80,  197,  197,
       80,  196,  198,  197,  199,  296,  199,  297,  298,  198,
      199,  203,  202,  203,    0,  300,  202,  204,  203,  197,

      301,  204,    0,  203,  303,  204,  199,    0,    0,    0,
      304,  199,  202,  199,  302,  298,  305,  199,  203,  202,
      203,  204,  300,  202,  204,  203,  306,  301,  204,  302,
      203,  303,  204,  199,  200,  200,  200,  304,  200,  202,
      206,  302,  307,  305,  206,    0,    0,    0,  204,  200,
      206,    0,  308,  306,  200,    0,  302,    0,    0,    0,
      206,  200,  200,  200,  310,  200,  209,  206,  209,  307,
      207,  206,  209,  209,  207,  311,  200,  206,  209,  308,
        0,  200,  205,  205,  205,  207,  205,  206,  312,  205,
      207,  310,    0,  209,  205,  209,    0,  207,  313,  209,

      209,  207,  311,  210,  314,  209,    0,  210,    0,  205,
      205,  205,  207,  205,    0,  312,  205,  207,    0,  210,
        0,  205,  208,  210,    0,  313,  315,  208,  211,  316,
      210,  314,  211,  208,  210,  208,    0,  212,  211,  317,
      208,  212,  213,  213,    0,  208,  210,  213,  211,  208,
      210,  212,    0,  315,  208,  211,  316,  212,    0,  211,
      208,    0,  208,  213,  212,  211,  317,  208,  212,  213,
      213,  214,  208,  214,  213,  211,  318,  214,  212,  216,
      231,  217,  231,  216,  212,  217,  216,  231,  217,  319,
      213,  320,  231,  214,    0,  321,    0,  322,  214,  216,

      214,  217,    0,  318,  214,  323,  216,  231,  217,  231,
      216,    0,  217,  216,  231,  217,  319,  324,  320,  231,
      214,  215,  321,  215,  322,  218,  216,  215,  217,  218,
        0,  325,  323,  219,  215,  218,    0,  219,  215,    0,
        0,  326,  327,  215,  324,  218,  219,  220,  215,  328,
      215,  220,  218,  219,  215,  329,  218,  220,  325,  221,
      219,  215,  218,  221,  219,  215,  221,  220,  326,  327,
      215,  222,  218,  219,  220,  222,  328,  330,  220,  221,
      219,  222,  329,  224,  220,  223,  221,  224,    0,  223,
      221,  222,    0,  221,  220,  223,    0,  224,  222,  331,

      224,  332,  222,  224,  330,  223,  221,  334,  222,  226,
      224,  225,  223,  226,  224,  225,  223,  227,  222,  228,
      225,  227,  223,  228,  224,  226,  331,  224,  332,  226,
      224,  225,  223,    0,  334,  335,  226,  227,  225,  228,
      226,  232,  225,  337,  227,  232,  228,  225,  227,  229,
      228,  233,  226,  229,  338,  233,  226,  339,  225,  235,
      229,  232,  335,  235,  227,  235,  228,  235,  232,  229,
      337,  233,  232,  234,  234,  340,  229,  234,  233,  235,
      229,  338,  233,    0,  339,    0,  235,  229,  232,  341,
      235,  342,  235,  234,  235,  237,  229,  230,  233,  237,

      234,  234,  340,    0,  234,  230,  235,  230,  237,  343,
      238,  344,  230,  230,  238,  237,  341,  230,  342,  238,
      234,    0,  237,    0,  230,    0,  237,    0,    0,  345,
      238,    0,  230,  346,  230,  237,  343,  238,  344,  230,
      230,  238,  237,    0,  230,  236,  238,  236,  240,  236,
      239,  241,  240,  236,  239,  241,  345,  238,  236,  239,
      346,    0,  348,  240,    0,  349,  241,  350,  240,  236,
      239,  241,  236,  333,  236,  240,  236,  239,  241,  240,
      236,  239,  241,  333,  242,  236,  239,  351,  242,  348,
      240,  242,  349,  241,  350,  240,  236,  239,  241,  243,

      333,  244,  244,  243,  242,  244,    0,  243,  352,    0,
      333,  242,    0,  245,  351,  242,    0,  245,  242,  353,
        0,  244,  354,  243,    0,    0,  243,  355,  244,  244,
      243,  242,  244,  245,  243,  352,  246,  246,  247,  248,
      245,  246,  247,  248,  245,    0,  353,  249,  244,  354,
      243,  249,  248,  247,  355,  249,    0,  246,  247,  248,
      245,    0,    0,  246,  246,  247,  248,  356,  246,  247,
      248,  249,  250,  357,  249,    0,  250,    0,  249,  248,
      247,  251,  249,  251,  246,  247,  248,  252,  251,  252,
        0,  252,  250,  251,  356,    0,  358,  253,  249,  250,

      357,  253,  254,  250,  253,  254,  254,  252,  251,    0,
      251,    0,  359,  360,  252,  251,  252,  253,  252,  250,
      251,  361,  254,  358,  253,    0,  256,  362,  253,  254,
      256,  253,  254,  254,  252,  260,  256,    0,  260,  359,
      360,    0,  260,  363,  253,    0,  256,  257,  361,  254,
      255,  257,  255,  256,  362,  257,  255,  256,  260,  255,
      259,    0,  260,  256,  259,  260,    0,  255,  259,  260,
      363,  257,  255,  256,  257,  365,  258,  255,  257,  255,
      258,    0,  257,  255,  259,  260,  255,  259,  262,  258,
        0,  259,  262,  261,  255,  259,  258,  261,  257,  255,

        0,  261,  365,  258,    0,  366,  367,  258,  262,  368,
        0,  259,  261,  261,  369,  262,  258,  263,  264,  262,
      261,  263,  264,  258,  261,  263,  263,  266,  261,  264,
      370,  266,  366,  367,  266,  262,  368,  263,  264,  261,
      261,  369,  265,  371,  263,  264,  265,  266,  263,  264,
      265,  268,  263,  263,  266,  268,  264,  370,  266,  372,
        0,  266,  265,    0,  263,  264,  265,  267,  267,  265,
      371,  268,  267,  265,  266,  373,    0,  265,  268,  374,
      376,  271,  268,  269,  379,  271,  372,  269,  267,  265,
      269,    0,    0,  265,  267,  267,  269,  380,  268,  267,

      270,  271,  373,  269,  270,  381,  374,  376,  271,  382,
      269,  379,  271,  270,  269,  267,    0,  269,  272,  378,
      270,  378,  272,  269,  380,  377,  383,  270,  271,  384,
      269,  270,  381,  272,  377,  273,  382,  385,  272,  273,
      270,  387,  388,  273,    0,  272,  378,  270,  378,  272,
      386,  391,  377,  383,  386,  391,  384,    0,    0,  273,
      272,  377,  273,  392,  385,  272,  273,  392,  387,  388,
      273,  391,  393,    0,    0,  394,  393,  386,  391,  394,
      395,  386,  391,  392,  395,  396,  273,  395,  503,  396,
      392,  504,  393,  397,  392,  394,  505,  397,  391,  393,

      395,  397,  394,  393,    0,  396,  394,  395,    0,  398,
      392,  395,  396,  398,  395,  503,  396,  397,  504,  393,
      397,  399,  394,  505,  397,  399,  400,  395,  397,  398,
      400,  399,  396,    0,    0,  402,  398,    0,  506,  402,
      398,  399,  507,  401,  397,  508,  400,  401,  399,  509,
        0,  510,  399,  400,    0,  402,  398,  400,  399,  512,
      403,  401,  402,  401,  403,  506,  402,  403,  399,  507,
      401,    0,  508,  400,  401,  404,  509,  404,  510,  406,
      403,  404,  402,  406,  516,  405,  512,  403,  401,  405,
      401,  403,  404,  517,  403,  406,    0,  404,  405,  406,

        0,  518,  404,  520,  404,  405,  406,  403,  404,  407,
      406,  516,  405,  407,  409,  521,  405,  407,  409,  404,
      517,    0,  406,  408,  404,  405,  406,  408,  518,  407,
      520,  410,  405,  411,  409,  410,  407,  411,  408,  410,
      407,  409,  521,  408,  407,  409,    0,  411,  412,    0,
      408,  522,  412,  411,  408,  410,  407,  523,  410,  524,
      411,  409,  410,  413,  411,  408,  410,  413,  412,  414,
      408,  525,  526,  414,  411,  412,  414,  415,  522,  412,
      411,  415,  410,  413,  523,  415,  524,  416,    0,  414,
      413,  416,  527,  418,  413,  412,  414,  418,  525,  526,

      414,  415,  416,  414,  415,    0,  528,  416,  415,  417,
      413,  417,  415,  418,  416,  417,  414,  419,  416,  527,
      418,  419,  529,  420,  418,    0,  420,  530,  415,  416,
      420,  417,  419,  528,  416,  422,  417,  419,  417,  422,
      418,  421,  417,  423,  419,  421,  420,  423,  419,  529,
      420,    0,  421,  420,  530,  422,  425,  420,  417,  419,
      425,  421,  422,  423,  419,  533,  422,  424,  421,    0,
      423,  424,  421,  420,  423,  424,  425,  534,  426,  421,
      426,  427,  422,  425,  426,  427,  535,  425,  421,  428,
      423,  424,  533,  428,  424,  427,  428,  536,  424,    0,

      426,  427,  424,  425,  534,  426,  429,  426,  427,  428,
      429,  426,  427,  535,    0,    0,  428,  537,  424,  429,
      428,  430,  427,  428,  536,  430,  429,  426,  427,    0,
      431,    0,    0,  429,  431,  430,  428,  429,  435,  432,
      538,  430,  435,  432,  537,  435,  429,  432,  430,    0,
      431,  433,  430,  429,    0,  433,  434,  431,  435,  433,
      434,  431,  430,  432,  434,  435,  432,  538,  430,  435,
      432,  433,  435,  539,  432,  541,  434,  431,  433,    0,
      542,  436,  433,  434,  436,  435,  433,  434,  436,  437,
      432,  434,  438,  437,    0,  438,  438,  439,  433,    0,

      539,  439,  541,  434,  436,  437,  440,  542,  436,  437,
      440,  436,  438,  545,  441,  436,  437,  439,  441,  438,
      437,  440,  438,  438,  439,    0,  440,  441,  439,  546,
      548,  436,  437,  440,  441,    0,  437,  440,  551,  438,
      545,  441,  443,  442,  439,  441,  443,  442,  440,  442,
        0,  444,  443,  440,  441,  444,  546,  548,  552,  553,
      445,  441,  443,  442,  445,  551,    0,  554,  446,  443,
      442,  444,  446,  443,  442,    0,  442,  448,  444,  443,
      445,  448,  444,    0,  555,  552,  553,  445,  446,  443,
      442,  445,  447,  448,  554,  446,  447,  448,  444,  446,

        0,  449,  447,    0,  448,  449,    0,  445,  448,  558,
      449,  555,  447,  450,    0,  446,  562,  450,  452,  447,
      448,  449,  452,  447,  448,  564,  451,  453,  449,  447,
      451,  453,  449,  450,  566,  568,  558,  449,  452,  447,
      450,  451,    0,  562,  450,  452,  451,  453,  449,  452,
      454,  454,  564,  451,  453,  454,    0,  451,  453,  455,
      450,  566,  568,  455,    0,  452,    0,  455,  451,  556,
      569,  454,  458,  451,  453,  571,  458,  454,  454,  572,
      556,  573,  454,  455,    0,  456,  455,  456,  458,  456,
      455,  457,  458,  457,  455,  457,  556,  569,  454,  458,

        0,  574,  571,  458,  575,  456,  572,  556,  573,  459,
      455,  457,  456,  459,  456,  458,  456,  460,  457,  458,
      457,  460,  457,  461,  459,  577,    0,  461,  574,  459,
        0,  575,  456,  460,  578,  462,  459,  460,  457,  462,
      459,  579,  462,  461,  460,  463,    0,  580,  460,  463,
      461,  459,  577,  464,  461,  462,  459,  464,  463,  465,
      460,  578,  462,  465,  460,  463,  462,  464,  579,  462,
      461,  466,  463,  464,  580,  466,  463,    0,    0,  465,
      464,    0,  462,  581,  464,  463,  465,  582,    0,  467,
      465,  466,  463,  467,  464,  468,    0,  467,  466,  468,

      464,  469,  466,  470,  468,  469,  465,  470,  567,  567,
      581,  470,  469,  467,  582,  468,  467,    0,  466,  583,
      467,  469,  468,  470,  467,  471,  468,  584,  469,  471,
      470,  468,  469,  471,  470,  567,  567,  585,  470,  469,
      467,  473,  468,  472,  473,  473,  583,  472,  469,  471,
      470,  587,  471,  475,  584,  474,  471,  475,  472,  474,
      471,  473,  474,  472,  585,  588,  589,  590,  473,  591,
      472,  473,  473,  475,  472,  474,  471,  476,  587,  477,
      475,  476,  474,  477,  475,  472,  474,  476,  473,  474,
      472,  478,  588,  589,  590,  478,  591,  476,  594,  477,

      475,  479,  474,    0,  476,  479,  477,    0,  476,  480,
      477,  478,  595,  480,  476,    0,  480,    0,  478,  479,
        0,  479,  478,    0,  476,  594,  477,  481,  479,  480,
      482,  481,  479,  484,  482,    0,  480,  484,  478,  595,
      480,  596,  481,  480,  484,  482,  479,  481,  479,  598,
      482,    0,  599,  484,  481,  483,  480,  482,  481,  483,
      484,  482,  483,  485,  484,  600,    0,  485,  596,  481,
      601,  484,  482,    0,  481,  483,  598,  482,  485,  599,
      484,  487,  483,  485,  486,  487,  483,  488,  486,  483,
      485,  488,  600,  486,  485,    0,  489,  601,    0,  602,

      489,  487,  483,    0,  486,  485,    0,  488,  487,  603,
      485,  486,  487,  490,  488,  486,  489,  490,  488,    0,
      486,  491,  490,  489,  604,  491,  602,  489,  487,  605,
      491,  486,    0,  490,  488,  492,  603,  607,  609,  492,
      490,  491,    0,  489,  490,  492,  494,  492,  491,  490,
      494,  604,  491,  723,  494,  492,  605,  491,    0,  493,
      490,    0,  492,  493,  607,  609,  492,  495,  491,  493,
      494,  495,  492,  494,  492,  725,  495,  494,    0,  493,
      723,  494,  492,  497,  496,  497,  493,  495,  496,  497,
      493,    0,    0,  727,  495,    0,  493,  494,  495,    0,

      496,  728,  725,  495,  496,  497,  493,    0,    0,  499,
      497,  496,  497,  499,  495,  496,  497,  498,  500,  501,
      727,  498,  501,  501,  499,  729,  500,  496,  728,  499,
      500,  496,  497,  500,  502,  498,  499,  498,  502,  501,
      499,    0,    0,  730,  498,  500,  501,  502,  498,  501,
      501,  499,  729,  500,  502,  612,  499,  500,  731,  612,
      500,  502,  498,  613,  498,  502,  501,  613,  612,  614,
      730,  732,  733,  614,  502,  612,  613,    0,    0,    0,
      735,  502,  612,  613,  615,  731,  612,    0,  615,  614,
      613,    0,    0,  616,  613,  612,  614,  616,  732,  733,

      614,    0,  612,  613,  615,  617,  616,  735,  618,  617,
      613,  615,  618,  616,  617,  615,  614,  619,  620,  621,
      616,  619,  620,  621,  616,  617,  619,  621,  618,    0,
        0,  615,  617,  616,    0,  618,  617,  619,  620,  618,
      616,  617,  736,  621,  619,  620,  621,  622,  619,  620,
      621,  622,  617,  619,  621,  618,  623,  624,  737,  738,
      623,  624,  626,  740,  619,  620,  626,  622,    0,  736,
      621,  625,    0,  741,  622,  625,  623,  624,  622,  625,
      742,  743,  626,  623,  624,  737,  738,  623,  624,  626,
      740,  625,  627,  626,  622,  628,  627,  630,  625,  628,

      741,  630,  625,  623,  624,  627,  625,  742,  743,  626,
      629,  630,  627,  744,  629,  628,  631,  630,  625,  627,
      631,  745,  628,  627,  630,  629,  628,  746,  630,  633,
      629,  631,  627,  633,    0,    0,  631,  629,  630,  627,
      744,  629,  628,  631,  630,  633,  632,  631,  745,  633,
      632,    0,  629,  632,  746,  634,  633,  629,  631,  634,
      633,  635,  637,  631,  637,  635,  632,    0,  637,  635,
      634,  747,  633,  632,  636,  634,  633,  632,  636,  638,
      632,  748,  634,  638,  637,  635,  634,  636,  635,  637,
      749,  637,  635,  632,  636,  637,  635,  634,  747,  638,

      639,  636,  634,  752,  639,  636,  638,  639,  748,  640,
      638,  637,  635,  640,  636,  641,  753,  749,    0,  641,
      639,  636,  755,    0,  757,  760,  638,  639,  642,  640,
      752,  639,  642,  643,  639,  641,  640,  643,    0,  642,
      640,  644,  641,  753,  643,  644,  641,  639,  642,  755,
      645,  757,  760,  643,  645,  642,  640,  644,  761,  642,
      643,  644,  641,  762,  643,  645,  642,  763,  644,  648,
      645,  643,  644,  648,  646,  642,    0,  645,  646,  647,
      643,  645,  646,  647,  644,  761,    0,  647,  644,  648,
      762,  649,  645,  768,  763,  649,  648,  645,  646,  770,

      648,  646,    0,  647,  650,  646,  647,  771,  650,  646,
      647,  649,  772,  651,  647,  775,  648,  651,  649,  650,
      768,  651,  649,  652,  650,  646,  770,  652,  654,  653,
      647,  650,  654,  653,  771,  650,  654,  651,  649,  772,
      651,    0,  775,  652,  651,  776,  650,  777,  651,  653,
      652,  650,  654,    0,  652,  654,  653,  655,  656,  654,
      653,  655,  656,  654,  651,    0,  778,  779,  655,    0,
      652,  657,  776,  781,  777,  657,  653,  655,  656,  654,
      657,  782,  783,  658,  655,  656,  659,  658,  655,  656,
      659,  657,  660,  778,  779,  655,  660,    0,  657,  784,

      781,  785,  657,  658,  655,  656,  659,  657,  782,  783,
      658,  661,  660,  659,  658,  661,  662,  659,  657,  660,
      662,  663,  786,  660,  661,  663,  784,  787,  785,  788,
      658,  661,  789,  659,  663,  662,  662,  790,  661,  660,
      664,  663,  661,  662,  664,    0,  666,  662,  663,  786,
      666,  661,  663,  664,  787,    0,  788,    0,  661,  789,
      664,  663,  662,  662,  790,  668,  666,  664,  663,  668,
      665,  664,  665,  666,  665,  667,    0,  666,  791,  667,
      664,  792,  667,  665,  669,  668,  793,  664,  669,    0,
      665,    0,  668,  666,  670,  667,  668,  665,  670,  665,

      795,  665,  667,  671,  669,  791,  667,  671,  792,  667,
      665,  669,  668,  793,  670,  669,  672,  665,  671,  796,
      672,  670,  667,  671,  797,  670,    0,  795,  673,  674,
      671,  669,  673,  674,  671,  673,  672,  799,  675,    0,
        0,  670,  675,  672,  800,  671,  796,  672,  673,  674,
      671,  797,    0,  676,    0,  673,  674,  676,  675,  673,
      674,  801,  673,  672,  799,  675,  678,  676,  676,  675,
      678,  800,  885,  676,  887,  673,  674,  889,  677,  678,
      676,  677,  677,  679,  676,  675,  678,  679,  801,    0,
      680,  890,  680,  678,  676,  676,  680,  678,  677,  885,

      676,  887,    0,  679,  889,  677,  678,  681,  677,  677,
      679,  681,  680,  678,  679,    0,  682,  680,  890,  680,
      682,  892,  683,  680,  684,  677,  683,  681,  684,  682,
      679,    0,  684,  894,  681,  683,  682,  685,  681,  680,
      895,  685,  683,  682,  684,    0,  896,  682,  892,  683,
      898,  684,    0,  683,  681,  684,  682,  685,  691,  684,
      894,  691,  683,  682,  685,  691,  686,  895,  685,  683,
      686,  684,  687,  896,  686,  688,  687,  898,  689,  688,
      687,  691,  689,  688,  685,  691,  900,  904,  691,  906,
      686,  689,  691,  686,  907,  688,  687,  686,  689,  687,

      690,  686,  688,  687,  690,  689,  688,  687,  691,  689,
      688,  913,  914,  900,  904,  690,  906,  686,  689,    0,
      690,  907,  688,  687,  692,  689,  693,  690,  692,    0,
      693,  690,  692,    0,  694,  693,  694,    0,  913,  914,
      694,    0,  690,    0,  692,  695,  693,  690,  697,  695,
        0,  692,  697,  693,  917,  692,  694,  693,  918,  692,
      698,  694,  693,  694,  698,  695,  920,  694,  697,    0,
      696,  692,  695,  693,  696,  697,  695,  696,  699,  697,
      698,  917,  699,  694,  921,  918,  922,  698,  924,    0,
      696,  698,  695,  920,  925,  697,  700,  696,  699,  701,

      700,  696,  926,  701,  696,  699,  700,  698,  702,  699,
      929,  921,  702,  922,  931,  924,  700,  696,  703,  701,
      704,  925,  703,  700,  704,  699,  701,  700,  702,  926,
      701,    0,  703,  700,    0,  702,  933,  929,  703,  702,
      704,  931,    0,  700,  705,  703,  701,  704,  705,  703,
      706,  704,  708,  709,  706,  702,  708,  709,  705,  703,
      707,  708,  707,  933,  705,  703,  707,  704,  934,  709,
      706,  705,  708,  709,  935,  705,    0,  706,  936,  708,
      709,  706,  707,  708,  709,  705,  710,  707,  708,  707,
      710,  705,    0,  707,  710,  934,  709,  706,  937,  708,

      709,  935,  712,  711,  712,  936,  712,  711,  713,  707,
      710,    0,  713,  710,  942,    0,  714,  710,  711,  714,
      714,  710,  712,  711,  943,  937,    0, 1008,  713,  712,
      711,  712, 1009,  712,  711,  713,  714,  710,  715,  713,
      716,  942,  715,  714,  716,  711,  714,  714,  717,  712,
      711,  943,  717,  718, 1008,  713,  716,  718,  715, 1009,
      716, 1011,  719,  714, 1012,  715,  719,  716,  717,  715,
      720,  716,  803,  718,  720,  717,  803,    0, 1017,  717,
      718,    0,  719,  716,  718,  715, 1019,  716, 1011,  719,
      720, 1012,  803,  719,  804,  717,    0,  720,  804,  803,

      718,  720,  805,  803,  806, 1017,  805,  807,  806,  719,
     1020,  807,  808, 1019,  804, 1023,  808,  720, 1024,  803,
        0,  804,  805,  805,  806,  804,  809,  807,    0,  805,
      809,  806,  808,  805,  807,  806, 1026, 1020,  807,  808,
      810,  804, 1023,  808,  810, 1024,  809,  811,  811,  805,
      805,  806,  811,  809,  807,  810, 1028,  809, 1029,  808,
      810,  812,    0, 1026,    0,  812,    0,  810,  811,    0,
      812,  810,    0,  809,  811,  811,  813, 1031, 1032,  811,
      813,  812,  810, 1028,    0, 1029,  815,  810,  812,  814,
      815,  813,  812,  814,  816,  811,  813,  812,  816,  814,

     1068,    0, 1071,  813, 1031, 1032,  815,  813,  812,  814,
     1073,  817,    0,  815,  816,  817,  814,  815,  813,    0,
      814,  816,    0,  813,  818,  816,  814, 1068,  818, 1071,
     1077,  817,    0,  815,  818, 1078,  814, 1073,  817,  819,
        0,  816,  817,  819,  818,  820,  819, 1079,  821,  820,
     1095,  818,  821,    0,    0,  818,    0, 1077,  817,  819,
      822,  818, 1078,  823,  822,  820,  819,  823,  821,    0,
      819,  818,  820,  819, 1079,  821,  820, 1095,  823,  821,
      822,  825, 1097,  823,  824,  825,  819,  822,  824,    0,
      823,  822,  820,  824,  823,  821,  826, 1100,  827,  828,

      826,  825,  827,  828,  824,  823,    0,  822,  825, 1097,
      823,  824,  825,  827,  828,  824,  826, 1109,  827,  828,
      824,    0,    0,  826, 1100,  827,  828,  826,  825,  827,
      828,  824,  830,  829,    0,  832,  830,  829,  833,  832,
      827,  828,  833,  826, 1109,  827,  828,  829,  831,    0,
      831,    0,  830,  829,  831,  832,    0,    0,  833,  830,
      829,    0,  832,  830,  829,  833,  832,  836,  834,  833,
      831,  836,  834,    0,  829,  831,    0,  831,    0,  830,
      829,  831,  832,  834,    0,  833,  835,  836,  834,    0,
      835,    0,  838,  835,  836,  834,  838,  831,  836,  834,

        0,  837,    0,  837,  840,  837,  835,  839,  840,    0,
      834,  839,  838,  835,  836,  834,    0,  835,    0,  838,
      835,  837,  839,  838,  840,  841,    0,  839,  837,  841,
      837,  840,  837,  835,  839,  840,    0,  843,  839,  838,
      842,  843,    0,    0,  842,  841,    0,    0,  837,  839,
        0,  840,  841,    0,  839,  842,  841,  843,  845,  844,
      842,    0,  845,  844,  843,  845,    0,  842,  843,    0,
        0,  842,  841,  844,    0,    0,  846,  847,  845,  844,
      846,  847,  842,    0,  843,  845,  844,  842,    0,  845,
      844,  848,  845,    0,  849,  848,  846,  847,  849,    0,

      844,    0,    0,  846,  847,  845,  844,  846,  847,  850,
        0,  848,  851,  850,  849,    0,  851,    0,  848,    0,
        0,  849,  848,  846,  847,  849,  852,  855,    0,  850,
      852,  855,  851,    0,  852,    0,  850,    0,  848,  851,
      850,  849,  853,  851,    0,  853,  853,  855,  854,    0,
      852,  856,  854,  852,  855,  856,  850,  852,  855,  851,
      857,  852,  853,  854,  857,    0,    0,    0,  854,  853,
        0,  856,  853,  853,  855,  854,    0,  852,  856,  854,
      857,  858,  856,    0,  859,  858,    0,  857,  859,  853,
      854,  857,    0,    0,  858,  854,  860,  859,  856,  861,

      860,  858,  862,  861,  859,    0,  862,  857,  858,    0,
      863,  859,  858,    0,  863,  859,  860,    0,  863,  861,
        0,  858,  862,  860,  859,    0,  861,  860,  858,  862,
      861,  859,  864,  862,  863,  866,  864,  863,  867,  866,
      864,  863,  867,  860,    0,  863,  861,  865,  865,  862,
      866,    0,  865,    0,    0,  866,  864,    0,  867,  864,
        0,  863,  866,  864,    0,  867,  866,  864,  865,  867,
        0,  868,  868,    0,  865,  865,  868,  866,    0,  865,
      869,    0,  866,  864,  869,  867,  870,    0,  869,  871,
      870,    0,  868,  871,    0,  865,    0,    0,  868,  868,

      870,    0,  871,  868,  869,    0,  870,  869,  872,  871,
        0,  869,  872,  870,    0,  869,  871,  870,  874,  868,
      871,  873,  874,  872,    0,  873,  874,  870,  872,  871,
      873,  869,    0,  870,  876,  872,  871,    0,  876,  872,
        0,  873,  874,  875,    0,  874,    0,  875,  873,  874,
      872,  875,  873,  874,  876,  872,  877,  873,  878,  878,
      877,  876,  879,  878,    0,  876,  879,  875,  873,  874,
      875,  880,    0,    0,  875,  880,  877,    0,  875,  878,
      882,  876,  879,  877,  882,  878,  878,  877,  882,  879,
      878,  880,    0,  879,  875,    0,  881,  883,  880,    0,

      881,  883,  880,  877,  882,  883,  878,  882,    0,  879,
      881,  882,    0,  884,    0,  882,  881,  884,  880,    0,
        0,  883,  944,  881,  883,  945,  944,  881,  883,  945,
      946,  882,  883,  884,  946,    0,    0,  881,    0,  946,
      884,    0,  944,  881,  884,  945,    0,  947,  883,  944,
      946,  947,  945,  944,    0,  948,  945,  946,    0,  948,
      884,  946,    0,    0,  950,    0,  946,  947,  950,  944,
        0,    0,  945,    0,  947,  948,  949,  946,  947,  952,
      949,  951,  948,  952,  950,  951,  948,    0,  951,  953,
      949,  950,    0,  953,  947,  950,  949,  953,    0,  952,

        0,  951,  948,  949,    0,    0,  952,  949,  951,  953,
      952,  950,  951,    0,    0,  951,  953,  949,  955,  954,
      953,  954,  955,  949,  953,  954,  952,  956,  951,    0,
      958,  956,  957,  955,  958,  957,  953,    0,  955,  957,
        0,  954,    0,    0,    0,  955,  954,  956,  954,  955,
      958,    0,  954,    0,  956,  957,    0,  958,  956,  957,
      955,  958,  957,    0,    0,  955,  957,  959,  954,  959,
        0,  960,  961,  959,  956,  960,  961,  958,    0,    0,
        0,  962,  957,    0,  963,  962,  964,    0,  963,  959,
      964,  960,  961,    0,  959,    0,  959,    0,  960,  961,

      959,  962,  960,  961,  963,  965,  964,    0,  962,  965,
        0,  963,  962,  964,  965,  963,  959,  964,  960,  961,
      966,    0,  967,  968,  966,  965,  967,  968,  962,    0,
        0,  963,  965,  964,    0,  966,  965,    0,    0,    0,
      966,  965,  967,  968,  969,    0,    0,  966,  969,  967,
      968,  966,  965,  967,  968,    0,  970,  971,    0,  972,
      970,  971,  966,  972,  969,    0,    0,  966,    0,  967,
      968,  969,  972,    0,  973,  969,  970,  971,  973,  972,
        0,    0,    0,  970,  971,    0,  972,  970,  971,  974,
      972,  969,  975,  974,  973,    0,  975,    0,    0,  972,

        0,  973,    0,  970,  971,  973,  972,  976,    0,  974,
        0,  976,  975,  978,  976,    0,  974,  978,  977,  975,
      974,  973,  977,  975,    0,    0,  977,  976,  979,    0,
        0,  980,  979,  978,  976,  980,  974,    0,  976,  975,
      978,  976,  977,  979,  978,  977,  981,    0,  979,  977,
      981,  980,  982,  977,  976,  979,  982,    0,  980,  979,
      978,    0,  980,    0,  986,  983,  981,  983,  986,  977,
      979,  983,  982,  981,  984,  979,  984,  981,  980,  982,
      984,    0,    0,  982,  986,  987,  985,  983,    0,  987,
      985,  986,  983,  981,  983,  986,  984,    0,  983,  982,

      985,  984,    0,  984,    0,  987,  985,  984,    0,    0,
        0,  986,  987,  985,  983,  988,  987,  985,  989,  988,
        0,  990,  989,  984,  988,  990,    0,  985,  990,    0,
      991,    0,  987,  985,  991,  988,  992,    0,  989,    0,
      992,  990,  988,    0,  992,  989,  988,    0,  990,  989,
      991,  988,  990,    0,    0,  990,    0,  991,    0,    0,
      992,  991,  988,  992,    0,  989,  993,  992,  990,  994,
      993,  992,    0,  994,  993,    0,  995,  991,  995,  996,
        0,    0,  995,  996,  994,    0,    0,  992,  997,  994,
      993,    0,  997,  993,  996,    0,  994,  993,  995,  996,

      994,  993,    0,  995,    0,  995,  996,    0,  997,  995,
      996,  994,    0,    0,  998,  997,  994,  993,  998,  997,
      999,  996,    0, 1000,  999,  995,  996, 1000,    0, 1001,
        0,    0, 1002, 1001,  998,  997, 1002,    0,    0, 1002,
      999,  998, 1001, 1000, 1035,  998,    0,  999, 1035, 1001,
     1000,  999, 1002, 1036, 1000,    0, 1001, 1036, 1037, 1002,
     1001,  998, 1037, 1002, 1035,    0, 1002,  999, 1038, 1001,
     1000, 1035, 1038, 1036,    0, 1035, 1001, 1039, 1037, 1002,
     1036, 1039, 1040,    0, 1036, 1037, 1040,    0, 1038, 1037,
     1041, 1035, 1042,    0, 1041, 1038, 1042, 1039, 1041, 1038,

     1036,    0, 1040,    0, 1039, 1037, 1043, 1044, 1039, 1040,
     1043, 1044, 1042, 1040, 1041, 1038, 1045, 1041,    0, 1042,
     1045, 1041, 1044, 1042, 1039, 1041, 1043, 1044, 1046, 1040,
        0, 1047, 1046, 1043, 1044, 1047, 1045, 1043, 1044, 1042,
     1048, 1041,    0, 1045, 1048,    0,    0, 1045, 1046, 1044,
     1049, 1047, 1049, 1043, 1044, 1046, 1049,    0, 1047, 1046,
     1048, 1050, 1047, 1045, 1052, 1050, 1053, 1048, 1052, 1051,
     1053, 1048, 1049, 1051,    0, 1046,    0, 1049, 1047, 1049,
        0, 1050, 1051, 1049, 1052,    0, 1053, 1048, 1050, 1051,
     1054, 1052, 1050, 1053, 1054, 1052, 1051, 1053,    0, 1049,

     1051,    0, 1057, 1055,    0,    0, 1057, 1055, 1050, 1051,
     1054, 1052,    0, 1053,    0, 1059, 1051, 1054, 1055, 1059,
     1056, 1054, 1057, 1055, 1056,    0, 1056,    0, 1058, 1057,
     1055,    0, 1058, 1057, 1055, 1059,    0, 1054,    0,    0,
     1056,    0, 1059, 1058,    0, 1055, 1059, 1056, 1058, 1057,
     1055, 1056, 1060, 1056, 1062, 1058, 1060,    0, 1062, 1058,
     1061,    0, 1059,    0, 1061, 1060,    0, 1056, 1061, 1063,
     1058,    0, 1060, 1063, 1062, 1058,    0,    0, 1064, 1060,
     1061, 1062, 1064, 1060, 1063, 1062, 1065, 1061,    0, 1063,
     1065, 1061, 1060,    0,    0, 1061, 1063,    0, 1064, 1060,

     1063, 1062,    0,    0, 1066, 1064, 1065, 1061, 1066, 1064,
     1081, 1063,    0, 1065, 1081,    0, 1063, 1065, 1083, 1082,
        0,    0, 1083, 1082, 1066, 1064,    0,    0, 1084,    0,
     1081, 1066, 1084, 1065, 1082, 1066,    0, 1081, 1083, 1082,
     1086, 1081,    0, 1085, 1086, 1083, 1082, 1085, 1084, 1083,
     1082, 1066, 1088,    0,    0, 1084, 1088, 1081, 1085, 1084,
     1086, 1082,    0, 1085, 1087, 1083, 1082, 1086, 1087, 1089,
     1085, 1086, 1088, 1089, 1085, 1084,    0, 1087, 1090, 1088,
        0,    0, 1090, 1088, 1087, 1085,    0, 1086, 1091, 1089,
     1085, 1087, 1091,    0,    0, 1087, 1089, 1093, 1090, 1088,

     1089, 1093, 1092, 1094, 1087, 1090, 1092, 1094, 1091, 1090,
        0, 1087,    0, 1092,    0, 1091, 1089, 1093,    0, 1091,
        0,    0, 1092, 1094, 1093, 1090,    0, 1101, 1093, 1092,
     1094, 1101, 1102, 1092, 1094, 1091, 1102, 1103,    0,    0,
     1092, 1103, 1104,    0, 1093,    0, 1104, 1101,    0, 1092,
     1094, 1103, 1102,    0, 1101,    0, 1105, 1103, 1101, 1102,
     1105, 1106, 1104, 1102, 1103, 1106, 1110,    0, 1103, 1104,
     1110, 1106,    0, 1104, 1101,    0, 1105,    0, 1103, 1102,
        0, 1106,    0, 1105, 1103,    0, 1110, 1105, 1106, 1104,
     1111, 1112, 1106, 1110, 1111, 1112,    0, 1110, 1106,    0,

     1112,    0,    0, 1105,    0, 1114,    0,    0, 1106, 1114,
     1111, 1112,    0, 1110,    0,    0,    0, 1111, 1112,    0,
        0, 1111, 1112,    0,    0, 1114,    0, 1112,    0,    0,
        0,    0, 1114,    0,    0,    0, 1114, 1111, 1112,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1114, 1116, 1116, 1116, 1116, 1116, 1117,    0,
        0, 1117, 1117, 1119, 1119, 1119,    0, 1119, 1120,    0,
     1120, 1120, 1120, 1121,    0, 1121, 1121, 1121, 1122,    0,
     1122, 1122, 1122, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,

     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 2335 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2349 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 58 "flex_lexer.l"


#line 2636 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1116 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1115 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 64 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(TINYINT)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 144:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 151:
#line 217 "flex_lexer.l"
case 152:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 227 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 233 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 238 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 239 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 240 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 241 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 242 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 244 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 247 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3512 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1116 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1116 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1115);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 247 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

