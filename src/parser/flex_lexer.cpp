#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 163
#define YY_END_OF_BUFFER 164
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1144] =
    {   0,
        0,    0,  160,  160,    2,    2,  164,  162,    4,    4,
      162,  162,  152,  158,  152,  152,  155,  152,  152,  152,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  152,  160,  161,    2,    2,
        3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    4,  147,    0,
        1,  155,  154,  153,  149,  148,  146,  150,  157,  157,

      157,  157,  157,  125,  157,  157,  157,  126,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  127,  157,  157,  128,  129,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  130,  131,
      132,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  133,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  151,
      160,  159,    2,    2,    2,    2,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  156,  153,  113,  157,
      114,  157,  157,  115,  116,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,

      137,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  117,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  118,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  119,  157,  157,  120,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  121,  157,
      157,  122,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  123,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  124,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,  157,  157,  157,  157,
      157,  157,  157,  157,   83,  157,   84,   47,   85,  157,
      157,  157,   86,  157,  157,   87,  157,  157,  157,  157,
      157,   89,  157,  157,  157,   90,   91,  157,  157,  157,
      157,  157,  157,  157,   92,  157,  157,   93,   94,  157,
      157,   95,  157,  136,  157,  157,  157,  157,  157,  157,
       96,  157,   97,   98,   99,  157,  101,  157,  102,  157,
      157,  157,  157,  104,  157,  157,  157,  157,  157,  105,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      106,  157,  157,  157,  157,  157,  107,  108,  109,  157,

      157,  140,  157,  157,  157,  157,  157,  157,  157,  157,
      110,  157,  111,  157,  112,  139,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   64,   65,  157,  157,
      143,  157,  157,  157,  157,  157,  157,  157,  157,   66,
      157,  157,  157,  157,  157,   67,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  141,   68,  157,  157,
       69,  157,  100,  157,   70,   71,  157,  157,  157,  157,
       72,   73,   74,   75,  157,  138,  157,  157,  157,   76,
       77,  157,  157,  157,  157,  157,  157,   78,  157,  157,
      157,  157,  157,  157,  157,   79,  157,  157,  157,  157,

      157,   80,  157,  157,  157,   81,  157,  157,  157,   82,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  157,   37,  157,  103,  157,  157,

       38,  145,  157,   39,  157,  157,  157,  157,   40,  157,
       41,  157,   42,   43,   44,  157,   45,  157,  157,   48,
       49,   50,   51,   52,  157,  157,  157,   53,  135,  157,
      157,   54,  157,  157,  157,  157,   55,  157,  157,   56,
      134,   57,  157,   58,  157,   59,  157,  157,  157,  157,
      157,   60,   61,   62,   63,  157,  157,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       16,   17,   29,   18,   19,   20,  157,  157,   23,   21,
      157,  157,   22,   24,   46,   25,  157,  157,   30,  157,
      157,   31,   32,   26,  157,  157,   33,  157,   34,  157,
      157,   27,  157,  157,   35,   36,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   88,  157,   11,   12,  157,   10,   13,  157,

       14,  144,   28,  157,  157,  157,   15,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  157,    7,  157,    8,    9,  157,    2,    2,
        2,    2,    2,    2,    5,    6,  157,    2,    2,    2,
      142,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1151] =
    {   0,
        0,    0,  384,  380,   67,    0,  380, 7305,  133,  135,
      359,    0, 7305, 7305,  131,  356,  133,  132,  318,  309,
      129,  129,  138,  154,  165,  216,  146,  173,  181,  125,
      144,  203,  204,  228,  245,  229,  130,  233,  291,  334,
      268,  196,  245,    0,  228,  251,    0,  303,    0,  147,
      213,  280,  281,    0,    0,  150,  270,  275,  289,  263,
      227,  392,  459,  513,  565,  613,  665,  312,  392,  708,
      394,  323,  451,  456,  759,  808,  508,  277,  510,  854,
      906,  389,  560,  605,  462,  567,  169,  311, 7305,  218,
     7305,  306,  210,  201, 7305, 7305, 7305, 7305,    0,  281,

      272,  317,  340,  333,  553,  338,  331,    0,  450,  349,
      402,  470,  374,  623,  454,  376,  402,  448,  474,  476,
      676,  498,  505,  509,  509,  514,  518,  525,  549,  562,
      550,    0,  568,  569,  656,  575,  585,  605,  625,  623,
      714,  626,  653,  654,  652,  658,  670,  683,  683,    0,
      687,  678,  706,  725,  725,  728,  717,  728,  725,  730,
      763,  728,  744,  728,  751,  766,  773,  764,  771,  755,
      799,  779,  772,  769,  807,  816,  785,  786,  827, 7305,
        0, 7305,    0,  326,    0,  200,    0,  364,  160,  155,
        0,    0,    0,    0,  849,  867,  903,  913,  957,  965,

     1005,  956, 1012, 1013,  854, 1014, 1048, 1060, 1061, 1113,
     1059, 1103, 1113,  957, 1149, 1155, 1204, 1191, 1202, 1166,
     1217, 1252, 1240, 1265, 1267, 1286, 1300, 1310, 1321, 1345,
     1394, 1328, 1357, 1375, 1398, 1441, 1489, 1416, 1430, 1452,
     1488, 1506, 1499, 1540, 1538, 1543, 1556, 1588, 1589, 1597,
     1635, 1623, 1633, 1642, 1661, 1681, 1724, 1690, 1732, 1738,
     1744, 1780, 1778, 1791, 1818, 1822, 1859, 1867, 1871, 1830,
     1897, 1914, 1915, 1940, 1926,    0, 7305,  153,    0,  833,
        0,  855,  863,    0,    0,  862,  874,  890,  907,  905,
      908, 1130,  904,  905,  916,  910,  942,  977,  960,  977,

        0,  979, 1007, 1016, 1110, 1021, 1031, 1048, 1072, 1063,
     1075,    0, 1083, 1115, 1126, 1120, 1158, 1154, 1165, 1207,
     1216, 1209, 1215, 1221, 1264, 1247, 1261, 1266, 1267, 1300,
     1307, 1324, 1339, 1354, 1360, 1343, 1354,    0, 1356, 1373,
     1374, 1390, 1395, 1394, 1408, 1405, 1409, 1417,    0, 1438,
     1442, 1450, 1467, 1483, 1497, 1487, 1488, 1492, 1498, 1541,
     1526, 1555, 1553, 1561, 1557, 1591,    0, 1577, 1604, 1599,
     1606, 1616, 1643, 1643, 1656, 1687, 1669,    0, 1681, 1696,
     1734, 1688, 1703, 1700, 1694, 1731, 1734, 1738, 1917, 1779,
     1775,    0,  145, 1962, 1964, 1969, 1993, 1998, 2012, 2028,

     2018, 2023, 2057, 2072, 2059, 2072, 2112, 2111, 2116, 2152,
     2154, 2171, 2176, 2196, 2207, 2219, 2217, 2245, 2261, 2273,
     2299, 2275, 2313, 2321, 2343, 2357, 2362, 2346, 2375, 2403,
     2391, 2407, 2439, 2410, 2454, 2465, 2474, 2490, 2503, 2509,
     2525, 2544, 2532, 2570, 2579, 2591, 2586, 2595, 2620, 2625,
     2637, 2662, 2673, 2678, 2707, 2715, 2729, 2727, 2767, 2769,
     2772, 2801, 2810, 2812, 2813, 2855, 2851, 2857, 2862, 2900,
     2893, 2907, 2942, 2956, 2961, 2972, 2994, 2996, 3016, 3018,
     3019, 3044, 3058, 3060, 3073, 3103, 3114, 3127, 3155, 3168,
     3120, 3180, 3188, 3209, 3222, 3220, 3234, 3266, 3263, 3274,

     3307, 3306, 3285, 3317, 3345, 3356, 1776, 1781, 1776, 1795,
     1830, 1846, 1856, 1893,    0, 1898,    0,    0,    0, 1924,
     1977, 1970,    0, 1973, 1984, 1994, 2007, 2021, 2047, 2056,
     2105, 2098, 2117, 2116, 2115,    0,    0, 2119, 2120, 2119,
     2131, 2170, 2178, 2177,    0, 2170, 2218,    0,    0, 2224,
     2210,    0, 2216,    0, 2233, 2222, 2221, 2230, 2246, 2267,
        0, 2271,    0,    0,    0, 2266,    0, 2280,    0, 2289,
     2323, 2348, 2378,    0, 2413, 2420, 2420, 2423, 2431,    0,
     2449, 2469, 2452, 2472, 2495, 2504, 2524, 2516, 2520, 2533,
        0, 2557, 2570, 2567, 2576, 2617,    0,    0, 2620, 2633,

     2625,    0, 2643, 2634, 2633, 2662, 2654, 2679, 2683, 2692,
        0, 2681,    0, 2699,    0,    0, 3360, 3368, 3384, 3396,
     3394, 3425, 3411, 3428, 3440, 3470, 3478, 3482, 3486, 3517,
     3524, 3533, 3535, 3564, 3569, 3577, 3588, 3618, 3627, 3629,
     3665, 3670, 3681, 3699, 3706, 3715, 3724, 3748, 3757, 3772,
     3798, 3806, 3814, 3835, 3848, 3849, 3860, 3864, 3896, 3902,
     3907, 3911, 3922, 3948, 3959, 3959, 3964, 3976, 4002, 4012,
     4023, 4051, 4055, 4064, 4095, 4104, 4108, 4144, 4148, 4156,
     4190, 4178, 4204, 4210, 4232, 4239, 4250, 4255, 4271, 4286,
     4297, 4302, 4318, 4344, 4333, 4365, 4380, 4386, 4378, 4420,

     4421, 4424, 4432, 4464, 4472, 4473, 4486, 4498, 4507, 4524,
     4523, 4549, 4567, 4553, 4596, 4597, 4608, 4639, 4643, 4648,
     4679, 4682, 4692, 4703, 4711, 4729,    0,    0, 2683, 2732,
        0, 2741, 2732, 2752, 2752, 2782, 2788, 2814, 2836,    0,
     2838, 2864, 2882, 2872, 2881,    0, 2886, 2896, 2906, 2919,
     2920, 2913, 2916, 2919, 2931, 2938,    0,    0, 2939, 2958,
        0, 2965,    0, 2957,    0,    0, 2958, 3006, 3056, 3001,
        0,    0,    0,    0, 3013,    0, 3029, 3054, 3044,    0,
        0, 3072, 3064, 3085, 3102, 3108, 3112,    0, 3130, 3131,
     3132, 3117, 3148, 3157, 3170, 3158, 3163, 3163, 3176, 3190,

     3198,    0, 3206, 3211, 3226,    0, 3225, 3250, 3268,    0,
     4737, 4751, 4759, 4773, 4781, 4795, 4809, 4820, 4835, 4846,
     4868, 4875, 4887, 4899, 4913, 4921, 4932, 4913, 4953, 4961,
     4966, 4979, 4968, 4991, 5015, 5029, 5030, 5034, 5027, 5081,
     5078, 5083, 5107, 5085, 5126, 5134, 5150, 5164, 5178, 5194,
     5202, 5222, 5220, 5238, 5251, 5264, 5282, 5295, 5307, 5315,
     5330, 5353, 5362, 5361, 5384, 5369, 5407, 5409, 5423, 5425,
     5438, 5451, 5463, 5471, 5496, 5514, 5521, 5535, 5547, 5560,
     5568, 5580, 5566, 5601, 5613, 5622, 5629, 5647, 5644, 5679,
     5673, 5690, 5692, 5708, 3284,    0, 3276,    0, 3329, 3340,

     3348,    0, 3367,    0, 3379, 3418, 3434, 3427,    0, 3452,
        0, 3459,    0,    0,    0, 3463,    0, 3461, 3464,    0,
        0,    0,    0,    0, 3481, 3514, 3536,    0,    0, 3528,
     3541,    0, 3524, 3542, 3533, 3568,    0, 3584, 3587, 3575,
        0,    0, 3581,    0, 3586,    0, 3618, 3625, 3616, 3635,
     3620,    0,    0,    0,    0, 3634, 3642, 5724, 5733, 5733,
     5749, 5768, 5788, 5777, 5798, 5817, 5831, 5840, 5859, 5873,
     5882, 5901, 5920, 5924, 5943, 5962, 5966, 5985, 5991, 6005,
     6020, 6026, 6039, 6050, 6069, 6080, 6083, 6110, 6108, 6131,
     6146, 6150, 6158, 6178, 6193, 6197, 6209, 6221, 6232, 6247,

     6251, 6282, 6287, 6290, 6301, 6320, 6331, 6334, 6350, 6375,
     6380, 6391, 6413, 6422, 6431, 6453, 6462, 6464, 6485, 6477,
        0,    0,    0,    0,    0,    0, 3681, 3689,    0,    0,
     3687, 3674,    0,    0,    0,    0, 3692, 3689,    0, 3688,
     3727,    0,    0,    0, 3730, 3742,    0, 3735,    0, 3740,
     3755,    0, 3754, 3774,    0,    0, 6498, 6507, 6521, 6540,
     6549, 6563, 6569, 6588, 6607, 6609, 6623, 6638, 6641, 6663,
     6677, 6682, 6691, 6698, 6716, 6730, 6727, 6741, 6755, 6769,
     6783, 6791, 6809, 6817, 6831, 6847, 6873, 6869, 6892, 6894,
     6916, 6935,    0, 3763,    0,    0, 3764,    0,    0, 3791,

        0,    0,    0, 3800, 3812, 3826,    0, 6938, 6964, 6940,
     6976, 6989, 6988, 6990, 7036, 7037, 7038, 7042, 7080, 7081,
     7083, 7095, 3861,    0, 3867,    0,    0, 3874, 7121, 7129,
     7131, 7150, 7164, 7143,    0,    0, 3880, 7175, 7189, 7194,
        0, 7210, 7305, 7274, 7279,  135, 7284, 7289, 7294, 7299
    } ;

static const flex_int16_t yy_def[1151] =
    {   0,
     1143,    1, 1144, 1144, 1143,    5, 1143, 1143, 1143, 1143,
     1143, 1145, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1143, 1147, 1143, 1148, 1148,
     1143, 1148, 1149, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1150, 1150,   63,   63,   63,   64,   64,   64,   66,
       64,   63,   63,   63,   64,   64,   64,   76,   63,   63,
       64,   66,   64,   64,   64,   63, 1148, 1143, 1143, 1145,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1146, 1146,

     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1143,
     1147, 1143, 1148, 1148, 1148, 1149, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148,   63,   63,   63,   66,   64,   64,

       76,   76,   64,   64,   66,   64,   66,   63,   63,   66,
       66,   76,   63,   66,   66,   66,   63,   66,   66,   63,
       76,   63,   66,   63,   63,   66,   76,   76,   63,   63,
       66,   66,   63,   63,   76,   76,   76,   76,   76,   76,
       76,   76,   66,   64,   76,   76,   76,   76,   76,   64,
       63,   64,   66,   66,   66,   64,   66,   64,   64,   64,
       64,   64,   66,   63,   66,   66,   64,   66,   66,   63,
       66,   63,   63,   63,   64, 1148, 1143, 1143, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,

     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1148, 1148,   64,   63,   63,   63,   66,   66,   66,

       63,   63,   63,   63,   66,   66,  217,   64,   76,   76,
       76,   63,   64,   66,   63,   63,   66,   63,   64,   63,
       63,   63,   63,   63,   63,   63,   63,   64,   63,   63,
       66,   66,   64,   66,   63,   64,   64,   64,   66,   66,
       76,   64,   63,   64,   64,   64,   63,   63,   63,   63,
       76,   76,   76,   76,   63,   63,   63,   64,   64,   64,
       76,   76,   76,   76,   66,   76,   66,   63,   63,   64,
       66,   66,   66,   64,   64,   64,   64,   66,   63,   63,
       63,   63,   63,   66,   66,   66,   66,   66,   66,   66,
       63,   63,   63,   66,   66,   63,   63,   64,   66,   76,

       76,   76,   76,   76,   64,   64, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,

     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146,   64,   64,   63,   64,
       76,   63,   76,   63,   63,   64,   64,   64,   64,   64,
       63,   64,   64,   64,   66,   66,   66,   66,   76,   76,
       64,   64,   64,   63,   66,   66,   66,   66,   66,   76,
       76,   64,   64,   63,   63,   63,   64,   64,   64,   64,
       64,   64,   76,   76,   63,   76,   66,   76,   76,   76,
       76,   66,   66,   66,   66,   66,   66,   66,   66,   63,
       66,   64,   64,   64,   64,   63,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   66,   66,

       66,   66,   63,   63,   63,   63,   63,   63,   66,   63,
       66,   66,   66,   66,   76,   64,   64,   64,   63,   64,
       64,   76,   76,   63,   63,   63, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,

     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
       63,   63,   63,   63,   63,   63,   63,   64,   64,   76,
       76,   64,   63,   63,   63,   63,   64,   66,   63,   63,
       63,   63,   66,   63,   63,   63,   63,   66,   63,   63,
       63,   63,   63,   66,   66,   66,   66,   66,   66,   66,
       66,   63,   66,   66,   66,   66,   66,   66,   63,   63,
       64,   64,   64,   64,   64,   63,   64,   64,   63,   63,
       63,   63,   64,   64,   64,   64,   63,   63,   64,   66,
       64,   64,   66,   64,   64,   64,   63,   63,   63,   63,
       66,   64,   64,   64, 1146, 1146, 1146, 1146, 1146, 1146,

     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146,   63,   63,   66,
       66,   66,   63,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   63,   63,
       66,   66,   66,   66,   66,   66,   66,   64,   63,   64,
       64,   64,   66,   64,   64,   64,   63,   63,   64,   64,

       64,   64,   66,   66,   66,   66,   66,   66,   66,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   66,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146,   66,   66,   66,   66,
       66,   66,   63,   64,   64,   64,   63,   63,   63,   63,
       63,   63,   63,   66,   66,   64,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   64,   64,   64,   64,   63,
       63,   63, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,

     1146, 1146, 1146, 1146, 1146, 1146, 1146,   63,   63,   63,
       63,   63,   63,   63,   64,   64,   64,   64,   63,   63,
       63,   63, 1146, 1146, 1146, 1146, 1146, 1146,   63,   63,
       66,   66,   66,   63, 1146, 1146, 1146,   63,   63,   66,
     1146,   66,    0, 1143, 1143, 1143, 1143, 1143, 1143, 1143
    } ;

static const flex_int16_t yy_nxt[7373] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   44,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   44,   46,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,

       82,   83,   84,   85,   86,   85,   49,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
       85,   86,   85,   87,   88,   88,   88,   88,   91,   99,
       92,   94,   92,   95,   96,  100,  105,  101,  184,   88,
      106,  109,  137,  102,  393,  103,  107,  187,  110,  188,
      104,  138,  278,  156,  393,  111,  108,  113,  112,  189,
      128,  114,  100,  105,  101,  115,  129,  106,  109,  137,
      102,  116,  103,  107,  117,  110,  130,  104,  138,  118,
      156,  119,  111,  108,  113,  112,  120,  128,  114,  132,

      131,  121,  115,  129,  392,  133,  134,  135,  116,  175,
      278,  117,  136,  130,   88,   88,  118,  176,  119,   93,
      139,  142,  277,  120,  140,  143,  132,  131,  121,  122,
      141,  144,  133,  134,  135,  276,  175,  123,  194,  136,
      124,  145,  153,  125,  176,  179,  126,  139,  142,  127,
      157,  140,  143,  154,  158,  146,  122,  141,  144,  155,
      159,  147,  148,  149,  123,  177,  178,  124,  145,  153,
      125,  150,  179,  126,  193,  151,  127,  157,  152,  189,
      154,  158,  146,  190,  188,  183,  155,  159,  147,  148,
      149,  185,  177,  178,  172,  195,  173,  279,  150,  174,

      191,  192,  151,  195,  280,  152,  160,  195,  161,  182,
      252,  162,   88,   88,   94,   92,  163,  180,  164,  165,
       98,  172,  195,  173,  279,  195,  174,  184,   88,   97,
      195,  280,  195,  160,  195,  161,  224,  252,  162,  195,
      234,  281,  225,  163,  195,  164,  165,  166,  285,  282,
      195,  167,  195,  283,  168,  169,  284,  289,  290,  195,
      195,  170,  293,  224,  171,   93,  195,  234,  281,  225,
       89,  195,  190,  188,  166,  285,  282,  195,  167, 1143,
      283,  168,  169,  284,  289,  290,   48,  195,  170,  293,
       48,  171,  183,  183, 1143,  183,  183,  183,  183,  183,

      183, 1143,  183,  183,  183,  226,  300,  195,  196,  309,
      197,  301,  195,  195,  195,  268,  198,  269,  199,  227,
      270,  233,  195,  200,  195,  195,  294,  295,  296,  310,
      297, 1143,  226,  300,  195,  196,  309,  197,  301,  195,
      195,  195,  268,  198,  269,  199,  227,  270,  233,  195,
      200,  195,  195,  294,  295,  296,  310,  297,  183,  183,
      183, 1143,  183,  183,  183,  183,  183,  183,  235,  183,
      183,  183,  236,  238,  291,  195,  201,  239,  237,  311,
      202,  292,  195,  240,  307,  308,  203,  298,  195,  195,
      312,  313,  195,  195, 1143,  235,  204,  299, 1143,  236,

      238,  291,  195,  201,  239,  237,  311,  202,  292,  195,
      240,  307,  308,  203,  298,  195,  195,  312,  313,  195,
      195,  249,  319,  204,  299,  183,  205,  253,  195,  320,
      195,  254,  250,  206,  195,  195,  321,  255,  251,  322,
      207,  323,  324,  208, 1143, 1143, 1143,  195,  249,  319,
      195, 1143,  325,  205,  253,  195,  320,  195,  254,  250,
      206,  195,  195,  321,  255,  251,  322,  207,  323,  324,
      208,  286,  287,  271,  195, 1143,  326,  195,  209,  325,
      195,  272,  210,  329,  275,  288,  211,  195,  195,  330,
      195, 1143,  212,  327,  195,  213,  328,  331,  286,  287,

      271,  336,  195,  326,  195,  209,  337,  195,  272,  210,
      329,  275,  288,  211,  195,  195,  330,  195,  195,  212,
      327,  195,  213,  328,  331,  273,  274, 1143,  336,  195,
      195,  195,  195,  337,  195,  195,  302,  214,  303,  215,
      195,  304,  338,  339,  216,  195,  340,  305,  341,  217,
      195, 1143,  273,  274,  306, 1143,  345,  195, 1143,  195,
     1143,  195,  195,  302,  214,  303,  215,  195,  304,  338,
      339,  216,  332,  340,  305,  341,  217,  195,  218,  346,
      347,  306,  333,  345,  348,  195,  219,  334,  335,  220,
      349,  314,  221,  315,  350,  222,  351,  316,  223,  332,

     1143,  352, 1143,  353,  317,  218,  346,  347,  318,  333,
      354,  348,  195,  219,  334,  335,  220,  349,  314,  221,
      315,  350,  222,  351,  316,  223,  228,  342,  352,  343,
      353,  317,  229,  230,  231,  318,  355,  354,  356,  232,
      344,  359,  357,  360,  195, 1143,  358,  362,  361,  363,
      364, 1143, 1143,  228,  342,  368,  343,  369,  370,  229,
      230,  231, 1143,  355,  371,  356,  232,  344,  359,  357,
      360,  195,  241,  358,  362,  361,  363,  364,  365,  195,
      372,  375,  368,  378,  369,  370,  242,  366,  383,  195,
      384,  371,  243,  244, 1143,  367,  376,  377,  373,  241,

      381, 1143,  389,  382, 1143,  365,  195,  372,  375,  374,
      378, 1143,  379,  242,  366,  383,  195,  384,  390,  243,
      244,  195,  367,  376,  377,  373,  245,  381,  195,  389,
      382,  385,  380,  387,  246,  195,  374,  386,  247,  379,
      391,  248, 1143, 1143, 1143,  390,  388, 1143,  195, 1143,
      507, 1143, 1143,  245, 1143,  195, 1143, 1143,  385,  380,
      387,  246,  195, 1143,  386,  247,  195,  391,  248,  256,
      195,  257,  508,  388,  258,  195,  195,  507,  406,  259,
      195,  260,  261,  394,  195,  407,  195,  509,  195,  510,
      195,  195, 1143,  195,  195,  511,  256,  195,  257,  508,

     1143,  258,  195,  195,  195,  406,  259,  195,  260,  261,
      394,  195,  407,  195,  509,  195,  510,  195,  195,  262,
      195,  195,  511,  263,  195,  512,  264,  265,  513,  514,
      195,  195,  515,  266,  519,  395,  267,  396,  520,  195,
      195,  521,  522, 1143,  195,  397,  262,  195, 1143,  195,
      263,  195,  512,  264,  265,  513,  514,  195, 1143,  515,
      266,  519,  395,  267,  396,  520,  195,  195,  521,  522,
      398,  195,  397,  399,  195,  404,  195,  195,  195,  523,
      400,  195,  195,  195,  195,  195,  195,  195,  426,  195,
      524,  525,  195,  195,  526,  195, 1143,  398, 1143, 1143,

      399,  195,  404,  527,  195,  195,  523,  400,  195,  195,
      195,  195,  195,  195,  195,  426,  195,  524,  525,  195,
      195,  526,  195,  401,  402,  195,  195,  408,  528,  529,
      527,  195,  195,  195,  195,  195,  532,  403,  195,  405,
      195,  195,  195,  195,  195, 1143, 1143, 1143,  533, 1143,
      401,  402,  195,  195,  408,  528,  529, 1143,  195,  195,
      195,  195,  195,  532,  403,  195,  405,  195,  195,  195,
      195,  195,  409,  410,  411,  533,  412,  413,  195,  195,
      534,  195,  195,  195,  195,  195,  535,  414,  195,  422,
      423,  536,  537,  415, 1143,  195,  538,  195,  416,  409,

      410,  411, 1143,  412,  413,  195,  195,  534,  195,  195,
      195,  195,  195,  535,  414,  195,  422,  423,  536,  537,
      415,  195,  195,  538,  195,  416,  417,  530,  418,  195,
      195,  419,  539,  195,  195, 1143,  424,  420, 1143,  195,
      425,  540,  531, 1143,  421,  516, 1143,  517,  195,  195,
      195,  541, 1143,  417,  530,  418,  195,  195,  419,  539,
      195,  195,  518,  424,  420,  427,  195,  425,  540,  531,
      428,  421,  516,  195,  517,  195,  195,  195,  541,  195,
      195,  195,  542,  195,  543,  195,  195,  195, 1143,  518,
     1143,  195,  427,  436, 1143, 1143,  544,  428, 1143, 1143,

      195, 1143,  195,  195, 1143, 1143,  195,  195,  195,  542,
      195,  543,  195,  195,  195,  434, 1143,  195,  195,  429,
      436,  430,  195,  544,  545,  431,  435,  195,  195,  546,
      195,  195,  432,  195,  547,  195,  433, 1143,  195, 1143,
      548,  195,  434,  195,  195,  549,  429,  437,  430,  195,
      195,  545,  431,  435,  195,  195,  546, 1143,  195,  432,
      195,  547,  195,  433,  439,  195,  195,  548,  195,  195,
      195,  195,  549,  195,  437, 1143,  195,  195,  550,  438,
      551,  552,  195, 1143,  195, 1143,  195,  553,  195,  195,
     1143,  439,  440,  195,  441, 1143,  195,  554,  195, 1143,

      195, 1143,  195,  195,  195,  550,  438,  551,  552,  195,
      195,  195,  195,  195,  553,  195,  195,  442,  195,  440,
      443,  441,  195,  555,  554, 1143,  195, 1143,  195,  195,
      195,  195, 1143,  444,  556, 1143,  195,  195,  195,  195,
      195,  557,  445,  195,  442,  195, 1143,  443,  195,  195,
      555, 1143,  195,  195,  451,  195,  558,  195,  195,  195,
      444,  556,  195,  195,  195,  195,  195,  195,  557,  445,
      195,  559,  195,  446,  195,  195,  562,  560,  452,  195,
      563,  451,  195,  558,  195,  195,  195,  561,  564,  195,
      565,  195,  195,  195,  195,  566,  195, 1143,  559,  195,

      446,  195,  195,  562,  560,  452,  567,  563,  568,  195,
      447,  195,  453,  569,  561,  564,  454,  565,  195,  195,
      448,  195,  566,  195,  195,  449,  450,  570,  195,  195,
      195,  195, 1143,  567,  195,  568, 1143,  447,  571,  453,
      569,  572,  195,  454, 1143,  195,  460,  448,  195,  195,
      573,  195,  449,  450,  570,  195,  461,  195,  195,  195,
      195,  195,  574,  195,  455,  571,  456,  195,  572,  195,
      195,  195,  575,  460,  195,  195,  195,  573,  462, 1143,
     1143,  576,  195,  461,  577,  195,  195,  195, 1143,  574,
      195,  455, 1143,  456,  195, 1143, 1143,  195,  195,  575,

      578,  195,  457, 1143,  458,  462,  195,  195,  576,  195,
      579,  577,  195,  580,  195,  459,  581,  582,  195,  195,
      463,  195,  195,  465,  195,  195, 1143,  578,  583,  457,
      195,  458,  195,  195,  195,  195,  195,  579,  464,  195,
      580,  195,  459,  581,  582,  195,  195,  463,  195,  195,
      465,  195,  195,  466,  584,  583,  467,  195,  585,  195,
      195,  195,  195,  195,  195,  464,  195,  195,  195,  195,
      195,  195,  468,  195,  195,  586,  195,  587,  588, 1143,
      466,  584,  195,  467,  589,  585,  195,  195,  195,  195,
     1143,  195, 1143, 1143,  195,  195,  195,  195,  195,  468,

      195,  195,  586,  195,  587,  588,  195,  195,  590,  195,
      471,  589,  591,  195,  195,  195,  195,  195,  195,  470,
      469,  195,  195, 1143,  195, 1143, 1143,  195,  592, 1143,
     1143,  593, 1143,  195,  195,  590,  474,  471,  594,  591,
      595,  195,  195,  195,  195,  195,  470,  469,  195,  195,
      195,  195,  472,  195,  195,  592,  473,  195,  593,  475,
     1143,  477,  195,  474,  476,  594,  195,  595,  195,  195,
      195,  596,  195,  195, 1143,  597, 1143,  195,  195,  472,
      195, 1143,  598,  473,  195,  478,  475,  195,  477,  195,
     1143,  476,  195,  195,  195,  195,  195,  195,  596,  195,

      195,  479,  597,  195,  599,  195,  600,  601,  195,  598,
      195,  195,  478,  602,  195,  606,  607,  483, 1143,  195,
      195,  195,  603, 1143,  195, 1143,  608,  609,  479, 1143,
      195,  599, 1143,  600,  601,  195, 1143,  195,  195,  480,
      602, 1143,  606,  607,  483,  484,  610,  195,  481,  603,
      195,  195,  195,  608,  609,  195,  482,  486,  195,  195,
      195,  604,  195,  605,  195,  195,  480, 1143,  485,  611,
      612,  195,  484,  610,  195,  481, 1143,  195,  195,  195,
     1143, 1143,  195,  482,  486,  195,  195,  195,  604,  195,
      605,  195,  195,  195,  487,  485,  611,  612,  195,  615,

      195,  195,  195,  488,  195,  616,  727,  195,  490,  195,
      195,  728,  195,  729,  489, 1143, 1143, 1143,  195, 1143,
      195,  487, 1143, 1143, 1143,  730,  615,  195,  195,  195,
      488,  195,  616,  727,  195,  490,  195,  195,  728,  195,
      729,  489,  195,  491,  492,  195,  195,  195,  195,  195,
      493,  499,  730,  195,  195,  195,  731,  195,  195, 1143,
     1143, 1143, 1143,  732, 1143, 1143, 1143,  195, 1143,  195,
      491,  492,  494,  195,  195,  195,  195,  493,  499,  195,
      195,  195,  733,  731,  195,  195,  195,  498,  496,  195,
      732,  497,  495,  195,  195,  195, 1143,  195,  195,  494,

     1143, 1143,  195,  195, 1143, 1143,  195,  195, 1143,  733,
      734,  735, 1143,  195,  498,  496,  195, 1143,  497,  495,
      195,  500,  195,  195,  195,  195, 1143,  501,  195,  195,
      195,  502,  504,  195,  195,  195,  195,  734,  735,  506,
     1143,  195,  195,  613,  503, 1143,  195,  614,  500,  736,
      195,  195,  195,  195,  501,  195,  195,  195,  502,  504,
      195,  195,  195,  195, 1143, 1143,  506,  195,  195,  195,
      613,  503,  505,  195,  614,  195,  736,  195,  195,  195,
      195,  617,  195,  195,  195,  195,  195, 1143,  195,  195,
      195,  195,  195, 1143,  195, 1143,  195, 1143,  737,  505,

      738,  195,  195, 1143,  195,  739,  195, 1143,  617,  195,
      618, 1143,  195,  195,  195,  740,  195,  195,  195,  195,
      195, 1143,  619,  195,  195,  737,  741,  738,  195,  195,
      195,  742,  739,  195,  195,  195,  195,  618,  195,  195,
      195,  195,  740,  195,  621,  620,  743,  195,  195,  619,
      195,  195,  195,  741,  195,  195,  195,  195,  742,  195,
      195,  195,  195,  195,  195,  195,  195,  195, 1143, 1143,
      195,  621,  620,  743,  195,  195, 1143,  195,  195,  195,
      744,  195,  195,  624,  195,  195,  195,  195,  745,  195,
      195,  195,  622,  623,  195,  195,  625, 1143,  195,  195,

     1143,  195, 1143,  195, 1143,  195, 1143,  744,  195,  195,
      624,  195,  195, 1143, 1143,  745,  195,  195,  746,  622,
      623,  195,  195,  625,  195,  195,  195,  626,  747,  627,
      195,  195,  748,  195,  195,  195,  195,  749,  195,  750,
      195,  629,  195, 1143,  628,  746,  195,  751,  752,  630,
     1143,  195,  753, 1143,  626,  747,  627, 1143,  195,  748,
      195,  195, 1143,  754,  749,  195,  750,  195,  629,  195,
      195,  628,  195,  195,  751,  752,  630,  631,  195,  753,
      195, 1143,  195,  755,  195,  195,  632,  195,  195,  634,
      754,  756,  195, 1143,  757, 1143,  195,  195,  195,  195,

     1143, 1143,  758,  195,  631,  195,  195,  195,  633,  195,
      755,  195,  195,  632,  195,  195,  634, 1143,  756,  195,
      195,  757,  195,  195,  636,  195, 1143,  635,  195,  758,
      195,  759,  195,  195,  195,  633,  195,  760,  761, 1143,
      195,  637,  762,  195,  195, 1143,  195,  195,  195,  195,
      763,  636,  764,  195,  635,  195,  195,  765,  759,  195,
      766,  195,  195,  195,  760,  761,  638,  195,  637,  762,
      195,  195,  195,  195,  639,  195,  767,  763, 1143,  764,
      195,  195,  195,  195,  765, 1143,  768,  766,  195,  195,
      640,  195,  643,  638,  195,  770,  195,  769,  771,  195,

      195,  639,  195,  767,  772,  641,  773, 1143,  195,  195,
      195, 1143,  195,  768,  642,  195,  195,  640,  195,  643,
      195,  195,  770,  195,  769,  771,  195,  195, 1143,  195,
      195,  772,  641,  773,  195,  645,  195,  195,  195,  195,
      195,  642,  195,  195, 1143,  644, 1143,  195,  195, 1143,
      195, 1143, 1143,  195,  774,  775, 1143,  195,  195,  648,
      195,  195,  645,  195,  195,  195,  195,  195,  776,  195,
      195,  646,  644,  195,  647,  195,  195,  195,  195,  195,
      195,  774,  775,  195,  195,  195,  648,  195, 1143,  195,
     1143,  195,  649,  195,  195,  776,  195,  195,  646,  195,

      195,  647,  195,  195, 1143,  195,  195,  195,  777, 1143,
      195,  195,  195, 1143, 1143,  195,  195,  195,  650,  649,
      195,  195,  651,  195,  195, 1143,  195,  195,  778,  195,
      195,  652, 1143,  195,  195,  777,  195,  779,  195,  195,
      195,  654,  195,  195,  195,  650,  195,  195, 1143,  651,
      780,  195,  195,  781,  195,  778,  782,  195,  652,  195,
      195,  195,  783,  195,  779,  195,  195,  195,  654,  653,
      195,  655, 1143,  195, 1143,  195, 1143,  780,  656,  195,
      781,  195,  784,  782,  785,  195,  195,  195, 1143,  783,
     1143,  195,  195,  195,  195,  195,  653,  786,  655,  657,

     1143,  195,  195,  195,  195,  656, 1143, 1143,  195,  784,
      195,  785,  195, 1143,  195,  658, 1143,  195,  195,  195,
      195,  195,  195,  660,  786,  787,  657,  659,  195,  195,
      195,  195, 1143,  195,  195,  195,  788,  195,  789,  195,
      195,  790,  658,  195,  195,  195,  791,  195,  792,  195,
      660,  195,  787,  663,  659,  195,  195,  195,  661,  195,
      195,  195,  195,  788,  662,  789,  195,  195,  790,  195,
      195,  195,  195,  791,  195,  792,  195, 1143,  195, 1143,
      663,  793,  195,  195,  195,  661,  195,  794,  795, 1143,
      195,  662,  195,  796, 1143, 1143,  195,  195,  195,  195,

      664,  195,  665,  667,  195, 1143,  195,  195,  793,  195,
      195,  195,  668,  195,  794,  795,  195,  195,  666,  195,
      796,  195,  195,  195,  195, 1143,  195,  664, 1143,  665,
      667,  195,  195,  195,  195, 1143,  195,  669,  195,  668,
      195,  195,  670,  195,  797,  666,  195,  195,  195,  195,
      195,  798,  671, 1143,  799,  195,  800,  195,  801,  195,
      802, 1143,  195,  195,  669, 1143,  803,  195,  195,  670,
      672,  797, 1143,  195,  195,  804, 1143, 1143,  798,  671,
      195,  799,  195,  800,  195,  801,  805,  802,  673,  195,
      195,  195,  195,  803,  195,  195,  195,  672,  806,  195,

      807, 1143,  804,  195,  195, 1143,  195,  195,  195, 1143,
      674,  195,  808,  805,  809,  673,  810, 1143,  195,  195,
     1143,  895,  195,  195,  675,  806,  195,  807,  195, 1143,
      195,  195,  195,  195,  195,  195,  676,  674,  195,  808,
      678,  809,  195,  810,  195,  677,  195,  195,  895,  896,
      195,  675,  195, 1143,  195,  195,  195,  195,  897,  195,
     1143,  195, 1143,  676,  898,  899,  195,  678,  900,  195,
     1143,  195,  677,  195,  195, 1143,  896,  195, 1143,  195,
      195,  195,  195,  195,  195,  897,  679,  195,  680,  195,
      195,  898,  899,  195,  195,  900,  195,  195,  195,  195,

     1143, 1143,  195, 1143, 1143,  681, 1143,  195,  901,  195,
     1143, 1143, 1143,  679,  195,  680,  195,  195, 1143,  195,
      902,  195, 1143,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  681,  682,  195,  901,  195,  684,  195,  195,
      195,  903,  195,  683,  195,  195,  195,  902, 1143,  195,
     1143, 1143, 1143,  904,  195,  195, 1143,  195,  195,  905,
      682,  195, 1143,  195,  684,  195,  195,  195,  903,  195,
      683,  195,  195,  195,  687,  195,  195,  195,  195,  688,
      904,  195,  686,  195,  195,  685,  905,  195,  195,  195,
     1143,  906, 1143, 1143,  195,  907,  908, 1143,  909,  195,

      195,  687,  195, 1143,  195,  195,  688,  910,  195,  686,
      195,  195,  685,  689,  195,  195,  195,  195,  906,  690,
      195,  195,  907,  908,  195,  909,  195,  195,  911,  195,
      195,  195,  912,  195,  910,  691,  913,  914,  195, 1143,
      689, 1143, 1143,  195,  195,  915,  690,  195,  916, 1143,
      917,  195,  918,  919,  195,  911,  195,  195,  195,  912,
      195, 1143,  691,  913,  914,  195,  195,  692,  195,  195,
      195,  920,  915,  195,  694,  916,  195,  917,  195,  918,
      919,  195,  921,  195,  922,  195,  693, 1143,  195,  923,
      924,  195,  195,  195,  692,  195,  195, 1143,  920,  195,

      195,  694,  195,  195,  695,  195, 1143,  195,  195,  921,
      195,  922,  195,  693,  696,  195,  923,  924,  195,  195,
      697,  195,  195,  925,  195,  928,  195,  195, 1143,  195,
      929,  695,  195,  698,  195,  195,  700,  195, 1143,  195,
      195,  696,  930,  195, 1143,  699,  195,  697,  195,  195,
      925,  195,  928,  195,  195,  195,  195,  929, 1143,  195,
      698,  195,  195,  700,  195,  195,  195,  195, 1143,  930,
      195,  195,  699,  195,  931,  195,  932, 1143, 1143,  195,
      195,  195,  195,  195,  702,  195,  195,  926,  195,  933,
      927,  195,  195,  701,  934,  195,  195,  195,  195,  195,

     1143,  931,  195,  932,  195,  703,  195, 1143,  195,  195,
     1143,  702,  195,  195,  926,  935,  933,  927,  195,  936,
      701,  934,  195,  195,  195,  937,  195,  195, 1143,  195,
     1143,  195,  703,  938,  195,  704,  195,  709,  705,  195,
      195,  195,  935,  939,  940,  195,  936,  195,  941,  942,
      195,  195,  937,  195,  195,  706,  195,  195,  195, 1143,
      938,  195,  704,  195,  709,  705,  195,  195,  195,  943,
      939,  940,  195,  944,  195,  941,  942,  195,  195,  195,
      195,  195,  706,  945,  195,  195,  195,  707, 1143,  946,
      195,  195,  195,  947,  708,  948,  943,  195, 1143,  195,

      944,  195,  949,  950,  195,  195,  195,  195,  195,  195,
      945,  951, 1143,  195,  707,  195,  946,  710,  195,  195,
      947,  708,  948,  952,  195,  195,  195,  953,  195,  949,
      950,  195,  195,  195,  195,  711,  195,  195,  951,  712,
      195,  195,  195,  954,  710,  195,  195,  714,  713,  715,
      952,  195,  195,  195,  953,  195,  955,  195,  195, 1143,
      195,  716,  711,  956,  195, 1143,  712,  195,  195, 1143,
      954,  195,  195,  195,  714,  713,  715, 1143,  195,  717,
      195,  957,  195,  955,  195,  195,  195,  195,  716,  718,
      956, 1143,  195,  195,  195, 1143,  195, 1143,  195,  195,

      195, 1021, 1022,  195,  195, 1143,  717,  719,  957, 1143,
     1143,  195, 1143,  195,  195,  195,  718,  722,  195,  195,
      195,  195,  720,  195,  195,  195,  195,  195, 1021, 1022,
      195,  195,  195,  195,  719,  195,  195,  195,  195,  195,
      195,  721,  195,  723,  722,  195, 1143,  724, 1143,  720,
      195,  195,  195, 1143, 1143, 1023, 1143, 1024,  195,  195,
      195, 1143,  195,  195,  195,  725,  195,  195,  721,  195,
      723, 1143,  195,  195,  724,  195,  195,  195, 1143, 1025,
      195,  195, 1023,  195, 1024,  195,  726,  195,  195, 1143,
      811, 1026,  725, 1143, 1143,  195,  195, 1143,  812,  195,

      195,  195,  195,  195, 1027,  195, 1025,  195,  195,  195,
      195,  195,  195,  726,  195,  195,  195,  811, 1026, 1143,
      815,  813,  195,  195,  195,  812,  814,  195,  195,  195,
     1143, 1027,  195, 1028, 1143, 1143,  195,  817,  195,  195,
     1143,  195,  816,  195,  195,  818,  195,  815,  813,  195,
      195,  195,  195,  814,  195,  195,  195,  195, 1029, 1030,
     1028,  195,  195, 1143,  817,  195, 1031,  195,  195,  816,
     1143,  195,  818,  195, 1032, 1143,  195,  195, 1143,  195,
     1033, 1143,  195,  819,  195, 1029, 1030, 1034,  195,  195,
      195,  195,  195, 1031,  195,  195, 1035,  195,  195,  195,

      195, 1032,  195, 1143,  195,  195,  195, 1033,  195,  195,
      819, 1036,  195,  195, 1034, 1143,  195,  195,  195, 1143,
     1143, 1143,  195, 1035,  195,  195,  195,  195, 1143,  195,
      195, 1037,  195,  195, 1143,  195,  195,  195, 1036,  195,
      195,  195,  820,  195,  195,  821,  195,  195,  195, 1038,
     1143,  195, 1039,  195, 1040,  195, 1041,  195, 1037, 1042,
      195,  195,  195,  822,  195,  195, 1143, 1143,  195,  820,
     1043,  195,  821,  195,  195,  195, 1038,  195,  195, 1039,
      195, 1040,  195, 1041,  195, 1143, 1042,  195,  195,  195,
      822,  195,  195,  195,  195,  195,  823, 1043, 1044, 1045,

      824,  195, 1046,  195,  195,  195, 1047, 1048,  195,  825,
     1049,  195,  826,  195,  195, 1143, 1143, 1143,  195,  195,
      195,  195,  195,  823,  195, 1044, 1045,  824,  195, 1046,
      195, 1050,  195, 1047, 1048,  195,  825, 1049, 1051,  826,
      195,  195,  195,  827,  195,  195,  195,  195, 1052,  195,
     1053,  195, 1054,  195,  195,  195, 1143,  195, 1050,  195,
      828,  829,  195, 1143, 1055, 1051, 1056, 1143, 1143,  195,
      827,  195,  195, 1143,  195, 1052,  195, 1053,  830, 1054,
      195,  195,  195,  195,  195,  195,  195,  828,  829,  195,
      195, 1055,  195, 1056,  195,  195,  832,  195, 1093, 1143,

      831,  195, 1094, 1143, 1095,  830, 1096, 1097,  195, 1143,
      195,  195,  195, 1098, 1143, 1143,  195,  195, 1099,  195,
      833,  195,  195,  832,  195, 1093,  195,  831,  195, 1094,
      834, 1095,  195, 1096, 1097,  195,  195,  195,  195,  195,
     1098,  195,  195,  195, 1100, 1099,  195,  833,  195, 1143,
      195,  195, 1143,  195, 1143,  195, 1143,  834, 1143,  195,
      195, 1143, 1101,  195,  195, 1102,  195, 1103,  195,  195,
     1104, 1100,  195,  195,  195,  195,  835,  195,  195,  195,
     1105,  195,  195,  195,  195,  836, 1106,  195,  195, 1101,
      195, 1107, 1102,  195, 1103, 1123, 1124, 1104,  195,  195,

     1143,  195,  195,  835, 1143,  837,  195, 1105,  195, 1143,
      195,  195,  836, 1106, 1143,  195,  195,  195, 1107,  839,
      195, 1125, 1123, 1124,  195,  195,  195,  840,  195,  195,
      838,  195,  837,  195,  195, 1143,  195, 1126, 1143, 1143,
     1127,  195, 1143,  195,  195, 1143,  839, 1128, 1125, 1143,
     1143,  195,  841,  195,  840,  195,  195,  838,  195, 1143,
      195,  195,  195,  195, 1126,  195,  195, 1127,  195,  195,
      195,  195,  195,  843, 1128,  195,  195,  195, 1135,  841,
      195,  842, 1143,  195,  195,  195,  195,  195, 1143,  195,
      195,  195,  195,  195,  195, 1143,  195,  195, 1136,  195,

      843, 1137,  195,  195,  195, 1135, 1141,  195,  842,  195,
     1143,  195,  195,  195,  195,  844,  195,  195,  195, 1143,
      195,  195,  195,  195,  195, 1136,  195,  195, 1137,  195,
     1143,  195,  195, 1141,  195,  845,  195,  195,  195, 1143,
      195,  195,  844,  195, 1143, 1143, 1143,  195,  846,  195,
      195,  195,  195,  195,  195,  195,  195, 1143,  195,  195,
     1143,  195,  845, 1143,  195,  195,  195,  195,  195, 1143,
     1143, 1143, 1143, 1143,  195,  846,  847,  195,  195,  195,
      195,  195,  195, 1143, 1143,  195,  195, 1143,  195,  848,
      195, 1143,  195,  195,  195,  195,  195, 1143, 1143, 1143,

      849,  195,  195,  847,  195,  195,  850,  195,  195,  195,
     1143, 1143,  195,  195, 1143,  195,  848,  195, 1143,  195,
      195,  195,  195,  195, 1143, 1143, 1143,  849,  195,  195,
      195,  852,  851,  850, 1143,  195,  195, 1143,  195, 1143,
     1143,  195,  853, 1143, 1143,  195, 1143,  195, 1143,  195,
     1143, 1143, 1143,  195, 1143,  195,  195,  195,  852,  851,
     1143, 1143,  195, 1143, 1143,  195, 1143, 1143,  195,  853,
     1143, 1143,  195, 1143, 1143,  854,  195,  195, 1143,  195,
      195,  195,  195,  195, 1143, 1143,  195,  195,  195, 1143,
      195,  195, 1143, 1143, 1143,  195, 1143, 1143, 1143, 1143,

      195, 1143,  854, 1143,  195, 1143,  195, 1143,  195,  195,
     1143, 1143, 1143,  195,  195,  195, 1143,  195,  195,  195,
     1143,  195,  195, 1143, 1143, 1143,  195,  195,  195, 1143,
      195,  195,  195, 1143,  195,  195,  855, 1143, 1143,  195,
      195, 1143, 1143, 1143,  195, 1143,  195, 1143,  195, 1143,
     1143, 1143, 1143,  195, 1143,  195, 1143,  195,  195,  195,
     1143,  195,  195,  855, 1143, 1143,  195,  195,  856, 1143,
      195,  195,  195,  857,  195,  195, 1143,  195, 1143,  195,
      195, 1143, 1143,  195,  195, 1143, 1143, 1143, 1143, 1143,
     1143,  195, 1143,  195, 1143,  856, 1143,  195,  860,  195,

      857,  195,  195, 1143,  195,  195,  195,  195,  195, 1143,
      195,  195, 1143, 1143,  195, 1143,  195,  195,  195, 1143,
      195,  858,  859,  195,  195,  860,  195, 1143, 1143, 1143,
      195,  195,  195, 1143,  861,  195, 1143,  195, 1143, 1143,
      195,  195, 1143,  195,  195,  195, 1143,  862,  858,  859,
      195,  195,  195,  195, 1143, 1143,  863,  195,  195,  195,
      195,  861,  195,  195,  195, 1143,  195,  195,  195, 1143,
      195, 1143,  195, 1143,  862,  195,  195,  195, 1143,  195,
      864, 1143,  195,  863,  195,  865,  195,  195, 1143,  195,
      195,  195, 1143,  195, 1143,  195,  866,  195,  195,  195,

     1143,  195,  195,  195,  195, 1143,  195,  864, 1143,  195,
      867,  195,  865,  195, 1143,  868,  195,  195,  195, 1143,
     1143, 1143,  195,  866,  195,  195,  195,  195,  195,  195,
     1143,  195,  195,  195, 1143, 1143, 1143,  867,  195, 1143,
      195, 1143,  868,  195,  195,  195,  195, 1143,  195,  195,
      869,  195, 1143,  195,  195, 1143,  195,  195,  195,  195,
      195, 1143, 1143,  871,  195,  195, 1143, 1143, 1143,  870,
     1143,  195,  195,  195,  195,  195, 1143,  869,  195, 1143,
      195, 1143, 1143, 1143,  195,  195, 1143,  195, 1143, 1143,
      871,  195,  195,  195,  873,  195,  870,  872,  195,  195,

      195,  195,  195, 1143,  875,  195,  195,  195, 1143,  195,
      195,  874,  195,  195,  195, 1143,  195, 1143, 1143,  195,
      195,  873,  195, 1143,  872, 1143,  195,  195, 1143,  195,
     1143,  875, 1143,  195,  195,  876,  195,  195,  874, 1143,
      195,  195, 1143,  195,  195,  195,  195,  195,  877,  878,
      195,  195,  195,  195, 1143,  195,  195,  195, 1143,  195,
      195, 1143,  876, 1143, 1143, 1143, 1143, 1143, 1143,  195,
     1143,  195,  195,  195,  195,  877,  878,  195,  195,  195,
      195,  195,  195,  195,  195,  879,  195,  195, 1143,  880,
      195,  195, 1143,  195,  195, 1143,  195, 1143, 1143,  195,

      881,  195, 1143,  195, 1143, 1143, 1143,  195,  195,  195,
      195, 1143,  879,  195, 1143,  195,  880,  195,  195,  195,
      195,  195, 1143,  195, 1143,  195,  195,  881,  195, 1143,
      195,  195, 1143,  195,  195,  195,  195,  195,  882, 1143,
      195,  195,  195,  195, 1143,  883,  195,  195, 1143,  195,
      195,  195,  195, 1143,  884, 1143, 1143, 1143,  195,  195,
      195,  195,  195, 1143, 1143,  882, 1143, 1143,  195, 1143,
      195, 1143,  883,  195,  195,  195,  195,  195,  195,  886,
      195,  884,  885, 1143,  195,  195,  195, 1143,  195,  195,
     1143,  195, 1143,  195, 1143, 1143, 1143, 1143,  195, 1143,

      195, 1143,  195,  195,  195, 1143,  886,  195, 1143,  885,
      888,  195,  195, 1143,  195, 1143,  195,  195,  195, 1143,
      195,  195,  195, 1143,  195,  195,  195,  195,  195,  887,
      195, 1143, 1143, 1143, 1143,  195, 1143,  888,  195, 1143,
      889,  195, 1143, 1143,  195, 1143, 1143, 1143,  195,  195,
     1143,  195,  195,  195,  195,  195,  887, 1143,  890,  195,
      891,  195,  195, 1143,  195,  195,  195,  889,  892,  195,
      195, 1143, 1143, 1143, 1143,  195, 1143, 1143,  195,  195,
      195, 1143, 1143, 1143, 1143,  890,  195,  891,  195, 1143,
     1143,  195,  195,  195, 1143,  892,  195,  195, 1143,  195,

      195, 1143,  195, 1143, 1143,  195,  195,  195,  195,  195,
      195, 1143,  195, 1143, 1143,  893, 1143, 1143,  195,  195,
      894, 1143,  195, 1143,  195,  195,  195,  195,  195, 1143,
      195, 1143,  195,  195, 1143,  195,  195,  195,  195,  195,
      195, 1143,  893, 1143, 1143,  195,  195,  894,  195,  195,
      195,  195,  195, 1143,  195,  195,  195,  195,  195,  195,
     1143, 1143, 1143, 1143,  195,  195,  195,  195,  195, 1143,
     1143, 1143,  195,  195,  195,  195,  195,  195,  195, 1143,
      195,  195, 1143,  195, 1143,  195,  195, 1143,  195, 1143,
      959,  195, 1143,  195,  195,  195,  195,  958,  195,  195,

      195,  195,  195,  195, 1143,  195, 1143,  195,  195, 1143,
      195, 1143,  960,  195, 1143,  195,  195,  959,  195, 1143,
     1143,  195,  195,  195,  958,  195,  195,  195, 1143,  195,
      195, 1143,  195,  962, 1143,  195,  195,  195, 1143,  960,
      195,  961, 1143,  195, 1143,  195,  195,  195,  195,  195,
      195,  963, 1143,  195, 1143,  195, 1143,  195, 1143,  195,
      962, 1143,  195,  195,  195,  195, 1143,  195,  961, 1143,
     1143, 1143,  964,  195,  195,  195,  195,  195,  963,  195,
     1143, 1143,  195, 1143, 1143, 1143,  195, 1143,  195,  195,
     1143,  195,  195, 1143,  195,  195, 1143, 1143,  195,  964,

      965,  195,  966,  195,  967,  195,  195, 1143,  195, 1143,
     1143, 1143, 1143,  195,  195,  195,  195, 1143, 1143, 1143,
      195,  195,  195, 1143,  195,  195,  195,  965,  195,  966,
      195,  967,  195, 1143,  968,  195,  195,  971,  195,  195,
      195,  195,  195,  195,  195,  970, 1143,  195,  969,  195,
      195,  195,  195,  195, 1143, 1143, 1143,  195,  195,  195,
     1143,  968,  195,  195,  971,  195,  195,  195, 1143,  195,
      972,  195,  970, 1143,  195,  969,  195,  195,  195,  195,
      195, 1143,  195,  195, 1143,  195,  195,  973,  195,  195,
      195, 1143,  195,  195,  975, 1143,  195,  972,  195,  195,

      195,  195, 1143,  195,  195,  195,  195,  195,  976,  195,
      195,  974,  195, 1143,  973,  195,  195,  195,  195,  195,
      195,  975, 1143,  195, 1143,  195,  195,  195,  195, 1143,
      195,  195,  977,  195, 1143,  976,  195, 1143,  974,  195,
     1143, 1143,  195,  195,  195,  195,  195,  195,  981, 1143,
      195,  195,  195, 1143,  195,  195,  195,  195,  195,  977,
      195,  978,  979,  195,  195,  980,  195,  195, 1143,  195,
      195,  195, 1143,  195,  195,  981, 1143,  195,  195,  195,
     1143,  195, 1143,  195,  195,  195, 1143,  195,  978,  979,
     1143,  195,  980,  195,  195,  195,  982,  195,  195,  195,

      195, 1143,  195, 1143,  195,  195, 1143, 1143,  195,  984,
      195,  195, 1143, 1143, 1143,  195,  195, 1143,  195, 1143,
      195,  195,  195,  982,  195,  195,  195,  195,  195,  195,
     1143,  195,  195, 1143,  195,  195,  984,  195,  195,  983,
     1143, 1143,  195,  195,  195,  195, 1143,  195,  195, 1143,
      195,  195,  195,  985, 1143,  195, 1143,  195,  195, 1143,
      195,  195,  195, 1143, 1143,  195,  983, 1143, 1143, 1143,
      195,  195, 1143, 1143,  195, 1143,  195,  195, 1143,  195,
      985,  195, 1143, 1143,  195,  195,  195,  195,  195,  195,
      195, 1143,  195, 1143, 1143,  195,  986,  195, 1143, 1143,

      195,  195,  195,  195,  195, 1143, 1143, 1143,  195,  195,
     1143, 1143, 1143,  195,  195,  195, 1143,  195,  195, 1143,
      195, 1143,  195,  986, 1143,  195,  195,  195,  195,  195,
      195,  195, 1143,  195,  987, 1143,  195, 1143,  195,  988,
     1143,  195, 1143,  195,  195,  195,  195,  195, 1143,  195,
     1143,  989,  195,  195,  990,  195,  195,  195, 1143,  195,
      195,  987,  991, 1143,  195,  195,  988, 1143, 1143,  195,
      195,  195, 1143,  195,  195,  195,  195,  195,  989, 1143,
     1143,  990,  195,  195, 1143, 1143,  195,  195,  195,  991,
      195,  195, 1143, 1143, 1143,  195,  195, 1143, 1143, 1143,

      195,  195,  195, 1143,  195, 1143,  195, 1143,  195,  195,
     1143, 1143, 1143,  195,  195,  195, 1143,  195,  195,  195,
     1143,  195,  195, 1143,  992, 1143,  195,  195,  195, 1143,
     1143,  195,  195,  195,  195,  195,  195, 1143, 1143, 1143,
      195, 1143,  195,  993,  195,  195,  195, 1143,  195, 1143,
      195,  992,  195,  195, 1143,  195, 1143,  195,  195,  195,
      195,  195, 1143,  195, 1143, 1143,  195, 1143, 1143,  195,
      993,  195, 1143,  994,  195,  195, 1143,  195, 1143,  195,
      195,  195,  195,  195,  195, 1143,  996,  195,  195,  195,
      195,  195,  195,  195,  995, 1143,  195,  195, 1143, 1143,

      994,  195,  195, 1143,  195, 1143,  195,  195,  195,  195,
      195,  195, 1143,  996,  195,  195,  195,  195,  195,  195,
      195,  995,  195,  195,  195, 1143, 1143,  195, 1143,  195,
     1143,  195, 1143,  195,  195, 1143,  195,  997,  195,  998,
      999,  195, 1000, 1143,  195, 1143,  195,  195, 1143,  195,
      195, 1143,  195, 1143,  195,  195,  195, 1143, 1143, 1001,
      195,  195,  195,  195,  997,  195,  998,  999,  195, 1000,
     1143,  195,  195,  195, 1143,  195, 1002,  195,  195,  195,
     1143, 1143,  195,  195, 1003, 1143, 1001,  195,  195,  195,
      195,  195,  195,  195, 1143,  195, 1143, 1143,  195,  195,

     1143,  195,  195, 1002, 1143,  195, 1143, 1143, 1143,  195,
      195, 1003, 1004, 1143, 1143,  195,  195,  195,  195, 1143,
      195, 1143, 1143,  195, 1143,  195,  195,  195,  195, 1143,
     1143, 1143, 1143, 1143,  195, 1143,  195, 1143,  195, 1004,
     1143,  195, 1006,  195,  195, 1143, 1005, 1143,  195, 1143,
      195, 1007,  195,  195,  195, 1143,  195, 1143,  195, 1143,
     1008,  195,  195, 1143, 1143,  195, 1143,  195,  195, 1006,
     1143,  195,  195, 1005,  195,  195, 1143,  195, 1007,  195,
     1143,  195, 1143,  195,  195,  195,  195, 1008,  195,  195,
      195, 1009, 1012,  195,  195,  195,  195,  195, 1010,  195,

      195,  195,  195, 1143,  195, 1143, 1143,  195,  195, 1143,
      195,  195, 1011,  195, 1013,  195, 1143,  195, 1009, 1012,
      195,  195,  195,  195,  195, 1010, 1014,  195,  195,  195,
     1143,  195, 1143,  195,  195,  195, 1143,  195, 1143, 1011,
      195, 1013,  195,  195, 1143, 1143, 1015, 1143,  195,  195,
      195, 1143,  195, 1014, 1143,  195,  195, 1143,  195, 1143,
      195, 1017,  195, 1016,  195,  195,  195,  195,  195,  195,
      195,  195, 1143, 1015,  195, 1143,  195,  195, 1143,  195,
     1143,  195, 1143,  195,  195, 1143, 1143, 1143, 1017, 1143,
     1016,  195,  195,  195, 1143,  195,  195,  195,  195,  195,

      195,  195, 1143, 1019, 1018, 1020,  195, 1143,  195,  195,
      195,  195,  195, 1143, 1143, 1143,  195,  195, 1143,  195,
      195,  195,  195,  195,  195, 1143,  195,  195,  195, 1143,
     1019, 1018, 1020,  195, 1143,  195,  195,  195,  195,  195,
     1143, 1057, 1143,  195,  195,  195,  195,  195,  195,  195,
      195,  195, 1143, 1143,  195,  195, 1143,  195, 1143, 1058,
      195,  195,  195, 1143,  195,  195, 1143, 1143, 1057,  195,
      195, 1143,  195,  195, 1143,  195, 1143,  195,  195, 1143,
      195,  195, 1143, 1143,  195,  195, 1058,  195,  195, 1143,
     1143,  195,  195, 1143, 1059, 1143,  195,  195, 1143,  195,

      195,  195,  195,  195,  195, 1060, 1143,  195, 1061,  195,
     1143, 1143,  195,  195, 1143,  195, 1143, 1143, 1143,  195,
     1143, 1059,  195, 1143,  195,  195,  195, 1143,  195,  195,
      195,  195, 1060, 1143,  195, 1061,  195, 1143, 1143, 1143,
      195, 1062,  195,  195, 1143, 1143, 1143, 1143,  195,  195,
     1143,  195,  195,  195, 1143,  195,  195,  195, 1143, 1143,
     1143,  195,  195, 1143,  195, 1063,  195,  195, 1062, 1143,
      195,  195, 1143, 1143, 1064,  195,  195, 1143, 1143, 1143,
      195, 1143,  195,  195,  195,  195, 1143, 1143, 1143,  195,
      195,  195, 1063,  195,  195,  195, 1143, 1065,  195,  195,

     1143, 1064, 1143,  195,  195, 1143,  195, 1143,  195,  195,
      195, 1143,  195,  195, 1066, 1143, 1143,  195,  195, 1143,
     1143, 1143,  195, 1143, 1065,  195,  195,  195, 1143, 1143,
     1143,  195,  195,  195, 1067,  195,  195,  195, 1143, 1143,
      195, 1066, 1143, 1143,  195,  195,  195, 1143,  195, 1143,
      195,  195,  195, 1143,  195,  195,  195, 1143, 1068,  195,
      195, 1067, 1143, 1143,  195, 1143, 1143,  195, 1143,  195,
     1143,  195, 1143,  195,  195,  195, 1143,  195,  195,  195,
     1143, 1143,  195,  195, 1143, 1068,  195,  195,  195, 1143,
      195, 1143,  195,  195,  195, 1143,  195,  195,  195, 1143,

     1143,  195,  195, 1143, 1143, 1143,  195, 1143, 1069,  195,
     1143,  195,  195,  195, 1143,  195,  195,  195,  195,  195,
      195,  195,  195, 1143,  195,  195,  195, 1143,  195,  195,
     1143, 1143,  195, 1143, 1143, 1069,  195, 1143,  195,  195,
     1143, 1143,  195,  195,  195,  195, 1070, 1143,  195,  195,
      195,  195,  195,  195, 1143,  195,  195,  195, 1071,  195,
     1143, 1143,  195,  195, 1143,  195, 1143, 1143, 1143,  195,
      195,  195, 1143, 1070,  195,  195,  195,  195,  195,  195,
     1143,  195, 1143,  195,  195, 1071,  195, 1143, 1143,  195,
      195, 1143,  195,  195, 1143,  195, 1143,  195, 1143, 1143,

      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
     1143,  195, 1143,  195,  195, 1143,  195, 1143, 1143,  195,
      195, 1143,  195,  195, 1143, 1073, 1143,  195, 1143,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195, 1143,
     1072,  195, 1143,  195, 1074,  195,  195, 1143, 1143, 1143,
      195,  195, 1073, 1143, 1143, 1143,  195,  195,  195,  195,
     1143,  195,  195,  195,  195, 1143,  195, 1072, 1143, 1143,
      195, 1074,  195,  195, 1143, 1143,  195,  195,  195, 1143,
      195, 1143, 1075, 1143,  195,  195,  195, 1143,  195,  195,
      195, 1076, 1143,  195,  195, 1143, 1143,  195,  195, 1143,

      195, 1143, 1143,  195,  195,  195,  195,  195,  195, 1075,
      195,  195, 1143,  195, 1143, 1143,  195,  195, 1076, 1143,
      195,  195, 1143,  195,  195,  195, 1078,  195, 1143, 1077,
      195, 1143,  195,  195, 1143,  195,  195,  195,  195, 1143,
      195, 1143,  195, 1143,  195,  195,  195,  195,  195, 1143,
      195,  195,  195, 1078,  195, 1143, 1077,  195, 1079,  195,
      195, 1143, 1080,  195,  195,  195, 1081,  195, 1143,  195,
     1143,  195,  195,  195,  195,  195, 1143,  195,  195,  195,
     1143,  195, 1143, 1143, 1143, 1079,  195,  195, 1143, 1080,
     1143,  195, 1143, 1081,  195,  195, 1143, 1082,  195, 1143,

     1143,  195,  195, 1143,  195,  195, 1143, 1143,  195,  195,
     1143,  195,  195,  195,  195, 1143,  195, 1143, 1083, 1143,
     1143,  195,  195,  195, 1082,  195,  195,  195, 1143,  195,
     1143, 1143,  195, 1143, 1143, 1143,  195,  195,  195,  195,
      195,  195, 1143,  195,  195, 1083, 1084, 1143,  195, 1143,
      195,  195,  195,  195,  195,  195,  195,  195, 1085,  195,
      195, 1143,  195, 1143,  195,  195, 1143,  195, 1143, 1143,
      195,  195, 1143, 1084,  195, 1143,  195, 1143,  195, 1143,
     1143,  195,  195,  195,  195, 1085,  195,  195, 1086,  195,
     1143, 1143,  195, 1087,  195,  195, 1143,  195, 1143, 1143,

      195,  195,  195,  195,  195,  195, 1143,  195,  195, 1143,
      195,  195, 1143,  195, 1143, 1086, 1143, 1143,  195, 1143,
     1087,  195,  195, 1088, 1143, 1143,  195,  195, 1089,  195,
     1143,  195,  195,  195,  195,  195, 1143,  195,  195, 1143,
      195, 1143,  195,  195,  195,  195, 1143, 1143,  195,  195,
     1088,  195,  195,  195, 1090, 1089, 1143, 1143,  195, 1143,
      195,  195,  195, 1143, 1143, 1143,  195,  195, 1143,  195,
      195,  195, 1143,  195, 1143,  195,  195,  195,  195,  195,
      195, 1090,  195,  195,  195,  195, 1143, 1143,  195,  195,
     1143,  195,  195,  195,  195, 1143, 1143, 1143,  195, 1143,

      195, 1092,  195,  195,  195,  195, 1143,  195,  195,  195,
      195,  195,  195,  195, 1143, 1091,  195, 1143,  195,  195,
     1143,  195,  195, 1143,  195,  195, 1143, 1143, 1092,  195,
      195,  195,  195,  195,  195,  195, 1143, 1143,  195,  195,
      195, 1143, 1091,  195, 1143,  195, 1143,  195, 1143,  195,
     1143,  195,  195, 1143, 1143, 1143,  195,  195,  195, 1143,
      195,  195, 1143, 1143,  195,  195,  195, 1143, 1143, 1143,
      195,  195,  195,  195,  195,  195,  195, 1143, 1143,  195,
      195, 1143, 1143, 1143,  195,  195, 1108,  195, 1143,  195,
      195,  195, 1143,  195,  195, 1143,  195, 1143,  195,  195,

      195, 1109,  195,  195, 1143, 1143,  195,  195,  195, 1143,
     1143, 1143,  195, 1108,  195,  195,  195,  195,  195, 1143,
      195,  195,  195,  195, 1143, 1143,  195,  195, 1109,  195,
     1143, 1143, 1143,  195,  195,  195,  195,  195, 1143,  195,
     1110, 1143,  195, 1143,  195,  195, 1143,  195, 1143,  195,
      195, 1143, 1143, 1143,  195,  195,  195, 1143,  195,  195,
      195,  195,  195,  195,  195,  195,  195, 1110,  195, 1143,
     1111,  195, 1143, 1143, 1143,  195, 1143,  195,  195, 1143,
      195, 1143,  195, 1143,  195,  195,  195,  195, 1143,  195,
      195, 1143,  195, 1143,  195,  195, 1143, 1111,  195,  195,

      195, 1143,  195,  195,  195,  195, 1112,  195,  195,  195,
     1143,  195,  195, 1143,  195, 1143, 1143,  195,  195,  195,
     1143,  195, 1113, 1143,  195,  195,  195,  195,  195,  195,
      195,  195, 1143, 1112,  195,  195,  195, 1143, 1143,  195,
      195,  195,  195,  195, 1115,  195,  195,  195,  195, 1113,
      195,  195,  195, 1143,  195,  195,  195,  195,  195, 1143,
     1114,  195,  195, 1143,  195, 1143, 1143,  195,  195,  195,
      195, 1115,  195, 1143,  195,  195,  195,  195,  195,  195,
     1143,  195,  195, 1143,  195,  195,  195, 1114, 1143,  195,
      195,  195,  195, 1143, 1143,  195,  195, 1143, 1143,  195,

      195, 1143, 1143,  195,  195,  195,  195, 1143,  195,  195,
      195, 1143,  195,  195, 1117, 1116, 1143,  195,  195,  195,
      195, 1143, 1143,  195, 1143, 1143,  195,  195,  195, 1143,
      195,  195, 1143,  195,  195,  195,  195,  195,  195,  195,
     1143, 1117, 1116, 1143,  195,  195,  195,  195,  195, 1118,
     1143, 1143,  195,  195,  195,  195, 1143,  195,  195, 1143,
      195,  195, 1143,  195, 1143,  195, 1143,  195,  195, 1143,
     1143,  195, 1143,  195,  195,  195, 1118, 1119, 1143,  195,
     1143,  195,  195, 1143, 1143,  195,  195,  195, 1143,  195,
     1143, 1143, 1143,  195,  195,  195,  195, 1143, 1120,  195,

      195,  195, 1143,  195, 1119,  195, 1143, 1143, 1143,  195,
     1143, 1122,  195,  195, 1143,  195,  195, 1143, 1143,  195,
      195,  195,  195,  195, 1121, 1120,  195,  195, 1143, 1143,
      195,  195,  195,  195, 1143, 1143, 1143,  195, 1122,  195,
     1143, 1143,  195,  195, 1143, 1143,  195, 1143,  195,  195,
     1143, 1121,  195,  195, 1143,  195,  195,  195,  195,  195,
      195,  195,  195, 1143,  195,  195, 1143,  195, 1143, 1143,
      195, 1143,  195, 1143, 1143,  195, 1143,  195, 1143,  195,
      195,  195,  195,  195,  195,  195,  195, 1143,  195,  195,
     1143,  195,  195,  195,  195, 1143, 1129,  195, 1143,  195,

     1143,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195, 1143,  195,  195,  195,  195, 1143,
      195, 1130, 1143, 1129,  195,  195,  195,  195,  195, 1143,
      195, 1143,  195,  195,  195, 1143,  195,  195,  195, 1143,
      195, 1143,  195,  195,  195, 1143, 1143, 1143, 1130,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195, 1143,
     1143, 1143,  195,  195,  195,  195, 1131,  195,  195,  195,
     1143, 1143,  195, 1143, 1143, 1143,  195,  195,  195, 1143,
     1143, 1143,  195,  195,  195,  195, 1143, 1143, 1143,  195,
      195,  195,  195, 1131,  195,  195,  195,  195,  195,  195,

      195,  195,  195, 1143, 1134, 1143, 1143,  195,  195, 1133,
      195, 1143,  195, 1143, 1143, 1143,  195, 1132,  195, 1143,
      195, 1143,  195, 1143,  195,  195, 1143,  195,  195,  195,
     1143, 1134,  195, 1143,  195,  195, 1133,  195, 1138,  195,
     1143, 1143,  195,  195, 1132,  195,  195,  195,  195,  195,
      195, 1143, 1143, 1143, 1143,  195,  195,  195,  195,  195,
      195, 1143, 1139, 1143,  195, 1138,  195,  195, 1143,  195,
     1140, 1143, 1143,  195,  195,  195,  195,  195, 1143, 1143,
      195,  195,  195,  195,  195,  195,  195,  195,  195, 1139,
      195,  195,  195,  195,  195,  195,  195, 1140, 1143, 1143,

      195,  195,  195,  195, 1143, 1143,  195,  195,  195, 1143,
      195, 1143,  195,  195, 1143,  195,  195,  195,  195,  195,
     1142, 1143,  195,  195, 1143,  195,  195,  195, 1143,  195,
      195, 1143, 1143,  195,  195, 1143,  195,  195, 1143,  195,
     1143,  195, 1143,  195, 1143,  195,  195, 1142, 1143, 1143,
     1143, 1143,  195,  195, 1143, 1143, 1143,  195, 1143, 1143,
     1143,  195, 1143,  195, 1143, 1143, 1143, 1143,  195, 1143,
     1143, 1143, 1143,  195,   47,   47,   47,   47,   47,   90,
     1143, 1143,   90,   90,  181,  181,  181, 1143,  181,  183,
     1143,  183,  183,  183,  186, 1143,  186,  186,  186,  195,

     1143,  195,  195,  195,    7, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143
    } ;

static const flex_int16_t yy_chk[7373] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   15, 1146,
       15,   17,   17,   18,   18,   21,   22,   21,   50,   50,
       22,   23,   30,   21,  393,   21,   22,   56,   23,   56,
       21,   31,  278,   37,  190,   23,   22,   24,   23,  189,
       27,   24,   21,   22,   21,   24,   27,   22,   23,   30,
       21,   24,   21,   22,   24,   23,   28,   21,   31,   25,
       37,   25,   23,   22,   24,   23,   25,   27,   24,   29,

       28,   25,   24,   27,  186,   29,   29,   29,   24,   42,
       94,   24,   29,   28,   51,   51,   25,   42,   25,   93,
       32,   33,   90,   25,   32,   33,   29,   28,   25,   26,
       32,   33,   29,   29,   29,   87,   42,   26,   61,   29,
       26,   34,   36,   26,   42,   45,   26,   32,   33,   26,
       38,   32,   33,   36,   38,   34,   26,   32,   33,   36,
       38,   34,   34,   35,   26,   43,   43,   26,   34,   36,
       26,   35,   45,   26,   60,   35,   26,   38,   35,   57,
       36,   38,   34,   58,   58,   53,   36,   38,   34,   34,
       35,   52,   43,   43,   41,   78,   41,  100,   35,   41,

       59,   59,   35,   78,  101,   35,   39,   78,   39,   48,
       78,   39,   88,   88,   92,   92,   39,   46,   39,   39,
       20,   41,   78,   41,  100,   68,   41,  184,  184,   19,
       78,  101,   68,   39,   78,   39,   68,   78,   39,   68,
       72,  102,   68,   39,   72,   39,   39,   40,  104,  102,
       72,   40,   68,  103,   40,   40,  103,  106,  107,   68,
       72,   40,  110,   68,   40,   16,   68,   72,  102,   68,
       11,   72,  188,  188,   40,  104,  102,   72,   40,    7,
      103,   40,   40,  103,  106,  107,    4,   72,   40,  110,
        3,   40,   62,   62,    0,   62,   62,   62,   62,   62,

       62,    0,   62,   62,   62,   69,  113,   71,   62,  116,
       62,  113,   69,   82,   71,   82,   62,   82,   62,   69,
       82,   71,   69,   62,   71,   82,  111,  111,  111,  117,
      111,    0,   69,  113,   71,   62,  116,   62,  113,   69,
       82,   71,   82,   62,   82,   62,   69,   82,   71,   69,
       62,   71,   82,  111,  111,  111,  117,  111,   62,   63,
       63,    0,   63,   63,   63,   63,   63,   63,   73,   63,
       63,   63,   73,   74,  109,   85,   63,   74,   73,  118,
       63,  109,   85,   74,  115,  115,   63,  112,   73,   85,
      119,  120,   85,   74,    0,   73,   63,  112,    0,   73,

       74,  109,   85,   63,   74,   73,  118,   63,  109,   85,
       74,  115,  115,   63,  112,   73,   85,  119,  120,   85,
       74,   77,  122,   63,  112,   63,   64,   79,   77,  123,
       64,   79,   77,   64,   64,   77,  124,   79,   77,  125,
       64,  126,  127,   64,    0,    0,    0,   79,   77,  122,
       64,    0,  128,   64,   79,   77,  123,   64,   79,   77,
       64,   64,   77,  124,   79,   77,  125,   64,  126,  127,
       64,  105,  105,   83,   79,    0,  129,   64,   65,  128,
       83,   83,   65,  131,   86,  105,   65,   83,   86,  133,
       83,    0,   65,  130,   86,   65,  130,  134,  105,  105,

       83,  136,   65,  129,   86,   65,  137,   83,   83,   65,
      131,   86,  105,   65,   83,   86,  133,   83,   84,   65,
      130,   86,   65,  130,  134,   84,   84,    0,  136,   65,
       66,   86,   84,  137,   66,   84,  114,   66,  114,   66,
       66,  114,  138,  139,   66,   84,  140,  114,  140,   66,
       66,    0,   84,   84,  114,    0,  142,   66,    0,   84,
        0,   66,   84,  114,   66,  114,   66,   66,  114,  138,
      139,   66,  135,  140,  114,  140,   66,   66,   67,  143,
      144,  114,  135,  142,  145,   67,   67,  135,  135,   67,
      146,  121,   67,  121,  147,   67,  148,  121,   67,  135,

        0,  149,    0,  151,  121,   67,  143,  144,  121,  135,
      152,  145,   67,   67,  135,  135,   67,  146,  121,   67,
      121,  147,   67,  148,  121,   67,   70,  141,  149,  141,
      151,  121,   70,   70,   70,  121,  153,  152,  154,   70,
      141,  156,  155,  157,   70,    0,  155,  158,  157,  159,
      160,    0,    0,   70,  141,  162,  141,  163,  164,   70,
       70,   70,    0,  153,  165,  154,   70,  141,  156,  155,
      157,   70,   75,  155,  158,  157,  159,  160,  161,   75,
      166,  168,  162,  170,  163,  164,   75,  161,  173,   75,
      174,  165,   75,   75,    0,  161,  169,  169,  167,   75,

      172,    0,  177,  172,    0,  161,   75,  166,  168,  167,
      170,    0,  171,   75,  161,  173,   75,  174,  178,   75,
       75,   76,  161,  169,  169,  167,   76,  172,   76,  177,
      172,  175,  171,  176,   76,   76,  167,  175,   76,  171,
      179,   76,    0,    0,    0,  178,  176,    0,   76,    0,
      280,    0,    0,   76,    0,   76,    0,    0,  175,  171,
      176,   76,   76,    0,  175,   76,  195,  179,   76,   80,
      195,   80,  282,  176,   80,   80,  195,  280,  205,   80,
      205,   80,   80,  196,  196,  205,  195,  283,  196,  286,
      205,   80,    0,  195,  196,  287,   80,  195,   80,  282,

        0,   80,   80,  195,  196,  205,   80,  205,   80,   80,
      196,  196,  205,  195,  283,  196,  286,  205,   80,   81,
      197,  196,  287,   81,  197,  288,   81,   81,  289,  290,
      197,  196,  291,   81,  293,  197,   81,  198,  294,  198,
      197,  295,  296,    0,  198,  198,   81,  197,    0,  198,
       81,  197,  288,   81,   81,  289,  290,  197,    0,  291,
       81,  293,  197,   81,  198,  294,  198,  197,  295,  296,
      199,  198,  198,  199,  202,  202,  198,  199,  200,  297,
      200,  214,  202,  214,  199,  200,  202,  199,  214,  202,
      298,  299,  200,  214,  300,  200,    0,  199,    0,    0,

      199,  202,  202,  302,  199,  200,  297,  200,  214,  202,
      214,  199,  200,  202,  199,  214,  202,  298,  299,  200,
      214,  300,  200,  201,  201,  203,  204,  206,  303,  304,
      302,  201,  203,  204,  206,  201,  306,  201,  201,  203,
      204,  206,  203,  204,  206,    0,    0,    0,  307,    0,
      201,  201,  203,  204,  206,  303,  304,    0,  201,  203,
      204,  206,  201,  306,  201,  201,  203,  204,  206,  203,
      204,  206,  207,  207,  207,  307,  207,  208,  209,  207,
      308,  208,  209,  211,  207,  211,  309,  208,  209,  211,
      211,  310,  311,  209,    0,  211,  313,  208,  209,  207,

      207,  207,    0,  207,  208,  209,  207,  308,  208,  209,
      211,  207,  211,  309,  208,  209,  211,  211,  310,  311,
      209,  212,  211,  313,  208,  209,  210,  305,  210,  212,
      213,  210,  314,  212,  213,    0,  212,  210,    0,  210,
      213,  315,  305,    0,  210,  292,    0,  292,  212,  210,
      213,  316,    0,  210,  305,  210,  212,  213,  210,  314,
      212,  213,  292,  212,  210,  215,  210,  213,  315,  305,
      216,  210,  292,  215,  292,  215,  210,  213,  316,  216,
      215,  216,  317,  220,  318,  215,  216,  220,    0,  292,
        0,  216,  215,  220,    0,    0,  319,  216,    0,    0,

      215,    0,  215,  220,    0,    0,  216,  215,  216,  317,
      220,  318,  215,  216,  220,  218,    0,  218,  216,  217,
      220,  217,  218,  319,  320,  217,  219,  218,  219,  321,
      220,  217,  217,  219,  322,  221,  217,    0,  219,    0,
      323,  217,  218,  221,  218,  324,  217,  221,  217,  218,
      221,  320,  217,  219,  218,  219,  321,    0,  217,  217,
      219,  322,  221,  217,  223,  219,  223,  323,  217,  222,
      221,  223,  324,  222,  221,    0,  223,  221,  325,  222,
      326,  327,  224,    0,  225,    0,  224,  328,  225,  222,
        0,  223,  224,  223,  225,    0,  222,  329,  223,    0,

      222,    0,  224,  223,  225,  325,  222,  326,  327,  224,
      226,  225,  226,  224,  328,  225,  222,  226,  227,  224,
      226,  225,  226,  330,  329,    0,  227,    0,  228,  224,
      227,  225,    0,  227,  331,    0,  228,  226,  229,  226,
      228,  332,  229,  228,  226,  227,    0,  226,  229,  226,
      330,    0,  232,  227,  232,  228,  333,  227,  229,  232,
      227,  331,  230,  228,  232,  229,  230,  228,  332,  229,
      228,  334,  230,  230,  233,  229,  336,  335,  233,  232,
      337,  232,  230,  333,  233,  229,  232,  335,  339,  230,
      340,  232,  234,  230,  233,  341,  234,    0,  334,  230,

      230,  233,  234,  336,  335,  233,  342,  337,  343,  230,
      231,  233,  234,  344,  335,  339,  235,  340,  231,  234,
      231,  233,  341,  234,  235,  231,  231,  345,  235,  234,
      231,  235,    0,  342,  238,  343,    0,  231,  346,  234,
      344,  347,  238,  235,    0,  231,  238,  231,  239,  238,
      348,  235,  231,  231,  345,  235,  239,  231,  235,  236,
      239,  238,  350,  239,  236,  346,  236,  236,  347,  238,
      240,  236,  351,  238,  236,  239,  238,  348,  240,    0,
        0,  352,  240,  239,  353,  240,  236,  239,    0,  350,
      239,  236,    0,  236,  236,    0,    0,  240,  236,  351,

      354,  236,  237,    0,  237,  240,  241,  237,  352,  240,
      355,  353,  240,  356,  241,  237,  357,  358,  241,  237,
      241,  241,  237,  243,  242,  243,    0,  354,  359,  237,
      243,  237,  242,  241,  237,  243,  242,  355,  242,  242,
      356,  241,  237,  357,  358,  241,  237,  241,  241,  237,
      243,  242,  243,  244,  360,  359,  245,  243,  361,  242,
      244,  246,  243,  242,  245,  242,  242,  244,  245,  246,
      244,  245,  247,  246,  247,  362,  246,  363,  364,    0,
      244,  360,  247,  245,  365,  361,  247,  244,  246,  247,
        0,  245,    0,    0,  244,  245,  246,  244,  245,  247,

      246,  247,  362,  246,  363,  364,  248,  249,  366,  247,
      250,  365,  368,  247,  248,  249,  247,  250,  248,  249,
      248,  248,  249,    0,  250,    0,    0,  250,  369,    0,
        0,  370,    0,  248,  249,  366,  252,  250,  371,  368,
      372,  248,  249,  252,  250,  248,  249,  248,  248,  249,
      252,  250,  251,  252,  250,  369,  251,  253,  370,  253,
        0,  254,  251,  252,  253,  371,  254,  372,  254,  253,
      252,  373,  251,  254,    0,  374,    0,  252,  254,  251,
      252,    0,  375,  251,  253,  255,  253,  255,  254,  251,
        0,  253,  255,  254,  256,  254,  253,  255,  373,  251,

      254,  256,  374,  258,  376,  254,  377,  379,  256,  375,
      258,  256,  255,  380,  255,  382,  383,  258,    0,  255,
      258,  256,  380,    0,  255,    0,  384,  385,  256,    0,
      258,  376,    0,  377,  379,  256,    0,  258,  256,  257,
      380,    0,  382,  383,  258,  259,  386,  258,  257,  380,
      257,  260,  259,  384,  385,  257,  257,  261,  260,  259,
      257,  381,  259,  381,  261,  260,  257,    0,  260,  387,
      388,  261,  259,  386,  261,  257,    0,  257,  260,  259,
        0,    0,  257,  257,  261,  260,  259,  257,  381,  259,
      381,  261,  260,  262,  262,  260,  387,  388,  261,  390,

      262,  261,  263,  263,  263,  391,  507,  262,  264,  263,
      262,  508,  264,  509,  263,    0,    0,    0,  264,    0,
      262,  262,    0,    0,    0,  510,  390,  262,  264,  263,
      263,  263,  391,  507,  262,  264,  263,  262,  508,  264,
      509,  263,  265,  265,  265,  264,  266,  270,  266,  265,
      266,  270,  510,  266,  265,  264,  511,  270,  266,    0,
        0,    0,    0,  512,    0,    0,    0,  270,    0,  265,
      265,  265,  267,  266,  270,  266,  265,  266,  270,  267,
      266,  265,  513,  511,  270,  266,  267,  269,  268,  267,
      512,  268,  267,  268,  270,  269,    0,  269,  268,  267,

        0,    0,  269,  268,    0,    0,  267,  269,    0,  513,
      514,  516,    0,  267,  269,  268,  267,    0,  268,  267,
      268,  271,  269,  271,  269,  268,    0,  271,  271,  269,
      268,  272,  273,  271,  269,  272,  273,  514,  516,  275,
        0,  272,  273,  389,  272,    0,  275,  389,  271,  520,
      271,  272,  273,  275,  271,  271,  275,  274,  272,  273,
      271,  274,  272,  273,    0,    0,  275,  274,  272,  273,
      389,  272,  274,  275,  389,  394,  520,  274,  272,  273,
      275,  395,  394,  275,  274,  395,  396,    0,  274,  394,
      396,  395,  394,    0,  274,    0,  396,    0,  521,  274,

      522,  395,  394,    0,  274,  524,  396,    0,  395,  394,
      397,    0,  395,  396,  397,  525,  394,  396,  395,  394,
      397,    0,  398,  396,  398,  521,  526,  522,  395,  398,
      397,  527,  524,  396,  398,  401,  399,  397,  399,  401,
      402,  397,  525,  399,  402,  401,  528,  397,  399,  398,
      402,  398,  400,  526,  400,  401,  398,  397,  527,  400,
      402,  398,  401,  399,  400,  399,  401,  402,    0,    0,
      399,  402,  401,  528,  403,  399,    0,  402,  403,  400,
      529,  400,  401,  405,  403,  405,  400,  402,  530,  404,
      405,  400,  403,  404,  403,  405,  406,    0,  406,  404,

        0,  403,    0,  406,    0,  403,    0,  529,  406,  404,
      405,  403,  405,    0,    0,  530,  404,  405,  531,  403,
      404,  403,  405,  406,  408,  406,  404,  407,  532,  407,
      406,  408,  533,  407,  409,  406,  404,  534,  408,  535,
      407,  408,  409,    0,  407,  531,  409,  538,  539,  409,
        0,  408,  540,    0,  407,  532,  407,    0,  408,  533,
      407,  409,    0,  541,  534,  408,  535,  407,  408,  409,
      410,  407,  411,  409,  538,  539,  409,  410,  410,  540,
      411,    0,  410,  542,  411,  410,  411,  411,  412,  413,
      541,  543,  412,    0,  544,    0,  413,  410,  412,  411,

        0,    0,  546,  413,  410,  410,  413,  411,  412,  410,
      542,  411,  410,  411,  411,  412,  413,    0,  543,  412,
      414,  544,  414,  413,  415,  412,    0,  414,  415,  546,
      413,  547,  414,  413,  415,  412,  416,  550,  551,    0,
      416,  417,  553,  417,  415,    0,  416,  414,  417,  414,
      555,  415,  556,  417,  414,  415,  416,  557,  547,  414,
      558,  415,  418,  416,  550,  551,  418,  416,  417,  553,
      417,  415,  418,  416,  419,  417,  559,  555,    0,  556,
      417,  419,  418,  416,  557,    0,  560,  558,  419,  418,
      420,  419,  422,  418,  420,  562,  422,  560,  566,  418,

      420,  419,  422,  559,  568,  420,  570,    0,  419,  418,
      420,    0,  422,  560,  421,  419,  421,  420,  419,  422,
      421,  420,  562,  422,  560,  566,  421,  420,    0,  422,
      423,  568,  420,  570,  423,  424,  421,  420,  424,  422,
      423,  421,  424,  421,    0,  423,    0,  421,  424,    0,
      423,    0,    0,  421,  571,  571,    0,  423,  424,  428,
      425,  423,  424,  421,  425,  424,  428,  423,  572,  424,
      425,  425,  423,  428,  426,  424,  428,  423,  426,  427,
      425,  571,  571,  427,  426,  424,  428,  425,    0,  427,
        0,  425,  429,  428,  426,  572,  429,  425,  425,  427,

      428,  426,  429,  428,    0,  426,  427,  425,  573,    0,
      427,  426,  429,    0,    0,  431,  427,  431,  430,  429,
      430,  426,  431,  429,  430,    0,  427,  431,  575,  429,
      430,  432,    0,  432,  434,  573,  434,  576,  432,  429,
      430,  434,  431,  432,  431,  430,  434,  430,    0,  431,
      577,  430,  433,  578,  431,  575,  579,  430,  432,  433,
      432,  434,  581,  434,  576,  432,  433,  430,  434,  433,
      432,  435,    0,  434,    0,  435,    0,  577,  436,  433,
      578,  435,  582,  579,  583,  436,  433,  437,    0,  581,
        0,  435,  436,  433,  437,  436,  433,  584,  435,  437,

        0,  437,  435,  438,  437,  436,    0,    0,  435,  582,
      438,  583,  436,    0,  437,  438,    0,  438,  435,  436,
      438,  437,  436,  440,  584,  585,  437,  439,  437,  439,
      438,  437,    0,  440,  439,  440,  586,  438,  587,  439,
      440,  588,  438,  441,  438,  440,  589,  438,  590,  443,
      440,  441,  585,  443,  439,  441,  439,  442,  441,  443,
      440,  439,  440,  586,  442,  587,  439,  440,  588,  443,
      441,  442,  440,  589,  442,  590,  443,    0,  441,    0,
      443,  592,  441,  444,  442,  441,  443,  593,  594,    0,
      444,  442,  445,  595,    0,    0,  443,  444,  442,  445,

      444,  442,  445,  447,  446,    0,  445,  447,  592,  445,
      444,  446,  448,  447,  593,  594,  448,  444,  446,  445,
      595,  446,  448,  447,  444,    0,  445,  444,    0,  445,
      447,  446,  448,  445,  447,    0,  445,  449,  446,  448,
      447,  449,  450,  448,  596,  446,  450,  449,  446,  448,
      447,  599,  450,    0,  600,  451,  601,  449,  603,  448,
      604,    0,  450,  451,  449,    0,  605,  451,  449,  450,
      451,  596,    0,  450,  449,  606,    0,    0,  599,  450,
      452,  600,  451,  601,  449,  603,  607,  604,  452,  450,
      451,  453,  452,  605,  451,  452,  454,  451,  608,  453,

      609,    0,  606,  453,  454,    0,  453,  452,  454,    0,
      454,  454,  610,  607,  612,  452,  614,    0,  453,  452,
        0,  729,  452,  454,  455,  608,  453,  609,  455,    0,
      453,  454,  456,  453,  455,  454,  456,  454,  454,  610,
      458,  612,  456,  614,  455,  457,  457,  458,  729,  730,
      457,  455,  456,    0,  458,  455,  457,  458,  732,  456,
        0,  455,    0,  456,  733,  734,  457,  458,  735,  456,
        0,  455,  457,  457,  458,    0,  730,  457,    0,  456,
      459,  458,  460,  457,  458,  732,  459,  459,  460,  460,
      461,  733,  734,  457,  459,  735,  460,  459,  461,  460,

        0,    0,  461,    0,    0,  461,    0,  459,  736,  460,
        0,    0,    0,  459,  459,  460,  460,  461,    0,  462,
      737,  459,    0,  460,  459,  461,  460,  462,  463,  461,
      464,  462,  461,  462,  462,  736,  463,  465,  464,  465,
      463,  738,  464,  463,  465,  464,  462,  737,    0,  465,
        0,    0,    0,  739,  462,  463,    0,  464,  462,  741,
      462,  462,    0,  463,  465,  464,  465,  463,  738,  464,
      463,  465,  464,  466,  468,  467,  465,  467,  468,  469,
      739,  466,  467,  469,  468,  466,  741,  467,  466,  469,
        0,  742,    0,    0,  468,  743,  744,    0,  745,  469,

      466,  468,  467,    0,  467,  468,  469,  747,  466,  467,
      469,  468,  466,  470,  467,  466,  469,  471,  742,  471,
      470,  468,  743,  744,  471,  745,  469,  470,  748,  471,
      470,  472,  749,  472,  747,  472,  750,  751,  472,    0,
      470,    0,    0,  472,  471,  752,  471,  470,  753,    0,
      754,  471,  755,  756,  470,  748,  471,  470,  472,  749,
      472,    0,  472,  750,  751,  472,  473,  473,  473,  474,
      472,  759,  752,  473,  475,  753,  474,  754,  473,  755,
      756,  475,  760,  474,  762,  476,  474,    0,  475,  764,
      767,  475,  476,  473,  473,  473,  474,    0,  759,  476,

      473,  475,  476,  474,  476,  473,    0,  477,  475,  760,
      474,  762,  476,  474,  477,  475,  764,  767,  475,  476,
      478,  477,  478,  768,  477,  770,  476,  478,    0,  476,
      775,  476,  478,  479,  477,  480,  481,  479,    0,  480,
      481,  477,  777,  479,    0,  480,  481,  478,  477,  478,
      768,  477,  770,  479,  478,  480,  481,  775,    0,  478,
      479,  482,  480,  481,  479,  482,  480,  481,    0,  777,
      479,  482,  480,  481,  778,  483,  779,    0,    0,  483,
      479,  482,  480,  481,  484,  483,  484,  769,  482,  782,
      769,  484,  482,  483,  783,  483,  484,  485,  482,  485,

        0,  778,  483,  779,  485,  485,  483,    0,  482,  485,
        0,  484,  483,  484,  769,  784,  782,  769,  484,  785,
      483,  783,  483,  484,  485,  786,  485,  486,    0,  486,
        0,  485,  485,  787,  486,  486,  485,  491,  487,  486,
      487,  491,  784,  789,  790,  487,  785,  491,  791,  792,
      487,  488,  786,  488,  486,  488,  486,  491,  488,    0,
      787,  486,  486,  488,  491,  487,  486,  487,  491,  793,
      789,  790,  487,  794,  491,  791,  792,  487,  488,  489,
      488,  489,  488,  795,  491,  488,  489,  489,    0,  796,
      488,  489,  490,  797,  490,  798,  793,  492,    0,  490,

      794,  492,  799,  800,  490,  493,  489,  492,  489,  493,
      795,  801,    0,  489,  489,  493,  796,  492,  489,  490,
      797,  490,  798,  803,  492,  493,  490,  804,  492,  799,
      800,  490,  493,  494,  492,  494,  493,  496,  801,  495,
      494,  496,  493,  805,  492,  494,  495,  496,  495,  496,
      803,  497,  493,  495,  804,  497,  807,  496,  495,    0,
      494,  497,  494,  808,  496,    0,  495,  494,  496,    0,
      805,  497,  494,  495,  496,  495,  496,    0,  497,  498,
      495,  809,  497,  807,  496,  495,  498,  499,  497,  499,
      808,    0,  500,  498,  499,    0,  498,    0,  497,  499,

      500,  895,  897,  503,  500,    0,  498,  500,  809,    0,
        0,  503,    0,  498,  499,  503,  499,  503,  503,  500,
      498,  499,  501,  498,  502,  501,  499,  500,  895,  897,
      503,  500,  502,  501,  500,  504,  502,  501,  503,  502,
      501,  502,  503,  504,  503,  503,    0,  504,    0,  501,
      504,  502,  501,    0,    0,  899,    0,  900,  505,  502,
      501,    0,  504,  502,  501,  505,  502,  501,  502,  506,
      504,    0,  505,  617,  504,  505,  506,  504,    0,  901,
      617,  618,  899,  506,  900,  505,  506,  617,  618,    0,
      617,  903,  505,    0,    0,  618,  506,    0,  618,  505,

      617,  619,  505,  506,  905,  619,  901,  617,  618,  620,
      506,  619,  621,  506,  617,  618,  620,  617,  903,    0,
      621,  619,  618,  620,  621,  618,  620,  621,  619,  623,
        0,  905,  619,  906,    0,    0,  620,  623,  619,  621,
        0,  623,  622,  620,  623,  624,  622,  621,  619,  624,
      620,  621,  622,  620,  621,  624,  623,  625,  907,  908,
      906,  625,  622,    0,  623,  624,  910,  625,  623,  622,
        0,  623,  624,  622,  912,    0,  624,  625,    0,  622,
      916,    0,  624,  626,  625,  907,  908,  918,  625,  622,
      626,  627,  624,  910,  625,  628,  919,  626,  627,  629,

      626,  912,  628,    0,  625,  627,  629,  916,  627,  628,
      626,  925,  628,  629,  918,    0,  629,  626,  627,    0,
        0,    0,  628,  919,  626,  627,  629,  626,    0,  628,
      630,  926,  627,  629,    0,  627,  628,  630,  925,  628,
      629,  631,  630,  629,  630,  631,  632,  630,  633,  927,
        0,  631,  930,  632,  931,  633,  933,  630,  926,  934,
      632,  631,  633,  632,  630,  633,    0,    0,  631,  630,
      935,  630,  631,  632,  630,  633,  927,  634,  631,  930,
      632,  931,  633,  933,  634,    0,  934,  632,  631,  633,
      632,  634,  633,  635,  634,  635,  634,  935,  936,  938,

      635,  636,  939,  636,  634,  635,  940,  943,  636,  636,
      945,  634,  637,  636,  637,    0,    0,    0,  634,  637,
      635,  634,  635,  634,  637,  936,  938,  635,  636,  939,
      636,  947,  635,  940,  943,  636,  636,  945,  948,  637,
      636,  637,  638,  638,  638,  639,  637,  640,  949,  638,
      950,  637,  951,  639,  638,  640,    0,  639,  947,  640,
      639,  640,  640,    0,  956,  948,  957,    0,    0,  638,
      638,  638,  639,    0,  640,  949,  638,  950,  641,  951,
      639,  638,  640,  642,  639,  641,  640,  639,  640,  640,
      642,  956,  641,  957,  643,  641,  643,  642, 1027,    0,

      642,  643, 1028,    0, 1031,  641, 1032, 1037,  643,    0,
      642,  643,  641, 1038,    0,    0,  644,  642, 1040,  641,
      644,  643,  641,  643,  642, 1027,  644,  642,  643, 1028,
      645, 1031,  645, 1032, 1037,  643,  644,  645,  643,  646,
     1038,  646,  645,  644, 1041, 1040,  646,  644,  647,    0,
      647,  646,    0,  644,    0,  647,    0,  645,    0,  645,
      647,    0, 1045,  644,  645, 1046,  646, 1048,  646,  645,
     1050, 1041,  648,  646,  648,  647,  648,  647,  646,  648,
     1051,  649,  647,  649,  648,  649, 1053,  647,  649, 1045,
      650, 1054, 1046,  649, 1048, 1094, 1097, 1050,  650,  648,

        0,  648,  650,  648,    0,  650,  648, 1051,  649,    0,
      649,  648,  649, 1053,    0,  649,  651,  650, 1054,  652,
      649, 1100, 1094, 1097,  651,  650,  652,  653,  651,  650,
      651,  651,  650,  652,  653,    0,  652, 1104,    0,    0,
     1105,  653,    0,  651,  653,    0,  652, 1106, 1100,    0,
        0,  651,  654,  652,  653,  651,  654,  651,  651,    0,
      652,  653,  654,  652, 1104,  655,  656, 1105,  653,  655,
      656,  653,  654,  657, 1106,  655,  656,  658, 1123,  654,
      657,  656,    0,  654,  658,  655,  656,  657,    0,  654,
      657,  658,  655,  656,  658,    0,  655,  656, 1125,  654,

      657, 1128,  655,  656,  658, 1123, 1137,  657,  656,  659,
        0,  658,  655,  656,  657,  660,  659,  657,  658,    0,
      661,  658,  660,  659,  662, 1125,  659,  661, 1128,  660,
        0,  662,  660, 1137,  661,  661,  659,  661,  662,    0,
      663,  662,  660,  659,    0,    0,    0,  661,  663,  660,
      659,  662,  663,  659,  661,  663,  660,    0,  662,  660,
        0,  661,  661,    0,  661,  662,  664,  663,  662,    0,
        0,    0,    0,    0,  664,  663,  665,  666,  664,  663,
      665,  664,  663,    0,    0,  666,  665,    0,  667,  666,
      667,    0,  666,  664,  668,  667,  665,    0,    0,    0,

      667,  664,  668,  665,  666,  664,  668,  665,  664,  668,
        0,    0,  666,  665,    0,  667,  666,  667,    0,  666,
      669,  668,  667,  665,    0,    0,    0,  667,  669,  668,
      670,  670,  669,  668,    0,  669,  668,    0,  670,    0,
        0,  671,  670,    0,    0,  670,    0,  669,    0,  671,
        0,    0,    0,  671,    0,  669,  671,  670,  670,  669,
        0,    0,  669,    0,    0,  670,    0,    0,  671,  670,
        0,    0,  670,    0,    0,  672,  671,  672,    0,  673,
      671,  673,  672,  671,    0,    0,  673,  672,  674,    0,
      674,  673,    0,    0,    0,  674,    0,    0,    0,    0,

      674,    0,  672,    0,  672,    0,  673,    0,  673,  672,
        0,    0,    0,  673,  672,  674,    0,  674,  673,  675,
        0,  675,  674,    0,    0,    0,  675,  674,  676,    0,
      676,  675,  677,    0,  677,  676,  676,    0,    0,  677,
      676,    0,    0,    0,  677,    0,  675,    0,  675,    0,
        0,    0,    0,  675,    0,  676,    0,  676,  675,  677,
        0,  677,  676,  676,    0,    0,  677,  676,  678,    0,
      678,  677,  679,  680,  679,  678,    0,  680,    0,  679,
      678,    0,    0,  680,  679,    0,    0,    0,    0,    0,
        0,  682,    0,  680,    0,  678,    0,  678,  682,  679,

      680,  679,  678,    0,  680,  682,  679,  678,  682,    0,
      680,  679,    0,    0,  681,    0,  681,  683,  682,    0,
      680,  681,  681,  684,  683,  682,  681,    0,    0,    0,
      684,  683,  682,    0,  683,  682,    0,  684,    0,    0,
      684,  681,    0,  681,  683,  685,    0,  685,  681,  681,
      684,  683,  685,  681,    0,    0,  686,  684,  683,  685,
      686,  683,  685,  687,  684,    0,  686,  684,  688,    0,
      687,    0,  685,    0,  685,  688,  686,  687,    0,  685,
      687,    0,  688,  686,  689,  688,  685,  686,    0,  685,
      687,  689,    0,  686,    0,  688,  689,  687,  689,  690,

        0,  689,  688,  686,  687,    0,  690,  687,    0,  688,
      691,  689,  688,  690,    0,  692,  690,  691,  689,    0,
        0,    0,  692,  689,  691,  689,  690,  691,  689,  692,
        0,  693,  692,  690,    0,    0,    0,  691,  693,    0,
      690,    0,  692,  690,  691,  693,  695,    0,  693,  692,
      693,  691,    0,  695,  691,    0,  692,  694,  693,  692,
      695,    0,    0,  695,  694,  693,    0,    0,    0,  694,
        0,  694,  693,  695,  694,  693,    0,  693,  696,    0,
      695,    0,    0,    0,  694,  696,    0,  695,    0,    0,
      695,  694,  696,  697,  697,  696,  694,  696,  694,  698,

      697,  694,  699,    0,  699,  696,  698,  697,    0,  699,
      697,  698,  696,  698,  699,    0,  698,    0,    0,  696,
      697,  697,  696,    0,  696,    0,  698,  697,    0,  699,
        0,  699,    0,  698,  697,  700,  699,  697,  698,    0,
      698,  699,    0,  698,  700,  701,  700,  701,  702,  703,
      702,  700,  701,  703,    0,  702,  700,  701,    0,  703,
      702,    0,  700,    0,    0,    0,    0,    0,    0,  703,
        0,  700,  701,  700,  701,  702,  703,  702,  700,  701,
      703,  704,  702,  700,  701,  704,  703,  702,    0,  705,
      706,  704,    0,  705,  706,    0,  703,    0,    0,  705,

      706,  704,    0,  707,    0,    0,    0,  707,  704,  705,
      706,    0,  704,  707,    0,  708,  705,  706,  704,  708,
      705,  706,    0,  707,    0,  708,  705,  706,  704,    0,
      707,  709,    0,  709,  707,  708,  705,  706,  709,    0,
      707,  710,  708,  709,    0,  710,  708,  711,    0,  711,
      707,  710,  708,    0,  711,    0,    0,    0,  709,  711,
      709,  710,  708,    0,    0,  709,    0,    0,  710,    0,
      709,    0,  710,  712,  711,  712,  711,  714,  710,  714,
      712,  711,  713,    0,  714,  712,  711,    0,  710,  714,
        0,  713,    0,  713,    0,    0,    0,    0,  713,    0,

      712,    0,  712,  713,  714,    0,  714,  712,    0,  713,
      716,  714,  712,    0,  715,    0,  714,  716,  713,    0,
      713,  717,  715,    0,  716,  713,  715,  716,  717,  715,
      713,    0,    0,    0,    0,  717,    0,  716,  717,    0,
      717,  715,    0,    0,  716,    0,    0,    0,  717,  715,
        0,  716,  718,  715,  716,  717,  715,    0,  718,  718,
      719,  720,  717,    0,  719,  717,  718,  717,  720,  718,
      719,    0,    0,    0,    0,  720,    0,    0,  720,  718,
      719,    0,    0,    0,    0,  718,  718,  719,  720,    0,
        0,  719,  721,  718,    0,  720,  718,  719,    0,  721,

      722,    0,  720,    0,    0,  720,  721,  719,  722,  721,
      723,    0,  722,    0,    0,  722,    0,    0,  723,  721,
      724,    0,  723,    0,  724,  723,  721,  722,  725,    0,
      724,    0,  725,  721,    0,  722,  721,  723,  725,  722,
      724,    0,  722,    0,    0,  723,  726,  724,  725,  723,
      726,  724,  723,    0,  811,  725,  726,  724,  811,  725,
        0,    0,    0,    0,  811,  725,  726,  724,  812,    0,
        0,    0,  812,  726,  811,  725,  813,  726,  812,    0,
      813,  811,    0,  726,    0,  811,  813,    0,  812,    0,
      814,  811,    0,  726,  814,  812,  813,  813,  815,  812,

      814,  811,  815,  813,    0,  812,    0,  813,  815,    0,
      814,    0,  816,  813,    0,  812,  816,  814,  815,    0,
        0,  814,  816,  813,  813,  815,  817,  814,    0,  815,
      817,    0,  816,  818,    0,  815,  817,  814,    0,  816,
      818,  817,    0,  816,    0,  815,  817,  818,  819,  816,
      818,  819,    0,  817,    0,  819,    0,  817,    0,  816,
      818,    0,  819,  817,  820,  819,    0,  818,  817,    0,
        0,    0,  820,  817,  818,  819,  820,  818,  819,  820,
        0,    0,  819,    0,    0,    0,  821,    0,  822,  819,
        0,  820,  819,    0,  821,  822,    0,    0,  821,  820,

      821,  821,  822,  820,  823,  822,  820,    0,  823,    0,
        0,    0,    0,  821,  823,  822,  824,    0,    0,    0,
      824,  821,  822,    0,  823,  821,  824,  821,  821,  822,
      825,  823,  822,    0,  825,  823,  824,  828,  826,  828,
      825,  823,  826,  824,  828,  827,    0,  824,  826,  828,
      825,  823,  827,  824,    0,    0,    0,  825,  826,  827,
        0,  825,  827,  824,  828,  826,  828,  825,    0,  826,
      829,  828,  827,    0,  829,  826,  828,  825,  830,  827,
      829,    0,  830,  831,    0,  826,  827,  831,  830,  827,
      829,    0,  833,  831,  833,    0,  832,  829,  830,  833,

      832,  829,    0,  831,  833,  830,  832,  829,  834,  830,
      831,  832,  834,    0,  831,  830,  832,  829,  834,  833,
      831,  833,    0,  832,    0,  830,  833,  832,  834,    0,
      831,  833,  835,  832,    0,  834,  835,    0,  832,  834,
        0,    0,  835,  832,  839,  834,  836,  837,  839,    0,
      836,  837,  835,    0,  839,  834,  836,  837,  838,  835,
      838,  836,  837,  835,  839,  838,  836,  837,    0,  835,
      838,  839,    0,  836,  837,  839,    0,  836,  837,  835,
        0,  839,    0,  836,  837,  838,    0,  838,  836,  837,
        0,  839,  838,  836,  837,  841,  840,  838,  840,  841,

      842,    0,  840,    0,  842,  841,    0,    0,  840,  844,
      842,  844,    0,    0,    0,  841,  844,    0,  840,    0,
      842,  844,  841,  840,  843,  840,  841,  842,  843,  840,
        0,  842,  841,    0,  843,  840,  844,  842,  844,  843,
        0,    0,  841,  844,  843,  840,    0,  842,  844,    0,
      845,  843,  845,  846,    0,  843,    0,  845,  846,    0,
      846,  843,  845,    0,    0,  846,  843,    0,    0,    0,
      846,  843,    0,    0,  847,    0,  847,  845,    0,  845,
      846,  847,    0,    0,  845,  846,  847,  846,  848,  845,
      848,    0,  846,    0,    0,  848,  848,  846,    0,    0,

      848,  847,  849,  847,  849,    0,    0,    0,  847,  849,
        0,    0,    0,  847,  849,  848,    0,  848,  850,    0,
      850,    0,  848,  848,    0,  850,  851,  848,  851,  849,
      850,  849,    0,  851,  851,    0,  849,    0,  851,  852,
        0,  849,    0,  852,  853,  850,  853,  850,    0,  852,
        0,  853,  850,  851,  853,  851,  853,  850,    0,  852,
      851,  851,  854,    0,  854,  851,  852,    0,    0,  854,
      852,  853,    0,  853,  854,  855,  852,  855,  853,    0,
        0,  853,  855,  853,    0,    0,  852,  855,  856,  854,
      856,  854,    0,    0,    0,  856,  854,    0,    0,    0,

      856,  854,  855,    0,  855,    0,  857,    0,  857,  855,
        0,    0,    0,  857,  855,  856,    0,  856,  857,  858,
        0,  858,  856,    0,  859,    0,  858,  856,  859,    0,
        0,  858,  860,  857,  859,  857,  860,    0,    0,    0,
      857,    0,  860,  861,  859,  857,  858,    0,  858,    0,
      861,  859,  860,  858,    0,  859,    0,  861,  858,  860,
      861,  859,    0,  860,    0,    0,  862,    0,    0,  860,
      861,  859,    0,  862,  864,  863,    0,  861,    0,  860,
      862,  864,  863,  862,  861,    0,  866,  861,  864,  863,
      866,  864,  863,  862,  863,    0,  866,  865,    0,    0,

      862,  864,  863,    0,  865,    0,  866,  862,  864,  863,
      862,  865,    0,  866,  865,  864,  863,  866,  864,  863,
      867,  863,  868,  866,  865,    0,    0,  867,    0,  868,
        0,  865,    0,  866,  867,    0,  868,  867,  865,  868,
      869,  865,  870,    0,  869,    0,  870,  867,    0,  868,
      869,    0,  870,    0,  867,  871,  868,    0,    0,  871,
      869,  867,  870,  868,  867,  871,  868,  869,  872,  870,
        0,  869,  872,  870,    0,  871,  873,  869,  872,  870,
        0,    0,  871,  873,  874,    0,  871,  869,  872,  870,
      873,  874,  871,  873,    0,  872,    0,    0,  874,  872,

        0,  874,  871,  873,    0,  872,    0,    0,    0,  875,
      873,  874,  875,    0,    0,  872,  875,  873,  874,    0,
      873,    0,    0,  875,    0,  874,  875,  876,  874,    0,
        0,    0,    0,    0,  876,    0,  875,    0,  877,  875,
        0,  876,  877,  875,  876,    0,  876,    0,  877,    0,
      875,  878,  878,  875,  876,    0,  878,    0,  877,    0,
      879,  876,  878,    0,    0,  877,    0,  879,  876,  877,
        0,  876,  878,  876,  879,  877,    0,  879,  878,  878,
        0,  881,    0,  878,  880,  877,  880,  879,  881,  878,
      883,  880,  883,  882,  879,  881,  880,  883,  881,  878,

      882,  879,  883,    0,  879,    0,    0,  882,  881,    0,
      882,  880,  882,  880,  884,  881,    0,  883,  880,  883,
      882,  884,  881,  880,  883,  881,  885,  882,  884,  883,
        0,  884,    0,  885,  882,  886,    0,  882,    0,  882,
      885,  884,  886,  885,    0,    0,  887,    0,  884,  886,
      887,    0,  886,  885,    0,  884,  887,    0,  884,    0,
      885,  889,  886,  888,  888,  889,  887,  885,  888,  886,
      885,  889,    0,  887,  888,    0,  886,  887,    0,  886,
        0,  889,    0,  887,  888,    0,    0,    0,  889,    0,
      888,  888,  889,  887,    0,  888,  890,  891,  889,  891,

      890,  888,    0,  892,  891,  893,  890,    0,  889,  891,
      892,  888,  893,    0,    0,    0,  890,  892,    0,  893,
      892,  894,  893,  890,  891,    0,  891,  890,  894,    0,
      892,  891,  893,  890,    0,  894,  891,  892,  894,  893,
        0,  958,    0,  890,  892,  958,  893,  892,  894,  893,
      959,  958,    0,    0,  959,  894,    0,  960,    0,  960,
      959,  958,  894,    0,  960,  894,    0,    0,  958,  960,
      959,    0,  958,  961,    0,  961,    0,  959,  958,    0,
      961,  959,    0,    0,  960,  961,  960,  959,  958,    0,
        0,  960,  962,    0,  962,    0,  960,  959,    0,  962,

      961,  964,  961,  964,  962,  963,    0,  961,  964,  963,
        0,    0,  961,  964,    0,  963,    0,    0,    0,  962,
        0,  962,  965,    0,  965,  963,  962,    0,  964,  965,
      964,  962,  963,    0,  965,  964,  963,    0,    0,    0,
      964,  966,  963,  966,    0,    0,    0,    0,  966,  965,
        0,  965,  963,  966,    0,  967,  965,  967,    0,    0,
        0,  965,  967,    0,  968,  968,  968,  967,  966,    0,
      966,  968,    0,    0,  969,  966,  968,    0,    0,    0,
      966,    0,  967,  969,  967,  969,    0,    0,    0,  967,
      969,  968,  968,  968,  967,  969,    0,  970,  968,  970,

        0,  969,    0,  968,  970,    0,  971,    0,  971,  970,
      969,    0,  969,  971,  971,    0,    0,  969,  971,    0,
        0,    0,  969,    0,  970,  972,  970,  972,    0,    0,
        0,  970,  972,  971,  973,  971,  970,  972,    0,    0,
      971,  971,    0,    0,  973,  971,  973,    0,  974,    0,
      974,  973,  972,    0,  972,  974,  973,    0,  975,  972,
      974,  973,    0,    0,  972,    0,    0,  975,    0,  975,
        0,  973,    0,  973,  975,  974,    0,  974,  973,  975,
        0,    0,  974,  973,    0,  975,  976,  974,  976,    0,
      977,    0,  977,  976,  975,    0,  975,  977,  976,    0,

        0,  975,  977,    0,    0,    0,  975,    0,  979,  978,
        0,  978,  979,  976,    0,  976,  978,  977,  979,  977,
      976,  978,  980,    0,  977,  976,  980,    0,  979,  977,
        0,    0,  980,    0,    0,  979,  978,    0,  978,  979,
        0,    0,  980,  978,  981,  979,  981,    0,  978,  980,
      982,  981,  982,  980,    0,  979,  981,  982,  982,  980,
        0,    0,  982,  983,    0,  983,    0,    0,    0,  980,
      983,  981,    0,  981,  984,  983,  984,  982,  981,  982,
        0,  984,    0,  981,  982,  982,  984,    0,    0,  982,
      983,    0,  983,  985,    0,  985,    0,  983,    0,    0,

      985,  984,  983,  984,  986,  985,  986,  987,  984,  987,
        0,  986,    0,  984,  987,    0,  986,    0,    0,  987,
      985,    0,  985,  988,    0,  989,    0,  985,    0,  989,
      988,  986,  985,  986,  987,  989,  987,  988,  986,    0,
      988,  987,    0,  986,  990,  989,  987,    0,    0,    0,
      988,  990,  989,    0,    0,    0,  989,  988,  990,  991,
        0,  990,  989,  992,  988,    0,  991,  988,    0,    0,
      992,  990,  989,  991,    0,    0,  991,  992,  990,    0,
      992,    0,  993,    0,  993,  990,  991,    0,  990,  993,
      992,  994,    0,  991,  993,    0,    0,  992,  994,    0,

      991,    0,    0,  991,  992,  994,  995,  992,  994,  993,
      996,  993,    0,  995,    0,    0,  993,  996,  994,    0,
      995,  993,    0,  995,  996,  994,  997,  996,    0,  996,
      997,    0,  994,  995,    0,  994,  997,  996,  998,    0,
      995,    0,  998,    0,  996,  999,  997,  995,  998,    0,
      995,  996,  999,  997,  996,    0,  996,  997,  998,  999,
     1000,    0,  999,  997, 1001,  998, 1001, 1000,    0,  998,
        0, 1001,  999,  997, 1000,  998,    0, 1000, 1001,  999,
        0, 1001,    0,    0,    0,  998,  999, 1000,    0,  999,
        0, 1001,    0, 1001, 1000, 1002,    0, 1002, 1001,    0,

        0, 1000, 1002,    0, 1000, 1001,    0,    0, 1001, 1002,
        0, 1003, 1002, 1003, 1004,    0, 1004,    0, 1003,    0,
        0, 1004, 1002, 1003, 1002, 1005, 1004, 1005,    0, 1002,
        0,    0, 1005,    0,    0,    0, 1002, 1005, 1003, 1002,
     1003, 1004,    0, 1004, 1006, 1003, 1006,    0, 1004,    0,
     1003, 1006, 1005, 1004, 1005, 1007, 1006, 1007, 1008, 1005,
     1008,    0, 1007,    0, 1005, 1008,    0, 1007,    0,    0,
     1008, 1006,    0, 1006, 1009,    0, 1009,    0, 1006,    0,
        0, 1009, 1007, 1006, 1007, 1008, 1009, 1008, 1010, 1007,
        0,    0, 1008, 1011, 1007, 1010,    0, 1008,    0,    0,

     1011, 1009, 1010, 1009, 1012, 1010,    0, 1011, 1009,    0,
     1011, 1012,    0, 1009,    0, 1010,    0,    0, 1012,    0,
     1011, 1012, 1010, 1012,    0,    0, 1013, 1011, 1013, 1010,
        0, 1012, 1010, 1013, 1011, 1014,    0, 1011, 1012,    0,
     1013,    0, 1014, 1013, 1015, 1012,    0,    0, 1012, 1014,
     1012, 1015, 1014, 1013, 1014, 1013,    0,    0, 1015,    0,
     1013, 1015, 1014,    0,    0,    0, 1016, 1013,    0, 1014,
     1013, 1015,    0, 1016,    0, 1017, 1014, 1018, 1015, 1014,
     1016, 1014, 1017, 1016, 1018, 1015,    0,    0, 1015, 1017,
        0, 1018, 1017, 1016, 1018,    0,    0,    0, 1019,    0,

     1016, 1020, 1017, 1020, 1018, 1019,    0, 1016, 1020, 1017,
     1016, 1018, 1019, 1020,    0, 1019, 1017,    0, 1018, 1017,
        0, 1018, 1057,    0, 1057, 1019,    0,    0, 1020, 1057,
     1020, 1058, 1019, 1058, 1057, 1020,    0,    0, 1058, 1019,
     1020,    0, 1019, 1058,    0, 1059,    0, 1059,    0, 1057,
        0, 1057, 1059,    0,    0,    0, 1057, 1059, 1058,    0,
     1058, 1057,    0,    0, 1060, 1058, 1060,    0,    0,    0,
     1058, 1060, 1059, 1061, 1059, 1061, 1060,    0,    0, 1059,
     1061,    0,    0,    0, 1059, 1061, 1063, 1062,    0, 1062,
     1063, 1060,    0, 1060, 1062,    0, 1063,    0, 1060, 1062,

     1061, 1064, 1061, 1060,    0,    0, 1063, 1061, 1064,    0,
        0,    0, 1061, 1063, 1062, 1064, 1062, 1063, 1064,    0,
     1065, 1062, 1066, 1063,    0,    0, 1062, 1065, 1064, 1066,
        0,    0,    0, 1063, 1065, 1064, 1066, 1065,    0, 1066,
     1067,    0, 1064,    0, 1067, 1064,    0, 1065,    0, 1066,
     1067,    0,    0,    0, 1065, 1068, 1066,    0, 1069, 1068,
     1067, 1065, 1069, 1066, 1065, 1068, 1066, 1067, 1069,    0,
     1068, 1067,    0,    0,    0, 1068,    0, 1067, 1069,    0,
     1070,    0, 1068,    0, 1070, 1069, 1068, 1067,    0, 1069,
     1070,    0, 1068,    0, 1071, 1069,    0, 1068, 1071, 1072,

     1070,    0, 1068, 1072, 1071, 1069, 1073, 1070, 1073, 1072,
        0, 1070, 1073,    0, 1071,    0,    0, 1070, 1073, 1072,
        0, 1071, 1074,    0, 1074, 1071, 1072, 1070, 1073, 1074,
     1072, 1071,    0, 1073, 1074, 1073, 1072,    0,    0, 1073,
     1075, 1071, 1075, 1076, 1077, 1073, 1072, 1075, 1077, 1074,
     1076, 1074, 1075,    0, 1077, 1073, 1074, 1076, 1078,    0,
     1076, 1074, 1078,    0, 1077,    0,    0, 1075, 1078, 1075,
     1076, 1077, 1079,    0, 1075, 1077, 1079, 1076, 1078, 1075,
        0, 1077, 1079,    0, 1076, 1078, 1080, 1076,    0, 1078,
     1080, 1077, 1079,    0,    0, 1078, 1080,    0,    0, 1079,

     1081,    0,    0, 1079, 1081, 1078, 1080,    0, 1082, 1079,
     1081,    0, 1082, 1080, 1082, 1081,    0, 1080, 1082, 1079,
     1081,    0,    0, 1080,    0,    0, 1083, 1081, 1082,    0,
     1083, 1081,    0, 1080, 1084, 1082, 1083, 1081, 1084, 1082,
        0, 1082, 1081,    0, 1084, 1082, 1083, 1081, 1085, 1084,
        0,    0, 1085, 1083, 1084, 1082,    0, 1083, 1085,    0,
     1086, 1084,    0, 1083,    0, 1084,    0, 1086, 1085,    0,
        0, 1084,    0, 1083, 1086, 1085, 1084, 1086,    0, 1085,
        0, 1084, 1088,    0,    0, 1085, 1087, 1086,    0, 1088,
        0,    0,    0, 1087, 1086, 1085, 1088,    0, 1087, 1088,

     1087, 1086,    0, 1087, 1086, 1089,    0,    0,    0, 1088,
        0, 1090, 1089, 1087,    0, 1090, 1088,    0,    0, 1089,
     1087, 1090, 1089, 1088, 1089, 1087, 1088, 1087,    0,    0,
     1087, 1090, 1089, 1091,    0,    0,    0, 1091, 1090, 1089,
        0,    0, 1090, 1091,    0,    0, 1089,    0, 1090, 1089,
        0, 1089, 1092, 1091,    0, 1108, 1092, 1110, 1090, 1108,
     1091, 1110, 1092,    0, 1091, 1108,    0, 1110,    0,    0,
     1091,    0, 1092,    0,    0, 1108,    0, 1110,    0, 1092,
     1091, 1109, 1108, 1092, 1110, 1109, 1108,    0, 1110, 1092,
        0, 1109, 1108, 1111, 1110,    0, 1109, 1111,    0, 1092,

        0, 1109, 1108, 1111, 1110, 1113, 1112, 1114, 1109, 1113,
     1112, 1114, 1109, 1111,    0, 1113, 1112, 1114, 1109,    0,
     1111, 1112,    0, 1109, 1111, 1113, 1112, 1114, 1109,    0,
     1111,    0, 1113, 1112, 1114,    0, 1113, 1112, 1114,    0,
     1111,    0, 1113, 1112, 1114,    0,    0,    0, 1112, 1115,
     1116, 1117, 1113, 1112, 1114, 1118, 1115, 1116, 1117,    0,
        0,    0, 1118, 1115, 1116, 1117, 1115, 1116, 1117, 1118,
        0,    0, 1118,    0,    0,    0, 1115, 1116, 1117,    0,
        0,    0, 1118, 1115, 1116, 1117,    0,    0,    0, 1118,
     1115, 1116, 1117, 1115, 1116, 1117, 1118, 1119, 1120, 1118,

     1121, 1119, 1120,    0, 1121,    0,    0, 1119, 1120, 1120,
     1121,    0, 1122,    0,    0,    0, 1122, 1119, 1120,    0,
     1121,    0, 1122,    0, 1119, 1120,    0, 1121, 1119, 1120,
        0, 1121, 1122,    0, 1119, 1120, 1120, 1121, 1129, 1122,
        0,    0, 1129, 1122, 1119, 1120, 1130, 1121, 1129, 1122,
     1130,    0,    0,    0,    0, 1131, 1130, 1131, 1129, 1122,
     1134,    0, 1131,    0, 1134, 1129, 1130, 1131,    0, 1129,
     1134,    0,    0, 1130, 1132, 1129, 1132, 1130,    0,    0,
     1134, 1132, 1131, 1130, 1131, 1129, 1132, 1134, 1133, 1131,
     1133, 1134, 1138, 1130, 1131, 1133, 1138, 1134,    0,    0,

     1133, 1132, 1138, 1132,    0,    0, 1139, 1134, 1132,    0,
     1139,    0, 1138, 1132,    0, 1133, 1139, 1133, 1140, 1138,
     1140,    0, 1133, 1138,    0, 1140, 1139, 1133,    0, 1138,
     1140,    0,    0, 1139, 1142,    0, 1142, 1139,    0, 1138,
        0, 1142,    0, 1139,    0, 1140, 1142, 1140,    0,    0,
        0,    0, 1140, 1139,    0,    0,    0, 1140,    0,    0,
        0, 1142,    0, 1142,    0,    0,    0,    0, 1142,    0,
        0,    0,    0, 1142, 1144, 1144, 1144, 1144, 1144, 1145,
        0,    0, 1145, 1145, 1147, 1147, 1147,    0, 1147, 1148,
        0, 1148, 1148, 1148, 1149,    0, 1149, 1149, 1149, 1150,

        0, 1150, 1150, 1150, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 2676 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2690 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 58 "flex_lexer.l"


#line 2977 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1144 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1143 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 64 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(QUARTER)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(TINYINT)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(BOOLEAN)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 146:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 153:
#line 219 "flex_lexer.l"
case 154:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 229 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 235 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 240 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 241 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 242 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 243 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 244 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 246 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 249 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3863 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1144 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1144 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1143);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 249 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

