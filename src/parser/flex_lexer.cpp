#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 163
#define YY_END_OF_BUFFER 164
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1136] =
    {   0,
        0,    0,  160,  160,    2,    2,  164,  162,    4,    4,
      162,  162,  152,  158,  152,  152,  155,  152,  152,  152,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  152,  160,  161,    2,    2,
        3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    4,  147,    0,
        1,  155,  154,  153,  149,  148,  146,  150,  157,  157,

      157,  157,  157,  157,  125,  157,  157,  126,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  127,  157,  157,  128,  129,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  130,
      131,  132,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      133,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      151,  160,  159,    2,    2,    2,    2,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  156,  153,
      113,  157,  114,  157,  157,  115,  157,  116,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,

      157,  157,  137,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  117,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  118,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  119,  157,  157,  120,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      121,  157,  157,  122,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  123,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  124,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,  157,  157,
      157,  157,  157,  157,  157,  157,   82,  157,   83,   45,
       84,  157,  157,  157,   85,  157,  157,   86,  157,  157,
      157,  157,   88,  157,  157,  157,   89,   90,  157,  157,
      157,  157,  157,  157,  157,   91,  157,  157,   92,   93,
      157,  157,   94,  157,   95,  136,  157,  157,  157,  157,
      157,  157,   96,  157,   97,   98,   99,  157,  101,  157,
      102,  157,  157,  157,  157,  104,  157,  157,  157,  157,
      157,  105,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  106,  157,  157,  157,  157,  157,  107,  108,

      109,  157,  157,  140,  157,  157,  157,  157,  157,  157,
      157,  157,  110,  157,  111,  157,  112,  139,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   62,   63,
      157,   64,  157,  143,  157,  157,  157,  157,  157,  157,
      157,   65,  157,  157,  157,  157,   66,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  141,   67,  157,
      157,   68,  157,  100,  157,   69,   70,  157,  157,  157,
      157,   71,   72,   73,   74,  157,  138,  157,  157,  157,
       75,   76,  157,  157,  157,  157,  157,  157,   77,  157,
      157,  157,  157,  157,  157,  157,   78,  157,  157,  157,

      157,  157,   79,  157,  157,  157,   80,  157,  157,  157,
       81,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  157,   35,  157,  103,  157,   36,

      145,  157,   37,  157,  157,  157,   38,  157,   39,  157,
       40,   41,   42,  157,   43,  157,  157,   46,   47,   48,
       49,   50,  157,  157,  157,   51,  135,  157,  157,   52,
      157,  157,  157,  157,   53,  157,  157,   54,  134,   55,
      157,   56,  157,   57,  157,  157,  157,  157,  157,   58,
       59,   60,   61,  157,  157,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   16,   17,   18,   19,
       20,  157,  157,   21,  157,  157,   22,   23,   44,   24,
      157,  157,   28,  157,  157,   29,   30,   25,  157,  157,
       31,  157,   32,  157,  157,   26,  157,  157,   33,   34,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   87,  157,   11,   12,  157,   10,
       13,  157,   14,  144,   27,  157,  157,  157,   15,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  157,    7,  157,    8,    9,  157,
        2,    2,    2,    2,    2,    2,    5,    6,  157,    2,
        2,    2,  142,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1143] =
    {   0,
        0,    0,  387,  384,   67,    0,  390, 5920,  133,  135,
      376,    0, 5920, 5920,  131,  377,  133,  132,  371,  343,
      129,  129,  138,  154,  165,  216,  146,  193,  226,  125,
      139,  188,  218,  221,  262,  261,  128,  242,  308,  351,
      271,  290,  179,    0,  146,  285,    0,  339,    0,  147,
      211,  326,  330,    0,    0,  155,  289,  213,  213,  257,
      247,  409,  476,  530,  582,  630,  682,  319,  411,  725,
      416,  283,  340,  468,  776,  825,  479,  404,  473,  871,
      923,  528,  518,  481,  532,  576,  187,  229, 5920,  215,
     5920,  285,  208,  201, 5920, 5920, 5920, 5920,    0,  222,

      228,  289,  301,  253,  274,  570,  323,    0,  334,  340,
      580,  401,  342,  624,  570,  323,  348,  365,  410,  427,
      669,  420,  423,  469,  477,  484,  490,  517,  519,  580,
      522,  530,    0,  544,  570,  673,  581,  596,  581,  605,
      635,  695,  613,  623,  626,  621,  633,  647,  660,  673,
        0,  680,  675,  684,  706,  723,  707,  726,  708,  714,
      725,  749,  726,  742,  728,  746,  746,  738,  749,  769,
      747,  779,  783,  781,  777,  775,  797,  796,  783,  804,
     5920,    0, 5920,    0,  304,    0,  203,    0,  300,  195,
      160,    0,    0,    0,    0,  829,  846,  863,  917,  935,

      925,  969, 1017,  975,  981,  969, 1027, 1068, 1053, 1009,
     1119, 1103, 1125, 1061, 1150, 1131, 1163, 1213, 1169, 1175,
     1215, 1214, 1239, 1264, 1263, 1265, 1289, 1304, 1301, 1066,
     1314, 1338, 1387, 1343, 1343, 1360, 1399, 1404, 1456, 1444,
     1441, 1458, 1378, 1482, 1500, 1510, 1495, 1443, 1512, 1536,
     1545, 1548, 1546, 1584, 1555, 1598, 1590, 1616, 1666, 1622,
     1648, 1672, 1678, 1690, 1707, 1608, 1720, 1732, 1745, 1762,
     1657, 1744, 1774, 1786, 1780, 1815, 1816,    0, 5920,  148,
        0,  803,    0,  812,  824,    0,  836,    0,  833,  853,
      862,  881,  879, 1825,  874,  872,  881,  880,  883,  924,

      927,  943,    0,  950,  975,  999,  982,  993,  996, 1028,
     1022, 1035,    0, 1046, 1067, 1070, 1058, 1071, 1078, 1082,
     1107, 1123, 1113, 1124, 1159, 1174, 1158, 1177, 1181, 1184,
     1191, 1199, 1210, 1221, 1223, 1229, 1319, 1214, 1244,    0,
     1257, 1288, 1322, 1328, 1343, 1366, 1386, 1395, 1407, 1416,
        0, 1435, 1440, 1452, 1498, 1501, 1512, 1545, 1544, 1552,
     1573, 1607, 1591, 1611, 1616, 1638, 1630, 1662,    0, 1678,
     1699, 1715, 1716, 1739, 1739, 1768, 1786, 1797, 1782,    0,
     1795, 1828, 1822, 1808, 1842, 1832, 1828, 1850, 1831, 1836,
     1845, 1850, 1843,    0,  145, 1866, 1869, 1884, 1887, 1899,

     1890, 1905, 1920, 1935, 1923, 1938, 1944, 1953, 1988, 1989,
     1974, 2006, 2007, 2024, 2043, 2042, 2048, 2057, 2060, 2082,
     2081, 2099, 2111, 2117, 2136, 2114, 2135, 2149, 2174, 2168,
     2173, 2202, 2203, 2227, 2224, 2232, 2257, 2256, 2262, 2292,
     2298, 2290, 2311, 2316, 2340, 2346, 2348, 2370, 2365, 2384,
     2394, 2399, 2402, 2423, 2420, 2438, 2435, 2444, 2457, 2472,
     2494, 2506, 2489, 2497, 2511, 2530, 2545, 2543, 2555, 2560,
     2581, 2593, 2594, 2584, 2619, 2629, 2647, 2644, 2677, 2683,
     2668, 2692, 2689, 2701, 2722, 2727, 2737, 2751, 2756, 2777,
     2785, 2802, 2810, 2819, 2831, 2836, 2844, 2869, 2882, 2894,

     2884, 2918, 2926, 2932, 2940, 2926, 2972, 2970, 1882, 1889,
     1921, 1929, 1964, 1987, 1998, 2009,    0, 2035,    0,    0,
        0, 2024, 2061, 2080,    0, 2085, 2102, 2139, 2150, 2149,
     2170, 2190, 2174, 2192, 2187, 2201,    0,    0, 2208, 2230,
     2226, 2230, 2252, 2277, 2278,    0, 2266, 2290,    0,    0,
     2305, 2296,    0, 2315,    0,    0, 2330, 2322, 2330, 2343,
     2351, 2376,    0, 2403,    0,    0,    0, 2437,    0, 2453,
        0, 2463, 2595, 2470, 2473,    0, 2504, 2540, 2533, 2538,
     2591,    0, 2609, 2622, 2619, 2627, 2625, 2637, 2658, 2649,
     2649, 2675,    0, 2691, 2706, 2707, 2718, 2725,    0,    0,

     2729, 2742, 2745,    0, 2767, 2763, 2764, 2795, 2779, 2799,
     2820, 2822,    0, 2818,    0, 2843,    0,    0, 2980, 2985,
     3004, 3009, 3026, 3014, 3038, 3043, 3044, 3072, 3077, 3078,
     3080, 3102, 3112, 3131, 3114, 3148, 3126, 3150, 3176, 3182,
     3184, 3212, 3214, 3224, 3233, 3258, 3236, 3246, 3268, 3270,
     3282, 3296, 3314, 3324, 3322, 3332, 3350, 3360, 3358, 3368,
     3386, 3400, 3394, 3419, 3422, 3432, 3440, 3457, 3454, 3476,
     3478, 3506, 3511, 3520, 3528, 3530, 3545, 3564, 3562, 3574,
     3583, 3596, 3598, 3628, 3622, 3634, 3646, 3637, 3647, 3672,
     3682, 3691, 3700, 3701, 3710, 3735, 3736, 3754, 3764, 3786,

     3789, 3799, 3808, 3827, 3818, 3837, 3840, 3852, 3866, 3876,
     3878, 3881, 3890, 3891, 3916, 3926, 3929, 3944, 3950, 3978,
     3979, 3984, 3996, 4008, 4013, 4018, 4030, 4032,    0,    0,
     2839,    0, 2868,    0, 2874, 2861, 2886, 2901, 2949, 2958,
     2988,    0, 2990, 2996, 3015, 3028,    0, 3055, 3045, 3053,
     3067, 3088, 3078, 3081, 3087, 3138, 3149,    0,    0, 3145,
     3157,    0, 3164,    0, 3179,    0,    0, 3205, 3230, 3431,
     3235,    0,    0,    0,    0, 3248,    0, 3280, 3291, 3289,
        0,    0, 3312, 3306, 3317, 3340, 3348, 3362,    0, 3378,
     3380, 3403, 3393, 3406, 3417, 3428, 3442, 3452, 3453, 3477,

     3494, 3498,    0, 3502, 3513, 3514,    0, 3522, 3547, 3548,
        0, 4042, 4054, 4066, 4064, 4072, 4078, 4090, 4100, 4108,
     4129, 4126, 4144, 4132, 4158, 4166, 4180, 4188, 4183, 4198,
     4212, 4233, 4238, 4224, 4236, 4246, 4272, 4282, 4290, 4291,
     4300, 4308, 4326, 4336, 4344, 4358, 4345, 4380, 4377, 4382,
     4399, 4390, 4428, 4416, 4431, 4434, 4440, 4453, 4466, 4479,
     4492, 4491, 4505, 4504, 4529, 4530, 4542, 4554, 4544, 4559,
     4568, 4580, 4608, 4609, 4617, 4583, 4618, 4642, 4654, 4666,
     4663, 4684, 4678, 4696, 4724, 4675, 4729, 4737, 4734, 4742,
     4766, 4778, 4779, 4788, 3580,    0, 3579,    0, 3590, 3583,

        0, 3629,    0, 3644, 3658, 3665,    0, 3691,    0, 3691,
        0,    0,    0, 3706,    0, 3717, 3729,    0,    0,    0,
        0,    0, 3732, 3746, 3754,    0,    0, 3744, 3764,    0,
     3750, 3775, 3760, 3792,    0, 3817, 3825, 3834,    0,    0,
     3864,    0, 3881,    0, 3928, 3936, 3919, 3941, 3927,    0,
        0,    0,    0, 3945, 3961, 4791, 4796, 4820, 4817, 4830,
     4832, 4845, 4862, 4854, 4880, 4899, 4871, 4890, 4908, 4916,
     4925, 4934, 4940, 4949, 4958, 4964, 4966, 4979, 4988, 5000,
     5003, 5012, 5018, 5024, 5036, 5057, 5042, 5048, 5074, 5086,
     5072, 5087, 5096, 5111, 5124, 5126, 5141, 5150, 5165, 5136,

     5174, 5180, 5182, 5210, 5195, 5228, 5243, 5234, 5252, 5258,
     5260, 5282, 5284, 5292, 5297, 5314,    0,    0,    0,    0,
        0, 3974, 3997,    0, 3994, 3987,    0,    0,    0,    0,
     4050, 4046,    0, 4043, 4096,    0,    0,    0, 4101, 4112,
        0, 4109,    0, 4127, 4142,    0, 4154, 4172,    0,    0,
     5316, 5322, 5346, 5351, 5352, 5354, 5364, 5376, 5386, 5400,
     5405, 5408, 5410, 5418, 5446, 5454, 5456, 5459, 5464, 5478,
     5492, 5500, 5513, 5510, 5518, 5546, 5532, 5554, 5564, 5576,
     5582, 5600, 5606, 5608,    0, 4159,    0,    0, 4167,    0,
        0, 4181,    0,    0,    0, 4184, 4230, 4248,    0, 5614,

     5636, 5638, 5644, 5662, 5668, 5670, 5692, 5680, 5694, 5702,
     5716, 5724, 5726, 5734, 4254,    0, 4243,    0,    0, 4260,
     5748, 5756, 5766, 5774, 5784, 5792,    0,    0, 4269, 5806,
     5814, 5816,    0, 5824, 5920, 5889, 5894,  135, 5899, 5904,
     5909, 5914
    } ;

static const flex_int16_t yy_def[1143] =
    {   0,
     1135,    1, 1136, 1136, 1135,    5, 1135, 1135, 1135, 1135,
     1135, 1137, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1135, 1139, 1135, 1140, 1140,
     1135, 1140, 1141, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1142, 1142,   63,   63,   63,   64,   64,   64,   66,
       64,   63,   63,   63,   64,   64,   64,   76,   63,   63,
       64,   66,   63,   63,   63,   63, 1140, 1135, 1135, 1137,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1138, 1138,

     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1135, 1139, 1135, 1140, 1140, 1140, 1141, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   66,   63,   66,   63,   63,
       66,   66,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   66,   66,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   66,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63, 1140, 1135, 1135,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,

     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1140, 1140,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   76,   63,   63, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,

     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,

     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63, 1138, 1138, 1138, 1138, 1138, 1138,

     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63, 1138, 1138, 1138, 1138, 1138, 1138,
       63,   63,   63,   63,   63,   63, 1138, 1138, 1138,   63,
       63,   63, 1138,   63,    0, 1135, 1135, 1135, 1135, 1135,
     1135, 1135
    } ;

static const flex_int16_t yy_nxt[5988] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   44,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   44,   46,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,

       82,   83,   84,   85,   86,   85,   49,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
       85,   86,   85,   87,   88,   88,   88,   88,   91,   99,
       92,   94,   92,   95,   96,  100,  106,  101,  185,   88,
      107,  109,  138,  102,  395,  103,  139,  280,  110,  104,
      105,  157,  188,  180,  189,  111,  108,  113,  112,  395,
      128,  114,  100,  106,  101,  115,  129,  107,  109,  138,
      102,  116,  103,  139,  117,  110,  104,  105,  157,  118,
      180,  119,  111,  108,  113,  112,  120,  128,  114,  178,

      179,  121,  115,  129,  190,  140,  130,  394,  116,  141,
      280,  117,   88,   88,  131,  142,  118,   93,  119,  279,
      132,  191,  189,  120,  192,  193,  178,  179,  121,  122,
       88,   88,  140,  130,  146,  143,  141,  123,  281,  144,
      124,  131,  142,  125,  133,  145,  126,  132,  147,  127,
      134,  135,  136,  278,  148,  149,  122,  137,  195,  158,
      282,  146,  143,  159,  123,  281,  144,  124,  194,  160,
      125,  133,  145,  126,  154,  147,  127,  134,  135,  136,
      150,  148,  149,  287,  137,  155,  158,  282,  151,  288,
      159,  156,  152,   94,   92,  153,  160,  173,  190,  174,

      236,  154,  175,  176,  196,  185,   88,  150,  191,  189,
      287,  177,  155,  283,  285,  151,  288,  286,  156,  152,
      196,  284,  153,  161,  173,  162,  174,  236,  163,  175,
      176,  196,  196,  164,  184,  165,  166,  186,  177,  196,
      283,  285,  292,  225,  286,  183,  196,  196,  284,  226,
      161,  181,  162,  295,   98,  163,  310,  237,  293,  196,
      164,  238,  165,  166,  167,  294,  196,  239,  168,  292,
      225,  169,  170,  196,  302,  311,  226,  196,  171,  303,
      295,  172,   97,  310,  237,  293,   93,   89,  238, 1135,
       48,  167,  294,   48,  239,  168,  312, 1135,  169,  170,

     1135,  302,  311, 1135,  196,  171,  303, 1135,  172,  184,
      184, 1135,  184,  184,  184,  184,  184,  184,  300,  184,
      184,  184,  196,  312,  227,  197,  313,  198,  301,  196,
      196,  196,  228,  199,  196,  200,  196,  254,  229,  201,
      202,  196,  314,  235,  320,  300,  196,  321, 1135,  196,
     1135,  227,  197,  313,  198,  301,  196,  196,  196,  228,
      199,  196,  200,  196,  254,  229,  201,  202,  196,  314,
      235,  320, 1135,  196,  321,  184,  184,  184, 1135,  184,
      184,  184,  184,  184,  184,  240,  184,  184,  184,  241,
      255, 1135,  251,  203,  256,  242,  322,  204,  196,  196,

      257,  275,  276,  252, 1135,  196,  196,  323, 1135,  253,
      196,  324,  240,  205,  325, 1135,  241,  255,  196,  251,
      203,  256,  242,  322,  204,  196,  196,  257,  275,  276,
      252,  273,  196,  196,  323,  196,  253,  196,  324,  274,
      205,  325,  184,  206,  326,  196,  327,  196,  330,  196,
      207,  196,  196,  196,  270,  196,  271,  208,  273,  272,
      209, 1135,  196,  331,  196,  332,  274,  196, 1135,  196,
      206,  326, 1135,  327,  196,  330,  196,  207,  196,  196,
      196,  270,  196,  271,  208, 1135,  272,  209,  289,  290,
      331,  196,  332,  277,  196,  210,  196,  196,  333,  211,

      308,  309,  291,  212,  296,  297,  298,  338,  299,  213,
     1135,  328,  214,  196,  329,  289,  290,  339,  340,  196,
      277, 1135,  210,  341,  196,  333,  211,  308,  309,  291,
      212,  296,  297,  298,  338,  299,  213,  304,  328,  214,
      196,  329,  305,  347,  339,  340,  196,  196,  306,  348,
      341,  196,  349,  350,  215,  307,  216, 1135,  342, 1135,
      343,  217, 1135, 1135,  304,  351,  218,  196, 1135,  305,
      347,  352, 1135,  353,  196,  306,  348, 1135,  196,  349,
      350,  215,  307,  216,  315,  342,  316,  343,  217,  334,
      317,  354,  351,  218,  196,  219,  355,  318,  352,  335,

      353,  319,  196,  220,  336,  337,  221,  356,  344,  222,
      345,  315,  223,  316,  357,  224,  334,  317,  354,  358,
      361,  346,  219,  355,  318, 1135,  335,  364,  319,  196,
      220,  336,  337,  221,  356,  344,  222,  345,  365,  223,
      359,  357,  224,  230,  360,  366,  358,  361,  346,  231,
      232,  233,  362,  370,  364,  371,  234,  363,  372,  373,
      374,  196, 1135,  375,  367,  365,  377,  359, 1135, 1135,
      230,  360,  366,  368,  376,  380,  231,  232,  233,  362,
      370,  369,  371,  234,  363,  372,  373,  374,  196,  243,
      375,  367,  381,  377,  378,  379,  196,  385,  386,  387,

      368,  376,  380,  244,  383,  388,  196,  384,  369,  245,
      246, 1135,  382,  391,  389,  392,  243,  393, 1135,  381,
      509,  378,  379,  196,  385,  386,  387,  390, 1135,  510,
      244,  383,  388,  196,  384, 1135,  245,  246,  196,  382,
      391,  389,  392,  247,  393,  196,  196,  509,  511,  512,
      196,  248,  196, 1135,  390,  249,  510, 1135,  250, 1135,
      513, 1135,  396,  196, 1135,  196,  196,  196, 1135, 1135,
      247, 1135,  196,  196,  514,  511,  512,  196,  248,  196,
      196, 1135,  249,  196,  196,  250,  258,  513,  259,  396,
      196,  260,  196,  196,  196,  397,  261,  515,  262,  263,

      196,  514,  516,  517,  521,  522,  523,  196,  196, 1135,
      196,  196,  524,  258, 1135,  259, 1135, 1135,  260,  196,
      525, 1135,  397,  261,  515,  262,  263,  196, 1135,  516,
      517,  521,  522,  523,  196,  196,  264,  526,  196,  524,
      265,  398,  196,  266,  267, 1135,  196,  525,  400,  399,
      268,  401,  196,  269,  196,  402,  196, 1135,  527, 1135,
      528,  196,  196,  264,  526,  196, 1135,  265,  398,  196,
      266,  267,  196,  196,  529,  400,  399,  268,  401,  196,
      269,  196,  402,  196,  403,  527,  196,  528,  530,  196,
      196, 1135,  196,  408,  407,  196,  196,  533,  196,  196,

      409,  529,  196, 1135, 1135,  196,  196, 1135, 1135, 1135,
      534,  403,  196,  196, 1135,  530,  531,  196,  196,  196,
      408,  407,  196,  196,  533,  196,  196,  409,  535,  196,
      196,  532,  196,  196,  196,  404,  405,  534,  196,  196,
      410,  417,  536,  531,  196,  196,  418, 1135,  196,  406,
      537, 1135,  538,  196,  196,  535, 1135,  196,  532,  539,
     1135,  196,  404,  405,  196,  196, 1135,  410,  417,  536,
      415,  196, 1135,  418,  196,  196,  406,  537,  196,  538,
      416,  196,  196,  196,  540,  541,  539,  196,  426,  542,
      196,  196,  411,  412,  413,  543,  414,  415,  196,  196,

     1135,  196, 1135,  196,  196,  196, 1135,  416,  544,  196,
      196,  540,  541,  545,  196,  426,  542,  196, 1135,  411,
      412,  413,  543,  414,  546,  196,  196,  196, 1135,  196,
      196,  196,  419,  423,  424,  544,  547,  420,  548,  196,
      545, 1135,  196,  421, 1135,  196,  196,  428,  196,  549,
      422,  546,  196, 1135,  196,  196,  196, 1135,  425,  419,
      423,  424,  196,  547,  420,  548,  196,  196,  196,  196,
      421,  196,  196,  196,  428,  196,  549,  422,  429,  196,
      196,  427,  196,  550,  196,  425,  196,  196,  551,  196,
      196,  552,  196,  435,  196,  196,  196,  553,  196,  436,

      196, 1135,  554, 1135, 1135,  429,  196,  196,  427, 1135,
      550,  196,  196,  196,  196,  551,  555,  196,  552,  196,
      435,  556,  557,  196,  553, 1135,  436,  196,  430,  554,
      431,  196,  196,  196,  432,  196,  196,  558,  559,  196,
      560,  433,  437,  555,  438,  434,  561,  564,  556,  557,
      196,  196,  196, 1135, 1135,  430,  196,  431,  196,  196,
      196,  432,  196,  196,  558,  559,  439,  560,  433,  437,
      565,  438,  434,  561,  564, 1135,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  440,  566,
      441, 1135,  442,  439, 1135, 1135, 1135,  565, 1135, 1135,

      196,  196,  196,  196, 1135,  567,  196,  196,  196,  196,
      196,  196,  196,  196, 1135,  440,  566,  441,  196,  442,
      443,  196,  196,  444, 1135,  196,  196,  196,  196,  196,
      445,  196,  567,  196,  446,  447,  562,  196,  196, 1135,
     1135,  196, 1135,  568,  569,  196,  563,  443,  196,  196,
      444,  196,  196,  196, 1135,  196,  570,  445,  196,  196,
      196,  446,  447,  562,  454,  196,  448,  196,  196,  453,
      568,  569, 1135,  563,  196,  196, 1135,  196,  196,  196,
      196,  196,  196,  570, 1135,  571,  196,  196, 1135, 1135,
     1135,  454, 1135,  448,  196,  196,  453,  455, 1135,  196,

     1135,  196,  196,  449,  196,  572,  196,  196,  196, 1135,
      465,  196,  571,  450, 1135,  196,  196,  456,  451,  452,
      196,  196,  196,  196,  455,  196,  196,  457,  573,  458,
      449, 1135,  572, 1135, 1135, 1135,  196,  465,  196,  574,
      450,  196,  196,  196,  456,  451,  452,  196,  196,  575,
      196, 1135,  196, 1135,  457,  573,  458, 1135,  196,  576,
      196,  196,  196,  196,  196,  196,  574,  463,  196,  459,
      577,  460, 1135,  196,  462,  196,  575,  196,  196,  196,
      196,  196,  461,  578,  464,  196,  576,  196,  196,  196,
     1135,  196,  196,  196,  463,  196,  459,  577,  460,  196,

      196,  462,  196,  196,  196,  196,  196,  196,  196,  461,
      578,  464,  196,  469,  466,  579,  196,  196,  580,  196,
      196,  196,  196,  468,  467,  581,  196,  196,  470,  196,
      196,  196,  196,  196, 1135, 1135, 1135,  196, 1135,  196,
      469,  466,  579,  196,  196,  580,  196,  196,  196,  196,
      468,  467,  581,  196,  196,  470,  196,  196,  196,  196,
      196,  473,  196,  474,  196,  196,  196,  475,  471,  196,
     1135,  582,  583,  196,  196,  472,  196,  584, 1135,  196,
      196,  477,  196,  196,  196,  196,  478, 1135,  473,  196,
      474,  196,  196,  196,  475,  471,  196,  476,  582,  583,

      196,  196,  472,  585,  584,  196,  196,  196,  477,  196,
      196,  196,  196,  478,  480,  196, 1135,  479,  196,  196,
      586,  196, 1135,  587,  476,  492, 1135,  196,  196,  196,
      585,  588,  196,  196,  196,  196,  481,  196,  196,  196,
      589,  480,  196,  196,  479,  196,  196,  586,  196,  485,
      587, 1135,  492,  196,  196,  590,  196,  591,  588,  196,
      196,  486,  196,  481,  196,  196,  196,  589, 1135,  196,
      196, 1135,  196,  500,  196, 1135,  485, 1135,  196,  592,
      196,  482,  590,  196,  591,  196,  196,  196,  486,  196,
      483,  488,  196,  196,  196,  196,  196, 1135,  484,  196,

      500,  196,  487,  196,  489,  196,  592,  196,  482,  196,
      196,  196,  196,  593,  196,  196,  196,  483,  488, 1135,
      196,  196,  196,  594,  196,  484,  196,  196,  196,  487,
      196,  489,  490, 1135,  196, 1135,  196,  196,  196, 1135,
      593,  196,  196,  491,  196,  493,  494,  595,  596,  196,
      594,  196, 1135,  196,  196,  196, 1135,  196,  496,  490,
      495,  196,  196,  597,  196,  501,  196,  598,  196,  196,
      491,  196,  493,  494,  595,  596,  196, 1135,  497,  196,
      196,  196,  196,  498,  196,  496,  499,  495,  196,  196,
      597,  196,  501,  196,  598,  196,  196,  506,  502,  196,

      599,  196, 1135,  504,  503,  497,  196,  196,  196,  196,
      498,  196,  600,  499,  601, 1135,  505,  196,  196,  602,
     1135,  603,  196,  196,  506,  502,  196,  599,  196,  508,
      504,  503,  196,  196,  196,  608,  196,  196,  196,  600,
      518,  601,  519,  505,  196,  604,  602,  507,  603,  606,
      196,  607,  196,  196,  605,  609,  508,  520,  610,  196,
      196,  611,  608,  196,  196,  612,  613,  518,  614,  519,
      617,  615,  604,  618,  507,  616,  606, 1135,  607,  196,
      196,  605,  609,  196,  520,  610,  619,  196,  611, 1135,
      196, 1135,  612,  613, 1135,  614, 1135,  617,  615, 1135,

      618,  196,  616,  196,  620,  196,  196,  196,  196, 1135,
      196,  196,  729,  619,  196, 1135,  196,  196,  622,  730,
      196,  196,  196,  621,  196, 1135,  196,  196,  196, 1135,
      196,  620,  196,  196,  196,  196,  196,  196,  196,  729,
      196,  196,  196,  196,  624,  622,  730,  196,  196,  196,
      621,  196,  196,  196,  196,  196,  196,  196,  731,  196,
      196,  196,  623,  196,  196,  626,  732,  196,  196,  196,
      196,  624,  196,  625,  196,  196, 1135,  627, 1135,  196,
     1135,  196,  196,  196,  196,  731,  196,  196,  196,  623,
      196,  196,  626,  732,  733,  196, 1135,  196, 1135,  196,

      625,  196,  196,  628,  627,  629,  196,  632,  196,  196,
      196,  196, 1135,  734, 1135,  735, 1135,  196,  196,  631,
      630,  733,  196,  196,  196,  196,  196,  196,  196, 1135,
      628,  633,  629,  196,  632,  736,  196,  196,  196,  634,
      734,  196,  735,  196,  196,  196,  631,  630,  737,  738,
      196,  196,  196,  196,  196,  196,  636, 1135,  633,  196,
      196,  635,  736,  196,  196,  638,  634, 1135,  196,  196,
      196,  196,  196,  637,  196,  737,  738,  196,  196,  196,
      196,  196,  739,  636,  639,  196,  196,  196,  635, 1135,
      196,  196,  638, 1135,  196,  640,  196,  196,  641,  196,

      637,  196,  196,  196,  196,  196,  196,  196,  196,  739,
      740,  639,  196,  642,  643, 1135,  196,  741,  196,  196,
      196,  196,  640, 1135,  196,  641,  196, 1135,  644,  196,
      196,  196,  196,  742,  196,  196,  196,  740,  196, 1135,
      642,  643,  647,  196,  741,  196,  196,  196,  196,  645,
      646,  196,  648,  196,  196,  644,  196,  196,  196,  196,
      742,  196,  196,  196, 1135,  196,  196, 1135, 1135,  647,
      196,  743,  196,  196,  744,  196,  645,  646,  196,  648,
      196,  196,  745,  196,  196,  650,  196,  649,  651,  196,
      196,  196, 1135,  196,  196,  196, 1135,  196,  743,  196,

      196,  744,  746,  747,  748,  196, 1135,  749,  750,  745,
      196,  196,  650,  196,  649,  651,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  751, 1135,  653, 1135,  746,
      747,  748,  196,  652,  749,  750,  752,  196,  196,  196,
      196,  196, 1135, 1135,  196,  196,  196,  196,  196,  656,
      196,  196,  751,  196,  653,  655, 1135,  654,  753,  754,
      652,  196,  755,  752,  196,  756,  196,  196,  196,  196,
      657,  196,  196,  196,  196,  196,  656,  196,  196,  196,
      196,  658,  655,  196,  654,  753,  754,  659,  196,  755,
      757,  196,  756,  196,  196,  758,  196,  657,  759,  196,

      196,  196, 1135,  760,  196,  196,  196,  196,  658,  196,
      196,  196,  661,  196,  659,  196,  660,  757,  761,  196,
      196,  196,  758,  662,  762,  759,  196,  196,  196,  196,
      760,  663,  196,  196,  196,  196,  196,  664,  196,  661,
      196,  763,  196,  660, 1135,  761,  196,  764,  196, 1135,
      662,  762,  765,  196,  196,  196,  196,  196,  663,  196,
      196,  196,  196,  196,  664,  196,  766,  196,  763,  196,
     1135,  667,  665,  767,  764,  196,  666,  196, 1135,  765,
      196,  768,  669,  196,  196,  196,  196,  196,  196, 1135,
      196,  196,  196,  766,  196,  769,  196,  668,  667,  665,

      767,  670,  196,  666,  196,  196,  770,  196,  768,  669,
      196,  671,  196,  196,  196,  196,  672, 1135,  196,  196,
      196,  196,  769,  196,  668, 1135,  673,  771,  670,  196,
     1135,  196,  196,  770,  196,  674,  196,  196,  671,  196,
      196,  196,  196,  672,  196, 1135,  196,  196,  196,  675,
      196, 1135,  677,  673,  771,  196,  196,  196,  196,  196,
      196,  196,  674,  196,  196,  678,  196,  196,  196,  772,
      676,  196,  196,  679,  196,  196,  675,  773,  196,  677,
      774,  196,  196,  196,  196,  680,  196,  196,  196,  196,
      777, 1135,  678,  196,  196, 1135,  772,  676, 1135,  196,

      679,  196,  196,  778,  773,  196,  196,  774,  196,  196,
      196,  196,  680,  681,  196,  196,  196,  777,  196,  779,
      196,  196,  683,  196, 1135,  682,  196,  196,  196,  684,
      778,  196,  196,  196,  196, 1135,  196,  196,  196, 1135,
      681,  196,  196,  196,  685,  196,  779,  196,  196,  683,
      196,  196,  682,  196,  196,  196,  684,  780,  196,  196,
      196,  196,  196,  781,  196, 1135,  196,  196,  782,  686,
      196,  685,  196,  687,  196,  196,  196,  689,  196, 1135,
      196,  196,  196, 1135,  780, 1135,  688,  196, 1135,  196,
      781,  196,  196,  196,  196,  782,  686,  196,  690,  196,

      687,  196,  196,  196,  689,  196,  691,  196,  196,  196,
      196,  196,  693,  688,  196,  196,  783, 1135,  196,  196,
      692,  196,  784, 1135,  196,  690,  775,  776,  196,  196,
      196,  196,  196,  691, 1135,  785,  196,  196,  196,  693,
      196,  196,  196,  783,  694,  196,  196,  692,  196,  784,
      196,  786,  787,  775,  776,  788,  196,  196,  196,  695,
      696,  196,  785,  196,  196,  196,  196,  196,  196,  789,
     1135,  694,  790,  196,  791,  792,  697,  196,  786,  787,
     1135,  196,  788,  196,  196,  700,  695,  696,  196,  196,
      793,  196,  196,  196,  196,  196,  789,  698,  196,  790,

      196,  791,  792,  697,  196,  196,  702,  699,  196,  196,
      196,  196,  700,  196,  196,  794,  196,  793,  196,  701,
      196,  196,  196,  795,  698,  196,  196,  196,  796,  196,
     1135,  196,  196,  702,  699,  797,  196,  196,  196,  196,
      196,  196,  794,  196,  196,  196,  701,  196,  196,  196,
      795,  704,  798,  196,  196,  796,  196,  703,  196,  196,
      799, 1135,  797,  800,  196,  196,  196, 1135,  196,  705,
      196,  196,  196,  196,  196,  196,  801,  196,  704,  798,
      707,  196,  802,  706,  703,  196,  196,  799,  196,  803,
      800,  196, 1135,  196,  196,  196,  705,  804,  196,  196,

      196,  196,  196,  801,  196,  708,  196,  707,  805,  802,
      706,  806, 1135, 1135,  196,  196,  803,  709,  807,  196,
      196,  196,  196,  196,  804,  196, 1135,  711,  710,  196,
     1135,  196,  708,  196, 1135,  805,  196,  808,  806,  196,
      196,  196,  809, 1135,  709,  807,  196,  196,  196,  196,
      196,  810,  196,  196,  711,  710,  712,  196,  196, 1135,
      811,  714,  713,  196,  808,  196,  196,  196,  196,  809,
      715, 1135, 1135,  196,  196,  196, 1135,  895,  810,  196,
      196,  196, 1135,  712,  196,  896,  196,  811,  714,  713,
      196,  897,  196,  898, 1135,  196,  716,  715,  717,  196,

      196,  196,  899,  196,  895,  196,  196,  719,  196,  718,
      720,  196,  896,  196, 1135,  196, 1135,  196,  897,  196,
      898,  196, 1135,  716, 1135,  717,  196,  900,  196,  899,
      196,  196,  196,  196,  719,  196,  718,  720,  196,  196,
     1135,  722,  196,  196,  196, 1135,  196,  196,  196,  196,
     1135,  721,  725,  196,  900,  196,  726,  196,  196,  196,
     1135,  196,  196,  196, 1135, 1135,  196,  723,  722,  196,
      196,  196,  724, 1135,  196, 1135,  196,  196,  721,  725,
      196,  901,  196,  726,  196,  902,  196,  196,  196,  196,
      196,  196,  727,  196,  723, 1135,  196,  196, 1135,  724,

      728,  196,  196, 1135,  196,  903,  196,  196,  901,  196,
      812,  904,  902, 1135,  196,  813,  196,  196,  196,  727,
      196,  196,  196,  905,  196,  196,  196,  728,  196,  196,
      196,  196,  903,  196,  196,  196,  196,  812,  904,  906,
      817,  814,  813,  196,  196,  907,  815,  196,  196,  196,
      905,  196,  196,  196, 1135,  818,  816,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  906,  817,  814,  819,
      196, 1135,  907,  815,  196,  196,  908,  909,  196,  910,
      196,  196,  818,  816,  911,  820,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  819,  196,  196,  196,

     1135,  196,  196,  908,  909,  912,  910,  196,  196,  196,
      913,  911,  820,  914,  196,  196,  196,  196,  915,  196,
      196,  196,  196,  196,  196,  196,  196,  821,  196,  196,
     1135,  196,  912,  822, 1135,  196,  196,  913, 1135,  196,
      914,  196,  196,  196,  196,  915,  196,  196,  196,  196,
      196,  196,  196, 1135,  821, 1135,  196,  825,  196,  916,
      822,  823,  196,  196,  917,  196,  196,  196,  196,  196,
      196,  196, 1135, 1135,  196,  196,  196,  918,  196,  196,
      824,  919,  826,  920,  825,  196,  916,  196,  823, 1135,
      196,  917,  196,  196,  196,  196,  196,  196,  196,  196,

      827,  196, 1135,  196,  918,  196, 1135,  824,  919,  826,
      920,  921,  196,  196,  196,  828,  829, 1135, 1135,  196,
      196,  196, 1135, 1135,  196,  830,  196,  827,  196,  196,
      196,  196,  196,  196, 1135,  196, 1135,  922,  921,  832,
      196,  196,  828,  829,  831,  196,  196,  923,  196,  196,
      196,  196,  830,  196,  833, 1135,  196,  196,  196,  926,
      196,  196,  196,  196,  922,  927,  832,  196,  196, 1135,
      196,  831,  196,  196,  923,  196,  196,  196,  196,  196,
      196,  833,  834,  196,  196,  196,  926,  196,  196,  196,
      196,  196,  927,  928,  196,  196,  835,  196,  836,  196,

      196, 1135,  196,  196, 1135,  196,  196,  196, 1135,  834,
      196,  929,  196,  196,  196,  837,  196,  196,  196,  196,
      928,  930,  196,  835, 1135,  836,  196,  839,  838,  931,
      196,  196,  196,  196,  196,  196,  932,  840,  929,  841,
      196,  196,  837,  196,  196,  196,  196,  933,  930,  196,
     1135,  196, 1135,  196,  839,  838,  931,  934,  196,  196,
      196,  196,  196,  932,  840,  935,  841,  196,  196,  196,
      196,  196,  196,  843,  933,  196,  196,  196,  196,  196,
      196,  196,  842,  936,  934,  196,  196,  196,  196,  196,
     1135,  937,  935,  938,  196,  196,  196,  196,  196,  844,

      843, 1135,  196,  196,  196,  196,  196,  196,  196,  842,
      936,  196,  196, 1135,  196,  196,  196,  196,  937,  939,
      938,  196,  196,  196,  196,  940,  844,  941,  845, 1135,
      196,  196,  196,  942,  196, 1135,  196,  196,  196,  196,
      196,  943,  196,  196,  196,  846,  939, 1135,  196,  196,
      196, 1135,  940,  196,  941,  845,  196,  847,  196,  196,
      942,  196,  924,  196,  196,  925,  196,  196,  943,  196,
      196,  196,  846,  944,  196,  196,  196,  196,  196, 1135,
      196, 1135,  945,  196,  847,  946,  196,  848,  196,  924,
      849,  196,  925,  196,  196,  196,  196,  196,  196,  196,

      944,  196,  196,  947,  196,  196,  850,  948,  851,  945,
     1135,  949,  946,  196,  848,  196, 1135,  849,  196,  950,
      196,  196,  196,  196,  196,  852,  196,  196,  196,  951,
      947,  952,  196,  850,  948,  851,  853,  196,  949, 1135,
      196,  196,  196,  196,  854,  196,  950,  196,  196,  196,
      196,  196,  852,  953,  196,  196,  951,  196,  952,  196,
      954,  955,  196,  853,  196,  196,  196,  196,  196, 1135,
      196,  854,  196, 1135,  196,  196,  196, 1135,  196,  196,
      953,  196,  196,  196,  196,  196, 1135,  954,  955,  196,
     1135,  196,  196,  196,  196,  196,  855, 1017,  856,  196,

      196,  196, 1135, 1135,  196, 1018,  196, 1019,  196,  196,
      196,  196,  196,  857, 1020,  196, 1135,  196,  196,  196,
      196, 1135,  196,  855, 1017,  856,  196,  196,  196,  858,
      859,  196, 1018,  196, 1019,  196, 1135, 1135,  196,  196,
      857, 1020,  196,  196,  196,  196,  196,  196,  860,  196,
     1135,  196,  861, 1021,  863,  196,  858,  859,  196,  196,
      196,  862,  196,  196,  196,  196,  196,  196,  196, 1022,
      196,  196,  196, 1023,  196,  860,  196,  864,  196,  861,
     1021,  863,  196,  196,  196,  196,  196, 1135,  862,  196,
      196,  196,  196,  196,  196,  196, 1022, 1024,  196,  196,

     1023,  196,  865,  196,  864, 1025, 1026,  866,  196,  196,
      196,  196,  196,  867,  868, 1135,  196,  196,  196,  196,
      196,  196,  196, 1027, 1024, 1135,  196,  196,  196,  865,
      196,  196, 1025, 1026,  866,  196,  196,  196,  196,  196,
      867,  868,  869, 1028,  196,  196,  196,  196,  196,  196,
     1027, 1135,  196,  196,  196,  196,  196,  196,  196, 1135,
      870, 1029, 1030, 1031,  196,  196,  871, 1032, 1033,  869,
     1028,  196,  196,  196,  196,  196, 1135, 1034,  873,  196,
      196,  196, 1035,  196,  196,  196,  872,  870, 1029, 1030,
     1031,  196, 1036,  871, 1032, 1033, 1135, 1037,  196,  196,

      196,  196,  196,  196, 1034,  873,  196,  196,  196, 1035,
      196,  874,  196,  872,  876,  875,  196, 1135,  196, 1036,
      196, 1135, 1038,  196, 1037,  196,  196, 1135,  196,  196,
      196, 1135, 1039,  196,  196,  878,  196,  196,  874,  196,
     1040,  876,  875,  196,  196,  196, 1135,  196,  196, 1038,
      196,  877,  196,  196,  196,  196,  196,  880,  879, 1039,
     1135,  196,  878,  196,  196, 1041,  196, 1040, 1135,  196,
     1135,  196,  196,  196,  196,  196, 1135,  196,  877,  881,
     1135,  196,  196,  196,  880,  879, 1135,  196,  196,  196,
     1042,  196, 1041,  196, 1135,  196,  196,  196,  196,  196,

      196,  196,  883,  196,  196, 1043,  881,  196,  196,  882,
      196,  196,  196,  196,  196,  196,  196, 1042,  196, 1135,
      196,  884,  196, 1135,  196,  196,  196,  196,  196,  883,
      196,  885, 1043,  196,  196,  196,  882,  196,  196,  196,
      196, 1044,  196,  196, 1135,  196,  196,  196,  884, 1045,
      196, 1046,  886,  196,  196,  196, 1047,  888,  885, 1048,
      196,  196,  887,  196,  196,  196,  196,  196, 1044, 1135,
      196,  196, 1135,  196,  196, 1049, 1045,  196, 1046,  886,
      196,  196,  889, 1047,  888, 1050, 1048,  196,  196,  887,
      196, 1085,  196,  196,  196,  196,  891,  890,  196,  196,

      196,  196, 1049, 1135,  892,  196, 1135, 1135,  196,  889,
     1086, 1087, 1050,  196,  196,  196,  196,  196, 1085, 1088,
     1135,  196,  196,  891,  890,  196,  196,  196,  196,  196,
      196,  892,  196,  196,  196,  894, 1135, 1086, 1087,  196,
      196,  893,  196,  196,  196,  196, 1088,  196,  196,  196,
      196,  196,  196,  196, 1135,  196,  196,  196, 1135,  196,
      196,  196,  894,  196, 1135, 1089,  196,  196,  893,  196,
     1090,  196,  196, 1091,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196, 1135,  196,  196,  196, 1135,  957,
      196,  196, 1089,  196,  196,  196,  196, 1090,  196,  196,

     1091,  196,  196,  196,  956, 1135,  196,  958,  196,  196,
      196,  196,  196, 1092,  196,  196,  957,  196,  196, 1135,
      196,  196,  196, 1135,  960,  196,  196,  196,  196,  196,
      196,  956,  959, 1093,  958, 1094,  196,  196,  196, 1135,
     1092, 1095,  196,  196,  196,  196,  196,  196,  196,  964,
      196,  960,  196,  196,  196,  961,  196, 1096,  962,  959,
     1093,  196, 1094,  196,  196,  196,  196, 1097, 1095,  196,
      196,  963,  196,  196,  196,  196,  964,  196, 1135,  196,
      196,  196,  961,  196, 1096,  962, 1098,  965,  196, 1099,
      196, 1115,  196,  196, 1097,  196,  196,  196,  963, 1116,

      968,  196,  196,  196,  196,  196,  196,  966,  196,  196,
      196, 1117,  967, 1098,  965,  196, 1099,  196, 1115,  196,
      196, 1118,  196, 1135,  196,  196, 1116,  968,  196,  196,
      196,  196,  196,  969,  966,  196,  196, 1135, 1117,  967,
     1135,  972,  196, 1135,  196,  196,  196,  196, 1118,  196,
      196, 1135,  196,  973,  196,  196,  196,  196, 1119,  196,
      969,  196,  196,  196,  971,  970, 1135,  196,  972, 1120,
      196, 1127,  196,  196, 1128,  196,  196,  196,  974, 1135,
      973,  196,  196,  196,  196, 1119,  196, 1129,  196,  196,
      196,  971,  970,  196,  196, 1133, 1120,  196, 1127,  196,

      196, 1128,  196,  196,  975,  974,  978,  196,  196,  196,
      196,  977,  196,  976, 1129, 1135,  196,  196, 1135,  196,
      196,  196, 1133, 1135, 1135,  196,  196,  196,  196,  196,
      196,  975, 1135,  978,  196,  196,  196,  196,  977,  196,
      976, 1135, 1135,  196,  196,  196,  196,  196,  196, 1135,
     1135, 1135,  196,  196,  196,  196,  196,  196,  979, 1135,
      980,  196,  196,  196,  196,  196,  196, 1135, 1135, 1135,
      196, 1135,  196,  196,  196,  196, 1135,  981, 1135,  196,
      196,  196,  196, 1135,  196,  979, 1135,  980,  196,  196,
      196, 1135,  196,  196,  196,  196, 1135,  196,  196,  196,

      196,  196,  196,  196,  981, 1135,  196,  984,  196,  196,
     1135,  196,  982, 1135,  196, 1135,  196,  196, 1135,  196,
      196,  196,  196, 1135,  196,  196,  196,  196,  196, 1135,
      196,  983, 1135,  196,  984, 1135,  196,  196,  196,  982,
      987,  196, 1135,  196,  196,  196,  196,  196,  196,  196,
     1135,  196,  196,  196,  196,  196, 1135,  196,  983,  985,
      196,  196,  986,  196,  196,  196, 1135,  987,  196, 1135,
      196,  196,  196, 1135,  196,  196,  196,  196,  196,  196,
      196, 1135,  196,  988,  196, 1135,  985,  196,  196,  986,
      196, 1135,  196, 1135, 1135,  196,  196,  196,  196, 1135,

      196,  196, 1135,  196,  196,  989, 1135, 1135,  196,  196,
      988,  990,  196,  196,  196, 1135,  196,  196, 1135, 1135,
     1135,  196,  196,  196, 1135,  196,  196,  196,  196,  196,
      196, 1135,  989, 1135, 1135,  196,  196,  991,  990,  196,
      196,  196,  196,  196, 1135, 1135,  196,  992,  196,  196,
      196,  196,  196,  196, 1135,  196,  196, 1135, 1135,  196,
     1135,  995, 1135,  196,  991,  196,  196,  196,  196,  196,
     1135,  196,  993,  196,  992,  196,  996,  196,  196,  196,
      196,  196, 1135, 1135,  994,  196,  196, 1135,  995,  997,
      196,  196,  196,  196,  196, 1135,  196,  196,  196,  993,

      196,  196,  196,  996,  196,  196,  196,  196,  196, 1135,
     1135,  994,  196, 1135, 1135, 1001,  997,  196,  196, 1135,
      196,  998,  999,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196, 1000,  196,  196, 1135, 1135,  196, 1002,
     1135, 1135, 1001, 1135,  196,  196,  196,  196,  998,  999,
     1135, 1135,  196,  196,  196,  196,  196,  196, 1003,  196,
     1000,  196,  196,  196, 1135,  196, 1002, 1004, 1135, 1135,
     1135,  196,  196,  196, 1135,  196, 1135, 1135, 1135,  196,
      196,  196,  196,  196,  196, 1003,  196,  196, 1135, 1135,
      196,  196,  196, 1006, 1004,  196,  196, 1005,  196,  196,

      196,  196,  196,  196, 1008,  196,  196,  196, 1135, 1009,
      196,  196,  196,  196,  196,  196, 1007,  196,  196,  196,
     1006,  196,  196,  196, 1005, 1135,  196,  196,  196, 1135,
      196, 1008,  196,  196, 1135, 1135, 1009, 1010, 1135,  196,
      196,  196,  196, 1007,  196,  196, 1011, 1135,  196, 1135,
      196, 1013, 1135, 1012,  196,  196, 1135, 1135,  196,  196,
      196,  196, 1135,  196, 1010, 1135,  196, 1135,  196, 1135,
     1135,  196,  196, 1011,  196, 1135, 1135,  196, 1013,  196,
     1012,  196,  196,  196, 1135,  196,  196,  196,  196, 1135,
      196, 1015, 1016,  196, 1135,  196,  196, 1014,  196,  196,

      196,  196, 1135,  196, 1135,  196,  196, 1135, 1051,  196,
      196, 1135,  196,  196,  196,  196,  196,  196, 1015, 1016,
     1135, 1135,  196,  196, 1014,  196,  196,  196,  196, 1135,
      196, 1135,  196,  196,  196, 1051,  196,  196,  196,  196,
      196,  196,  196,  196,  196, 1135, 1052, 1053, 1135,  196,
     1135,  196,  196,  196,  196,  196, 1135,  196, 1135, 1135,
      196,  196,  196, 1054,  196,  196,  196,  196,  196,  196,
     1135,  196, 1135, 1052, 1053,  196,  196, 1135,  196,  196,
      196,  196,  196,  196,  196, 1135, 1055, 1135,  196,  196,
     1054,  196,  196,  196,  196, 1135,  196,  196,  196,  196,

     1135,  196,  196, 1058, 1135, 1056,  196,  196,  196,  196,
      196,  196, 1135, 1055, 1057,  196,  196,  196,  196,  196,
      196, 1135, 1059, 1135,  196,  196,  196,  196,  196,  196,
     1058, 1135, 1056,  196,  196,  196,  196,  196,  196, 1135,
     1060, 1057,  196,  196,  196,  196,  196,  196, 1135, 1059,
     1135,  196,  196,  196,  196,  196,  196,  196, 1135, 1135,
      196,  196,  196,  196,  196, 1135,  196, 1060, 1135,  196,
      196,  196,  196,  196, 1135, 1061, 1135,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
     1135, 1135, 1062,  196, 1135,  196,  196,  196,  196, 1135,

      196,  196, 1061,  196,  196,  196,  196, 1135,  196,  196,
      196, 1063,  196,  196,  196, 1135,  196,  196, 1135, 1062,
      196,  196,  196,  196,  196,  196, 1135,  196,  196,  196,
      196, 1135,  196,  196, 1135,  196,  196,  196, 1063,  196,
      196,  196, 1135,  196,  196,  196, 1135,  196,  196,  196,
     1135,  196,  196, 1065, 1064,  196,  196,  196, 1135,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
     1066, 1135,  196,  196,  196, 1135,  196, 1135,  196,  196,
     1065, 1064,  196, 1135,  196,  196,  196, 1135,  196,  196,
      196,  196,  196,  196,  196,  196,  196, 1066, 1067, 1068,

      196,  196, 1135,  196,  196,  196,  196,  196,  196,  196,
     1135,  196,  196, 1070, 1135, 1135,  196,  196,  196, 1069,
      196,  196,  196,  196,  196, 1067, 1068, 1135,  196, 1135,
      196,  196,  196,  196,  196,  196,  196, 1135,  196, 1135,
     1070,  196, 1135,  196,  196,  196, 1069,  196, 1071, 1135,
      196,  196, 1135,  196, 1072,  196, 1073,  196,  196,  196,
      196,  196,  196,  196, 1135, 1074, 1135,  196,  196, 1135,
      196,  196,  196,  196,  196, 1071, 1135, 1135,  196, 1135,
      196, 1072,  196, 1073,  196,  196,  196,  196,  196,  196,
      196,  196, 1074, 1135,  196,  196, 1075,  196,  196,  196,

      196,  196,  196,  196, 1135,  196, 1076, 1135, 1135,  196,
     1135,  196,  196,  196,  196, 1135,  196,  196,  196,  196,
     1135, 1135,  196, 1075,  196, 1135,  196,  196,  196,  196,
      196,  196,  196, 1076, 1077, 1135, 1135, 1135,  196,  196,
     1135, 1078, 1135,  196,  196,  196,  196,  196, 1135,  196,
     1135,  196, 1135, 1135,  196,  196, 1079, 1135,  196,  196,
      196, 1077, 1135, 1135,  196,  196, 1080, 1081, 1078,  196,
     1135,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196, 1079, 1135, 1135, 1135,  196, 1135,  196,
     1082,  196,  196, 1080, 1081,  196,  196,  196,  196,  196,

      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
     1135, 1135, 1135,  196,  196, 1135,  196, 1082,  196,  196,
     1135,  196,  196, 1135,  196, 1135,  196, 1083,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196, 1084,  196,
      196,  196, 1135,  196, 1135,  196,  196, 1135,  196, 1135,
     1135,  196, 1135,  196, 1083, 1135,  196, 1135,  196,  196,
      196,  196,  196,  196,  196, 1084,  196,  196,  196,  196,
      196, 1100,  196,  196, 1135,  196, 1135, 1101,  196, 1135,
      196,  196, 1135,  196, 1135,  196,  196, 1135,  196,  196,
      196,  196, 1135,  196,  196,  196,  196,  196, 1100,  196,

      196,  196,  196, 1102, 1101, 1135, 1135,  196,  196, 1135,
      196, 1135,  196,  196, 1135,  196,  196,  196,  196, 1135,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
     1102,  196, 1103, 1135,  196,  196, 1135,  196, 1135,  196,
      196, 1135,  196, 1135,  196,  196, 1135,  196,  196,  196,
      196, 1135,  196,  196,  196,  196,  196, 1135,  196, 1103,
     1135, 1104,  196,  196,  196, 1135,  196,  196, 1135,  196,
     1135,  196,  196,  196,  196,  196,  196,  196, 1105, 1135,
      196, 1107,  196,  196, 1135,  196, 1135, 1135, 1104, 1106,
      196,  196, 1135,  196,  196,  196,  196, 1135,  196,  196,

      196,  196,  196,  196,  196, 1105, 1135,  196, 1107,  196,
      196, 1135,  196,  196, 1135,  196, 1106,  196,  196, 1135,
      196,  196,  196,  196, 1135, 1135,  196,  196,  196,  196,
      196,  196, 1135, 1109,  196,  196,  196,  196, 1135,  196,
      196, 1135,  196, 1135,  196, 1108, 1135,  196,  196,  196,
      196, 1135, 1135,  196,  196,  196,  196,  196,  196, 1135,
     1109,  196,  196,  196,  196, 1135,  196,  196, 1135,  196,
     1135,  196, 1108, 1135,  196,  196,  196,  196, 1110, 1135,
      196,  196,  196,  196, 1111,  196, 1135, 1135, 1135, 1112,
      196,  196, 1135,  196,  196, 1135,  196,  196,  196,  196,

     1135,  196,  196,  196, 1135, 1110, 1135, 1135,  196, 1135,
      196, 1111,  196,  196, 1113, 1135, 1112, 1114,  196,  196,
      196,  196, 1135,  196,  196,  196,  196,  196,  196,  196,
      196,  196, 1135, 1135, 1135,  196, 1135,  196, 1135, 1135,
      196, 1113, 1135,  196, 1114,  196,  196, 1135,  196, 1135,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
     1135,  196,  196, 1135,  196,  196, 1135, 1135, 1121, 1135,
      196, 1135,  196,  196, 1135,  196, 1135, 1135,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
     1135,  196,  196, 1135, 1122, 1121, 1135,  196, 1135,  196,

      196,  196,  196, 1135, 1135,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
     1135, 1122, 1123,  196,  196, 1135,  196, 1135,  196,  196,
     1135,  196,  196,  196,  196, 1135,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196, 1126, 1135, 1123,
      196,  196, 1125, 1124, 1135,  196,  196, 1135,  196, 1135,
      196,  196, 1135,  196,  196, 1130,  196, 1135,  196,  196,
      196,  196,  196,  196, 1126, 1135, 1135,  196,  196, 1125,
     1124, 1135,  196,  196, 1135,  196, 1135,  196,  196, 1135,
      196,  196, 1130,  196, 1135,  196,  196, 1131,  196, 1135,

      196,  196, 1135,  196,  196,  196, 1135, 1135, 1135,  196,
      196,  196,  196,  196,  196, 1135, 1135, 1135,  196, 1132,
      196,  196,  196,  196, 1131, 1135, 1135,  196,  196,  196,
      196,  196,  196,  196, 1135,  196,  196,  196,  196, 1135,
      196,  196, 1134,  196, 1135,  196, 1132, 1135,  196, 1135,
      196,  196, 1135,  196,  196, 1135,  196, 1135,  196, 1135,
      196,  196,  196, 1135,  196, 1135, 1135, 1135,  196, 1134,
      196, 1135,  196, 1135, 1135, 1135, 1135, 1135,  196, 1135,
      196, 1135, 1135, 1135, 1135, 1135, 1135, 1135,  196,   47,
       47,   47,   47,   47,   90, 1135, 1135,   90,   90,  182,

      182,  182, 1135,  182,  184, 1135,  184,  184,  184,  187,
     1135,  187,  187,  187,  196, 1135,  196,  196,  196,    7,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135
    } ;

static const flex_int16_t yy_chk[5988] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   15, 1138,
       15,   17,   17,   18,   18,   21,   22,   21,   50,   50,
       22,   23,   30,   21,  395,   21,   31,  280,   23,   21,
       21,   37,   56,   45,   56,   23,   22,   24,   23,  191,
       27,   24,   21,   22,   21,   24,   27,   22,   23,   30,
       21,   24,   21,   31,   24,   23,   21,   21,   37,   25,
       45,   25,   23,   22,   24,   23,   25,   27,   24,   43,

       43,   25,   24,   27,  190,   32,   28,  187,   24,   32,
       94,   24,   51,   51,   28,   32,   25,   93,   25,   90,
       28,   58,   58,   25,   59,   59,   43,   43,   25,   26,
       88,   88,   32,   28,   34,   33,   32,   26,  100,   33,
       26,   28,   32,   26,   29,   33,   26,   28,   34,   26,
       29,   29,   29,   87,   34,   34,   26,   29,   61,   38,
      101,   34,   33,   38,   26,  100,   33,   26,   60,   38,
       26,   29,   33,   26,   36,   34,   26,   29,   29,   29,
       35,   34,   34,  104,   29,   36,   38,  101,   35,  105,
       38,   36,   35,   92,   92,   35,   38,   41,   57,   41,

       72,   36,   41,   42,   72,  185,  185,   35,  189,  189,
      104,   42,   36,  102,  103,   35,  105,  103,   36,   35,
       72,  102,   35,   39,   41,   39,   41,   72,   39,   41,
       42,   72,   68,   39,   53,   39,   39,   52,   42,   68,
      102,  103,  107,   68,  103,   48,   68,   72,  102,   68,
       39,   46,   39,  110,   20,   39,  116,   73,  109,   68,
       39,   73,   39,   39,   40,  109,   68,   73,   40,  107,
       68,   40,   40,   68,  113,  117,   68,   73,   40,  113,
      110,   40,   19,  116,   73,  109,   16,   11,   73,    7,
        4,   40,  109,    3,   73,   40,  118,    0,   40,   40,

        0,  113,  117,    0,   73,   40,  113,    0,   40,   62,
       62,    0,   62,   62,   62,   62,   62,   62,  112,   62,
       62,   62,   78,  118,   69,   62,  119,   62,  112,   71,
       78,   69,   69,   62,   78,   62,   71,   78,   69,   62,
       62,   69,  120,   71,  122,  112,   71,  123,    0,   78,
        0,   69,   62,  119,   62,  112,   71,   78,   69,   69,
       62,   78,   62,   71,   78,   69,   62,   62,   69,  120,
       71,  122,    0,   71,  123,   62,   63,   63,    0,   63,
       63,   63,   63,   63,   63,   74,   63,   63,   63,   74,
       79,    0,   77,   63,   79,   74,  124,   63,   84,   77,

       79,   84,   84,   77,    0,   74,   77,  125,    0,   77,
       79,  126,   74,   63,  127,    0,   74,   79,   84,   77,
       63,   79,   74,  124,   63,   84,   77,   79,   84,   84,
       77,   83,   74,   77,  125,   83,   77,   79,  126,   83,
       63,  127,   63,   64,  128,   84,  129,   64,  131,   85,
       64,   64,   82,   85,   82,   83,   82,   64,   83,   82,
       64,    0,   83,  132,   82,  134,   83,   64,    0,   85,
       64,  128,    0,  129,   64,  131,   85,   64,   64,   82,
       85,   82,   83,   82,   64,    0,   82,   64,  106,  106,
      132,   82,  134,   86,   64,   65,   85,   86,  135,   65,

      115,  115,  106,   65,  111,  111,  111,  137,  111,   65,
        0,  130,   65,   86,  130,  106,  106,  138,  139,   65,
       86,    0,   65,  140,   86,  135,   65,  115,  115,  106,
       65,  111,  111,  111,  137,  111,   65,  114,  130,   65,
       86,  130,  114,  143,  138,  139,   65,   66,  114,  144,
      140,   66,  145,  146,   66,  114,   66,    0,  141,    0,
      141,   66,    0,    0,  114,  147,   66,   66,    0,  114,
      143,  148,    0,  149,   66,  114,  144,    0,   66,  145,
      146,   66,  114,   66,  121,  141,  121,  141,   66,  136,
      121,  150,  147,   66,   66,   67,  152,  121,  148,  136,

      149,  121,   67,   67,  136,  136,   67,  153,  142,   67,
      142,  121,   67,  121,  154,   67,  136,  121,  150,  155,
      157,  142,   67,  152,  121,    0,  136,  159,  121,   67,
       67,  136,  136,   67,  153,  142,   67,  142,  160,   67,
      156,  154,   67,   70,  156,  161,  155,  157,  142,   70,
       70,   70,  158,  163,  159,  164,   70,  158,  165,  166,
      167,   70,    0,  168,  162,  160,  169,  156,    0,    0,
       70,  156,  161,  162,  168,  171,   70,   70,   70,  158,
      163,  162,  164,   70,  158,  165,  166,  167,   70,   75,
      168,  162,  172,  169,  170,  170,   75,  174,  175,  176,

      162,  168,  171,   75,  173,  176,   75,  173,  162,   75,
       75,    0,  172,  178,  177,  179,   75,  180,    0,  172,
      282,  170,  170,   75,  174,  175,  176,  177,    0,  284,
       75,  173,  176,   75,  173,    0,   75,   75,   76,  172,
      178,  177,  179,   76,  180,   76,  196,  282,  285,  287,
      196,   76,   76,    0,  177,   76,  284,    0,   76,    0,
      289,    0,  197,  197,    0,   76,  196,  197,    0,    0,
       76,    0,   76,  196,  290,  285,  287,  196,   76,   76,
      198,    0,   76,  197,  198,   76,   80,  289,   80,  197,
      197,   80,   80,  196,  197,  198,   80,  291,   80,   80,

      198,  290,  292,  293,  295,  296,  297,  198,   80,    0,
      197,  198,  298,   80,    0,   80,    0,    0,   80,   80,
      299,    0,  198,   80,  291,   80,   80,  198,    0,  292,
      293,  295,  296,  297,  199,   80,   81,  300,  199,  298,
       81,  199,  201,   81,   81,    0,  201,  299,  200,  199,
       81,  200,  200,   81,  199,  201,  200,    0,  301,    0,
      302,  199,  201,   81,  300,  199,    0,   81,  199,  201,
       81,   81,  200,  201,  304,  200,  199,   81,  200,  200,
       81,  199,  201,  200,  202,  301,  202,  302,  305,  201,
      202,    0,  204,  206,  204,  206,  204,  307,  205,  200,

      206,  304,  205,    0,    0,  206,  202,    0,    0,    0,
      308,  202,  204,  202,    0,  305,  306,  202,  205,  204,
      206,  204,  206,  204,  307,  205,  210,  206,  309,  205,
      210,  306,  206,  202,  203,  203,  203,  308,  203,  204,
      207,  210,  310,  306,  207,  205,  210,    0,  207,  203,
      311,    0,  312,  210,  203,  309,    0,  210,  306,  314,
        0,  203,  203,  203,  207,  203,    0,  207,  210,  310,
      209,  207,    0,  210,  209,  207,  203,  311,  214,  312,
      209,  203,  214,  230,  315,  316,  314,  230,  214,  317,
      209,  207,  208,  208,  208,  318,  208,  209,  214,  208,

        0,  209,    0,  230,  208,  214,    0,  209,  319,  214,
      230,  315,  316,  320,  230,  214,  317,  209,    0,  208,
      208,  208,  318,  208,  321,  214,  208,  212,    0,  212,
      230,  208,  211,  212,  212,  319,  322,  211,  323,  212,
      320,    0,  213,  211,    0,  211,  213,  216,  216,  324,
      211,  321,  216,    0,  212,  211,  212,    0,  213,  211,
      212,  212,  213,  322,  211,  323,  212,  215,  216,  213,
      211,  215,  211,  213,  216,  216,  324,  211,  217,  216,
      217,  215,  211,  325,  217,  213,  219,  215,  326,  213,
      219,  327,  220,  219,  215,  216,  220,  328,  215,  220,

      217,    0,  329,    0,    0,  217,  219,  217,  215,    0,
      325,  217,  220,  219,  215,  326,  330,  219,  327,  220,
      219,  331,  332,  220,  328,    0,  220,  217,  218,  329,
      218,  222,  221,  219,  218,  222,  221,  333,  334,  220,
      335,  218,  221,  330,  222,  218,  336,  338,  331,  332,
      218,  222,  221,    0,    0,  218,  223,  218,  222,  221,
      223,  218,  222,  221,  333,  334,  223,  335,  218,  221,
      339,  222,  218,  336,  338,    0,  223,  218,  222,  221,
      225,  224,  226,  223,  225,  224,  226,  223,  224,  341,
      225,    0,  226,  223,    0,    0,    0,  339,    0,    0,

      225,  224,  226,  223,    0,  342,  227,  225,  224,  226,
      227,  225,  224,  226,    0,  224,  341,  225,  229,  226,
      227,  228,  229,  227,    0,  228,  227,  225,  224,  226,
      228,  231,  342,  227,  229,  231,  337,  227,  229,    0,
        0,  228,    0,  343,  344,  229,  337,  227,  228,  229,
      227,  231,  228,  227,    0,  232,  345,  228,  231,  232,
      235,  229,  231,  337,  235,  229,  232,  234,  228,  234,
      343,  344,    0,  337,  234,  232,    0,  236,  231,  234,
      235,  236,  232,  345,    0,  346,  232,  235,    0,    0,
        0,  235,    0,  232,  234,  243,  234,  236,    0,  243,

        0,  234,  232,  233,  236,  347,  234,  235,  236,    0,
      243,  233,  346,  233,    0,  243,  237,  237,  233,  233,
      237,  238,  243,  233,  236,  238,  243,  238,  348,  238,
      233,    0,  347,    0,    0,    0,  237,  243,  233,  349,
      233,  238,  243,  237,  237,  233,  233,  237,  238,  350,
      233,    0,  238,    0,  238,  348,  238,    0,  241,  352,
      248,  240,  241,  237,  248,  240,  349,  241,  238,  239,
      353,  239,    0,  239,  240,  242,  350,  239,  241,  242,
      248,  240,  239,  354,  242,  241,  352,  248,  240,  241,
        0,  248,  240,  239,  241,  242,  239,  353,  239,  244,

      239,  240,  242,  244,  239,  241,  242,  248,  240,  239,
      354,  242,  247,  247,  244,  355,  247,  245,  356,  244,
      239,  245,  242,  246,  245,  357,  244,  246,  249,  249,
      244,  246,  247,  249,    0,    0,    0,  245,    0,  247,
      247,  244,  355,  247,  245,  356,  244,  246,  245,  249,
      246,  245,  357,  250,  246,  249,  249,  250,  246,  247,
      249,  252,  251,  253,  245,  252,  251,  253,  250,  252,
        0,  358,  359,  250,  246,  251,  249,  360,    0,  255,
      250,  255,  251,  253,  250,  252,  255,    0,  252,  251,
      253,  255,  252,  251,  253,  250,  252,  254,  358,  359,

      250,  254,  251,  361,  360,  254,  255,  257,  255,  251,
      253,  257,  252,  255,  257,  256,    0,  256,  255,  256,
      362,  254,    0,  363,  254,  266,    0,  257,  254,  266,
      361,  364,  254,  258,  257,  256,  258,  258,  257,  260,
      365,  257,  256,  260,  256,  266,  256,  362,  254,  260,
      363,    0,  266,  258,  257,  366,  266,  367,  364,  260,
      258,  261,  256,  258,  258,  261,  260,  365,    0,  261,
      260,    0,  266,  271,  271,    0,  260,    0,  271,  368,
      258,  259,  366,  259,  367,  261,  260,  259,  261,  262,
      259,  263,  261,  262,  271,  263,  261,    0,  259,  263,

      271,  271,  262,  259,  264,  271,  368,  264,  259,  262,
      259,  264,  261,  370,  259,  263,  262,  259,  263,    0,
      262,  271,  263,  371,  265,  259,  263,  264,  265,  262,
      259,  264,  265,    0,  264,    0,  262,  267,  264,    0,
      370,  267,  263,  265,  265,  267,  267,  372,  373,  268,
      371,  265,    0,  268,  264,  265,    0,  267,  269,  265,
      268,  272,  269,  374,  267,  272,  269,  375,  267,  268,
      265,  265,  267,  267,  372,  373,  268,    0,  269,  270,
      268,  272,  269,  270,  267,  269,  270,  268,  272,  269,
      374,  273,  272,  269,  375,  273,  268,  275,  273,  270,

      376,  275,    0,  274,  273,  269,  270,  274,  272,  269,
      270,  273,  377,  270,  378,    0,  274,  275,  273,  379,
        0,  381,  273,  274,  275,  273,  270,  376,  275,  277,
      274,  273,  276,  277,  274,  384,  276,  277,  273,  377,
      294,  378,  294,  274,  275,  382,  379,  276,  381,  383,
      274,  383,  276,  277,  382,  385,  277,  294,  386,  276,
      277,  387,  384,  276,  277,  388,  389,  294,  390,  294,
      392,  391,  382,  393,  276,  391,  383,    0,  383,  276,
      277,  382,  385,  396,  294,  386,  397,  396,  387,    0,
      397,    0,  388,  389,    0,  390,    0,  392,  391,    0,

      393,  398,  391,  396,  399,  398,  397,  401,  399,    0,
      396,  401,  509,  397,  396,    0,  400,  397,  402,  510,
      400,  398,  402,  400,  399,    0,  402,  401,  398,    0,
      396,  399,  398,  397,  401,  399,  400,  403,  401,  509,
      405,  403,  402,  400,  405,  402,  510,  400,  398,  402,
      400,  399,  404,  402,  401,  406,  404,  403,  511,  406,
      405,  407,  404,  400,  403,  407,  512,  405,  403,  402,
      408,  405,  404,  406,  408,  406,    0,  408,    0,  404,
        0,  407,  406,  404,  403,  511,  406,  405,  407,  404,
      408,  411,  407,  512,  513,  411,    0,  408,    0,  404,

      406,  408,  406,  409,  408,  409,  410,  411,  407,  409,
      410,  411,    0,  514,    0,  515,    0,  408,  411,  410,
      409,  513,  411,  412,  413,  409,  410,  412,  413,    0,
      409,  412,  409,  410,  411,  516,  409,  410,  411,  413,
      514,  414,  515,  412,  413,  414,  410,  409,  518,  522,
      412,  413,  409,  410,  412,  413,  415,    0,  412,  416,
      415,  414,  516,  416,  415,  417,  413,    0,  414,  417,
      412,  413,  414,  416,  418,  518,  522,  419,  418,  416,
      415,  419,  523,  415,  419,  417,  416,  415,  414,    0,
      416,  415,  417,    0,  418,  420,  417,  419,  421,  420,

      416,  418,  421,  420,  419,  418,  416,  415,  419,  523,
      524,  419,  417,  421,  422,    0,  422,  526,  421,  420,
      422,  418,  420,    0,  419,  421,  420,    0,  423,  421,
      420,  426,  423,  527,  424,  426,  422,  524,  424,    0,
      421,  422,  426,  422,  526,  421,  420,  422,  423,  424,
      425,  426,  427,  425,  424,  423,  427,  425,  426,  423,
      527,  424,  426,  422,    0,  424,  428,    0,    0,  426,
      428,  528,  427,  425,  529,  423,  424,  425,  426,  427,
      425,  424,  530,  427,  425,  430,  428,  429,  431,  430,
      431,  429,    0,  428,  431,  429,    0,  428,  528,  427,

      425,  529,  531,  532,  533,  430,    0,  534,  535,  530,
      431,  429,  430,  428,  429,  431,  430,  431,  429,  432,
      433,  431,  429,  432,  433,  536,    0,  433,    0,  531,
      532,  533,  430,  432,  534,  535,  539,  431,  429,  432,
      433,  435,    0,    0,  434,  435,  432,  433,  434,  436,
      432,  433,  536,  436,  433,  435,    0,  434,  540,  541,
      432,  435,  542,  539,  434,  543,  432,  433,  435,  436,
      437,  434,  435,  438,  437,  434,  436,  438,  437,  439,
      436,  438,  435,  439,  434,  540,  541,  439,  435,  542,
      544,  434,  543,  438,  437,  545,  436,  437,  547,  439,

      438,  437,    0,  548,  438,  437,  439,  442,  438,  440,
      439,  442,  441,  440,  439,  441,  440,  544,  551,  441,
      438,  437,  545,  442,  552,  547,  439,  442,  443,  440,
      548,  443,  443,  444,  442,  441,  440,  444,  442,  441,
      440,  554,  441,  440,    0,  551,  441,  557,  443,    0,
      442,  552,  558,  444,  442,  443,  440,  445,  443,  443,
      444,  445,  441,  446,  444,  447,  559,  446,  554,  447,
        0,  447,  445,  560,  557,  443,  446,  445,    0,  558,
      444,  561,  449,  446,  445,  447,  449,  448,  445,    0,
      446,  448,  447,  559,  446,  562,  447,  448,  447,  445,

      560,  450,  449,  446,  445,  450,  562,  448,  561,  449,
      446,  451,  447,  449,  448,  451,  452,    0,  448,  453,
      452,  450,  562,  453,  448,    0,  452,  564,  450,  449,
        0,  451,  450,  562,  448,  453,  452,  455,  451,  453,
      454,  455,  451,  452,  454,    0,  453,  452,  450,  454,
      453,    0,  457,  452,  564,  456,  457,  455,  451,  456,
      454,  458,  453,  452,  455,  458,  453,  454,  455,  568,
      456,  454,  457,  459,  459,  456,  454,  570,  459,  457,
      572,  458,  456,  457,  455,  460,  456,  454,  458,  460,
      574,    0,  458,  460,  459,    0,  568,  456,    0,  457,

      459,  459,  456,  575,  570,  459,  463,  572,  458,  460,
      463,  461,  460,  461,  464,  461,  460,  574,  464,  577,
      460,  459,  463,  462,    0,  462,  463,  462,  465,  464,
      575,  461,  465,  463,  464,    0,  460,  463,  461,    0,
      461,  464,  461,  462,  465,  464,  577,  466,  465,  463,
      462,  466,  462,  463,  462,  465,  464,  578,  461,  465,
      468,  464,  467,  579,  468,    0,  467,  466,  580,  467,
      462,  465,  469,  468,  466,  465,  469,  470,  466,    0,
      468,  470,  467,    0,  578,    0,  469,  468,    0,  467,
      579,  468,  469,  467,  466,  580,  467,  470,  471,  469,

      468,  474,  471,  469,  470,  474,  472,  468,  470,  467,
      472,  473,  474,  469,  472,  473,  581,    0,  471,  469,
      473,  474,  583,    0,  470,  471,  573,  573,  474,  471,
      472,  473,  474,  472,    0,  584,  475,  472,  473,  474,
      475,  472,  473,  581,  475,  471,  476,  473,  474,  583,
      476,  585,  586,  573,  573,  587,  475,  472,  473,  476,
      477,  478,  584,  475,  477,  478,  476,  475,  477,  588,
        0,  475,  589,  476,  590,  591,  478,  476,  585,  586,
        0,  478,  587,  475,  477,  481,  476,  477,  478,  481,
      592,  477,  478,  476,  479,  477,  588,  479,  479,  589,

      480,  590,  591,  478,  480,  481,  483,  480,  478,  482,
      483,  477,  481,  482,  479,  594,  481,  592,  484,  482,
      480,  479,  484,  595,  479,  479,  483,  480,  596,  482,
        0,  480,  481,  483,  480,  597,  482,  483,  484,  485,
      482,  479,  594,  485,  486,  484,  482,  480,  486,  484,
      595,  486,  598,  483,  487,  596,  482,  485,  487,  485,
      601,    0,  597,  602,  486,  484,  485,    0,  488,  487,
      485,  486,  488,  489,  487,  486,  603,  489,  486,  598,
      489,  487,  605,  488,  485,  487,  485,  601,  488,  606,
      602,  486,    0,  489,  490,  488,  487,  607,  490,  488,

      489,  487,  491,  603,  489,  490,  491,  489,  608,  605,
      488,  609,    0,    0,  490,  488,  606,  491,  610,  492,
      489,  490,  491,  492,  607,  490,    0,  493,  492,  491,
        0,  493,  490,  491,    0,  608,  494,  611,  609,  492,
      494,  490,  612,    0,  491,  610,  492,  493,  495,  491,
      492,  614,  495,  496,  493,  492,  494,  496,  493,    0,
      616,  497,  496,  494,  611,  497,  492,  494,  495,  612,
      497,    0,    0,  496,  493,  495,    0,  731,  614,  495,
      496,  497,    0,  494,  496,  733,  498,  616,  497,  496,
      498,  735,  497,  736,    0,  495,  498,  497,  498,  499,

      496,  501,  737,  499,  731,  501,  498,  500,  497,  499,
      501,  500,  733,  498,    0,  500,    0,  498,  735,  499,
      736,  501,    0,  498,    0,  498,  499,  738,  501,  737,
      499,  500,  501,  498,  500,  502,  499,  501,  500,  502,
        0,  503,  500,  503,  506,    0,  499,  503,  501,  504,
        0,  502,  506,  504,  738,  502,  506,  505,  500,  506,
        0,  505,  502,  503,    0,    0,  502,  504,  503,  504,
      503,  506,  505,    0,  503,    0,  504,  505,  502,  506,
      504,  739,  502,  506,  505,  740,  506,  508,  505,  507,
      503,  508,  507,  507,  504,    0,  504,  619,    0,  505,

      508,  619,  620,    0,  505,  741,  620,  508,  739,  507,
      619,  743,  740,    0,  508,  620,  507,  619,  508,  507,
      507,  621,  620,  744,  619,  621,  622,  508,  619,  620,
      622,  624,  741,  620,  508,  624,  507,  619,  743,  745,
      624,  621,  620,  623,  619,  746,  622,  623,  621,  620,
      744,  624,  621,  622,    0,  625,  623,  622,  624,  625,
      626,  627,  624,  623,  626,  627,  745,  624,  621,  626,
      623,    0,  746,  622,  623,  625,  748,  749,  624,  750,
      626,  627,  625,  623,  751,  628,  625,  626,  627,  628,
      623,  626,  627,  628,  629,  630,  626,  631,  629,  630,

        0,  631,  625,  748,  749,  752,  750,  626,  627,  628,
      753,  751,  628,  754,  629,  630,  628,  631,  755,  632,
      628,  629,  630,  632,  631,  629,  630,  632,  631,  633,
        0,  635,  752,  633,    0,  635,  628,  753,    0,  632,
      754,  629,  630,  637,  631,  755,  632,  637,  634,  633,
      632,  635,  634,    0,  632,    0,  633,  637,  635,  756,
      633,  634,  635,  637,  757,  636,  632,  638,  634,  636,
      637,  638,    0,    0,  637,  634,  633,  760,  635,  634,
      636,  761,  638,  763,  637,  636,  756,  638,  634,    0,
      637,  757,  636,  639,  638,  634,  636,  639,  638,  640,

      639,  641,    0,  640,  760,  641,    0,  636,  761,  638,
      763,  765,  636,  639,  638,  640,  641,    0,    0,  640,
      639,  641,    0,    0,  639,  642,  640,  639,  641,  642,
      640,  643,  641,  642,    0,  643,    0,  768,  765,  644,
      639,  644,  640,  641,  643,  644,  640,  769,  641,  642,
      645,  643,  642,  647,  645,    0,  642,  647,  643,  771,
      642,  644,  643,  648,  768,  776,  644,  648,  644,    0,
      645,  643,  644,  647,  769,  646,  642,  645,  643,  646,
      647,  645,  646,  648,  647,  649,  771,  650,  644,  649,
      648,  650,  776,  778,  648,  646,  649,  645,  650,  651,

      647,    0,  646,  651,    0,  649,  646,  650,    0,  646,
      648,  779,  649,  652,  650,  651,  649,  652,  650,  651,
      778,  780,  646,  649,    0,  650,  651,  653,  652,  783,
      651,  653,  649,  652,  650,  653,  784,  654,  779,  655,
      652,  654,  651,  655,  652,  654,  651,  785,  780,  656,
        0,  653,    0,  656,  653,  652,  783,  786,  653,  655,
      652,  654,  653,  784,  654,  787,  655,  657,  654,  656,
      655,  657,  654,  658,  785,  659,  656,  658,  653,  659,
      656,  658,  657,  788,  786,  660,  655,  657,  654,  660,
        0,  790,  787,  791,  657,  659,  656,  658,  657,  661,

      658,    0,  659,  661,  658,  660,  659,  661,  658,  657,
      788,  663,  660,    0,  657,  663,  660,  662,  790,  792,
      791,  662,  659,  661,  658,  793,  661,  794,  662,    0,
      661,  663,  660,  795,  661,    0,  664,  662,  663,  665,
      664,  796,  663,  665,  662,  664,  792,    0,  662,  666,
      661,    0,  793,  666,  794,  662,  664,  667,  663,  665,
      795,  667,  770,  664,  662,  770,  665,  664,  796,  666,
      665,  669,  664,  797,  668,  669,  666,  667,  668,    0,
      666,    0,  798,  664,  667,  799,  665,  668,  667,  770,
      669,  669,  770,  670,  668,  671,  666,  670,  669,  671,

      797,  668,  669,  800,  667,  668,  670,  801,  671,  798,
        0,  802,  799,  670,  668,  671,    0,  669,  669,  804,
      670,  668,  671,  672,  670,  672,  671,  672,  673,  805,
      800,  806,  673,  670,  801,  671,  672,  674,  802,    0,
      670,  674,  671,  672,  674,  675,  804,  676,  673,  675,
      672,  676,  672,  808,  672,  673,  805,  674,  806,  673,
      809,  810,  677,  672,  674,  675,  677,  676,  674,    0,
      672,  674,  675,    0,  676,  673,  675,    0,  676,  679,
      808,  678,  677,  679,  674,  678,    0,  809,  810,  677,
        0,  680,  675,  677,  676,  680,  678,  895,  680,  679,

      681,  678,    0,    0,  681,  897,  679,  899,  678,  677,
      679,  680,  678,  682,  900,  683,    0,  682,  680,  683,
      681,    0,  680,  678,  895,  680,  679,  681,  678,  683,
      683,  681,  897,  682,  899,  683,    0,    0,  680,  685,
      682,  900,  683,  685,  682,  684,  683,  681,  684,  684,
        0,  686,  685,  902,  688,  686,  683,  683,  688,  685,
      682,  687,  683,  687,  689,  684,  685,  687,  689,  904,
      685,  686,  684,  905,  688,  684,  684,  689,  686,  685,
      902,  688,  686,  687,  689,  688,  685,    0,  687,  690,
      687,  689,  684,  690,  687,  689,  904,  906,  686,  691,

      905,  688,  690,  691,  689,  908,  910,  691,  692,  690,
      687,  689,  692,  693,  694,    0,  690,  693,  694,  691,
      690,  693,  694,  914,  906,    0,  691,  695,  692,  690,
      691,  695,  908,  910,  691,  692,  690,  693,  694,  692,
      693,  694,  695,  916,  693,  694,  691,  695,  693,  694,
      914,    0,  696,  697,  695,  692,  696,  697,  695,    0,
      696,  917,  923,  924,  693,  694,  697,  925,  928,  695,
      916,  698,  696,  697,  695,  698,    0,  929,  699,  696,
      697,  699,  931,  696,  697,  699,  698,  696,  917,  923,
      924,  698,  932,  697,  925,  928,    0,  933,  698,  696,

      697,  699,  698,  700,  929,  699,  701,  700,  699,  931,
      701,  700,  699,  698,  702,  701,  702,    0,  698,  932,
      702,    0,  934,  700,  933,  703,  701,    0,  699,  703,
      700,    0,  936,  701,  700,  705,  702,  701,  700,  705,
      937,  702,  701,  702,  704,  703,    0,  702,  704,  934,
      700,  704,  703,  701,  706,  705,  703,  707,  706,  936,
        0,  707,  705,  702,  704,  938,  705,  937,    0,  708,
        0,  704,  703,  708,  706,  704,    0,  707,  704,  708,
        0,  706,  705,  709,  707,  706,    0,  709,  707,  708,
      941,  704,  938,  710,    0,  711,  708,  710,  712,  711,

      708,  706,  712,  709,  707,  943,  708,  713,  714,  711,
      709,  713,  714,  710,  709,  711,  708,  941,  712,    0,
      710,  713,  711,    0,  710,  712,  711,  713,  714,  712,
      709,  715,  943,  715,  713,  714,  711,  715,  713,  714,
      710,  945,  711,  716,    0,  712,  717,  716,  713,  946,
      717,  947,  716,  715,  713,  714,  948,  718,  715,  949,
      715,  718,  717,  716,  715,  718,  717,  719,  945,    0,
      716,  719,    0,  717,  716,  954,  946,  717,  947,  716,
      715,  718,  719,  948,  718,  955,  949,  719,  718,  717,
      716, 1022,  718,  717,  719,  720,  721,  720,  719,  720,

      721,  722,  954,    0,  722,  722,    0,    0,  718,  719,
     1023, 1025,  955,  723,  719,  720,  721,  723, 1022, 1026,
        0,  722,  720,  721,  720,  724,  720,  721,  722,  724,
      725,  722,  722,  723,  725,  726,    0, 1023, 1025,  726,
      723,  724,  720,  721,  723,  724, 1026,  727,  722,  728,
      725,  727,  724,  728,    0,  726,  724,  725,    0,  812,
      723,  725,  726,  812,    0, 1031,  726,  727,  724,  728,
     1032,  813,  724, 1034,  727,  813,  728,  725,  727,  812,
      728,  815,  726,  814,    0,  815,  812,  814,    0,  816,
      812,  813, 1031,  816,  727,  817,  728, 1032,  813,  817,

     1034,  815,  813,  814,  814,    0,  812,  818,  815,  816,
      814,  818,  815, 1035,  814,  817,  816,  819,  813,    0,
      816,  819,  817,    0,  820,  820,  817,  818,  815,  820,
      814,  814,  819, 1039,  818, 1040,  816,  819,  818,    0,
     1035, 1042,  817,  822,  819,  820,  821,  822,  819,  824,
      821,  820,  820,  824,  818,  821,  820, 1044,  822,  819,
     1039,  823, 1040,  822,  819,  823,  821, 1045, 1042,  824,
      822,  823,  820,  821,  822,  825,  824,  821,    0,  825,
      824,  823,  821,  826, 1044,  822, 1047,  826,  823, 1048,
      822, 1086,  823,  821, 1045,  825,  824,  827,  823, 1089,

      829,  827,  825,  826,  829,  828,  825,  827,  823,  828,
      826, 1092,  828, 1047,  826,  830, 1048,  827, 1086,  830,
      829, 1096,  825,    0,  827,  828, 1089,  829,  827,  831,
      826,  829,  828,  831,  827,  830,  828,    0, 1092,  828,
        0,  834,  830,    0,  827,  834,  830,  829, 1096,  831,
      832,    0,  828,  835,  832,  833,  831,  835, 1097,  833,
      831,  834,  830,  836,  833,  832,    0,  836,  834, 1098,
      832, 1115,  834,  835, 1117,  833,  831,  832,  836,    0,
      835,  832,  833,  836,  835, 1097,  833, 1120,  834,  837,
      836,  833,  832,  837,  836, 1129, 1098,  832, 1115,  838,

      835, 1117,  833,  838,  837,  836,  840,  839,  840,  837,
      836,  839,  840,  838, 1120,    0,  837,  841,    0,  838,
      837,  841, 1129,    0,    0,  842,  838,  839,  840,  842,
      838,  837,    0,  840,  839,  840,  837,  841,  839,  840,
      838,    0,    0,  843,  841,  842,  838,  843,  841,    0,
        0,    0,  842,  844,  839,  840,  842,  844,  843,    0,
      844,  845,  847,  843,  841,  845,  847,    0,    0,    0,
      843,    0,  842,  844,  843,  846,    0,  846,    0,  846,
      844,  845,  847,    0,  844,  843,    0,  844,  845,  847,
      843,    0,  845,  847,  849,  846,    0,  848,  849,  850,

      844,  848,  846,  850,  846,    0,  846,  852,  845,  847,
        0,  852,  848,    0,  849,    0,  851,  848,    0,  850,
      851,  849,  846,    0,  848,  849,  850,  852,  848,    0,
      850,  851,    0,  854,  852,    0,  851,  854,  852,  848,
      854,  849,    0,  851,  848,  853,  850,  851,  855,  853,
        0,  856,  855,  854,  852,  856,    0,  857,  851,  853,
      854,  857,  853,  851,  854,  853,    0,  854,  855,    0,
      858,  856,  853,    0,  858,  855,  853,  857,  856,  855,
      854,    0,  856,  859,  857,    0,  853,  859,  857,  853,
      858,    0,  853,    0,    0,  855,  860,  858,  856,    0,

      860,  858,    0,  859,  857,  861,    0,    0,  862,  861,
      859,  862,  862,  861,  859,    0,  860,  858,    0,    0,
        0,  864,  863,  860,    0,  864,  863,  860,  862,  861,
      859,    0,  861,    0,    0,  862,  861,  863,  862,  862,
      861,  864,  863,  860,    0,    0,  865,  866,  864,  863,
      865,  866,  864,  863,    0,  862,  861,    0,    0,  867,
        0,  869,    0,  867,  863,  869,  865,  866,  864,  863,
        0,  868,  867,  865,  866,  868,  870,  865,  866,  867,
      870,  869,    0,    0,  868,  871,  867,    0,  869,  871,
      867,  868,  869,  865,  866,    0,  870,  872,  868,  867,

      876,  872,  868,  870,  876,  871,  867,  870,  869,    0,
        0,  868,  871,    0,    0,  876,  871,  872,  868,    0,
      876,  873,  874,  870,  872,  873,  874,  876,  872,  873,
      874,  876,  871,  875,  875,  877,    0,    0,  875,  877,
        0,    0,  876,    0,  872,  873,  874,  876,  873,  874,
        0,    0,  873,  874,  875,  877,  873,  874,  878,  878,
      875,  875,  877,  878,    0,  875,  877,  879,    0,    0,
        0,  879,  873,  874,    0,  879,    0,    0,    0,  878,
      881,  875,  877,  880,  881,  878,  878,  880,    0,    0,
      878,  879,  886,  881,  879,  883,  886,  880,  879,  883,

      881,  882,  879,  880,  883,  882,  878,  881,    0,  884,
      880,  881,  886,  884,  880,  883,  882,  884,  879,  886,
      881,  882,  883,  886,  880,    0,  883,  881,  882,    0,
      880,  883,  882,  884,    0,    0,  884,  885,    0,  886,
      884,  885,  883,  882,  884,  885,  887,    0,  882,    0,
      887,  889,    0,  888,  888,  889,    0,    0,  888,  890,
      884,  885,    0,  890,  885,    0,  887,    0,  885,    0,
        0,  889,  885,  887,  888,    0,    0,  887,  889,  890,
      888,  888,  889,  891,    0,  888,  890,  891,  885,    0,
      890,  892,  893,  887,    0,  892,  893,  891,  889,  892,

      893,  888,    0,  891,    0,  894,  890,    0,  956,  894,
      891,    0,  956,  957,  891,  892,  893,  957,  892,  893,
        0,    0,  892,  893,  891,  894,  892,  893,  956,    0,
      891,    0,  894,  957,  959,  956,  894,  958,  959,  956,
      957,  958,  892,  893,  957,    0,  958,  960,    0,  961,
        0,  960,  894,  961,  959,  956,    0,  958,    0,    0,
      957,  959,  962,  961,  958,  959,  962,  960,  958,  961,
        0,  964,    0,  958,  960,  964,  961,    0,  960,  963,
      961,  959,  962,  963,  958,    0,  963,    0,  967,  962,
      961,  964,  967,  962,  960,    0,  961,  965,  964,  963,

        0,  965,  964,  967,    0,  965,  963,  968,  967,  962,
      963,  968,    0,  963,  966,  967,  966,  965,  964,  967,
      966,    0,  969,    0,  965,  969,  963,  968,  965,  969,
      967,    0,  965,  970,  968,  967,  966,  970,  968,    0,
      971,  966,  971,  966,  965,  969,  971,  966,    0,  969,
        0,  972,  969,  970,  968,  972,  969,  973,    0,    0,
      970,  973,  971,  966,  970,    0,  974,  971,    0,  971,
      974,  972,  969,  971,    0,  975,    0,  973,  972,  975,
      970,  976,  972,  977,  973,  976,  974,  977,  973,  971,
        0,    0,  977,  974,    0,  975,  978,  974,  972,    0,

      978,  976,  975,  977,  973,  979,  975,    0,  976,  979,
      977,  978,  976,  974,  977,    0,  978,  980,    0,  977,
      981,  980,  975,  978,  981,  979,    0,  978,  976,  982,
      977,    0,  979,  982,    0,  983,  979,  980,  978,  983,
      981,  984,    0,  978,  980,  984,    0,  981,  980,  982,
        0,  981,  979,  985,  984,  983,  982,  985,    0,  987,
      982,  984,  983,  987,  980,  988,  983,  981,  984,  988,
      986,    0,  984,  985,  986,    0,  982,    0,  986,  987,
      985,  984,  983,    0,  985,  988,  987,    0,  984,  991,
      987,  989,  988,  991,  986,  989,  988,  986,  989,  990,

      985,  986,    0,  990,  992,  986,  987,  990,  992,  991,
        0,  989,  988,  993,    0,    0,  991,  993,  989,  992,
      991,  986,  989,  990,  992,  989,  990,    0,  994,    0,
      990,  992,  994,  993,  990,  992,  991,    0,  989,    0,
      993,  995,    0,  996,  993,  995,  992,  996,  994,    0,
      990,  992,    0, 1000,  995,  994,  997, 1000,  997,  994,
      993,  995,  997,  996,    0,  998,    0,  998,  995,    0,
      996,  998,  995, 1000,  996,  994,    0,    0,  997,    0,
     1000,  995,  999,  997, 1000,  997,  999,  998,  995,  997,
      996, 1001,  998,    0,  998, 1001,  999, 1002,  998, 1003,

     1000, 1002,  999, 1003,    0,  997, 1002,    0,    0,  999,
        0, 1001, 1005,  999,  998,    0, 1005, 1002, 1001, 1003,
        0,    0, 1001,  999, 1002,    0, 1003, 1004, 1002,  999,
     1003, 1004, 1005, 1002, 1004,    0,    0,    0, 1001, 1005,
        0, 1006,    0, 1005, 1002, 1006, 1003, 1004,    0, 1006,
        0, 1008,    0,    0, 1004, 1008, 1007,    0, 1004, 1005,
     1007, 1004,    0,    0, 1007, 1006, 1008, 1009, 1006, 1009,
        0, 1008, 1006, 1009, 1004, 1010, 1006, 1011, 1008, 1010,
     1007, 1011, 1008, 1007,    0,    0,    0, 1007,    0, 1009,
     1010, 1007, 1006, 1008, 1009, 1010, 1009, 1011, 1008, 1012,

     1009, 1013, 1010, 1012, 1011, 1013, 1010, 1007, 1011, 1014,
        0,    0,    0, 1014, 1015,    0, 1009, 1010, 1015, 1012,
        0, 1013, 1010,    0, 1011,    0, 1012, 1015, 1013, 1014,
     1012, 1016, 1013, 1051, 1015, 1016, 1014, 1051, 1016, 1052,
     1014, 1015,    0, 1052,    0, 1015, 1012,    0, 1013,    0,
        0, 1016,    0, 1051, 1015,    0, 1014,    0, 1016, 1052,
     1051, 1015, 1016, 1053, 1051, 1016, 1052, 1053, 1054, 1055,
     1052, 1056, 1054, 1055,    0, 1056,    0, 1057, 1016,    0,
     1051, 1057,    0, 1053,    0, 1057, 1052,    0, 1054, 1055,
     1053, 1056,    0, 1058, 1053, 1054, 1055, 1058, 1056, 1054,

     1055, 1057, 1056, 1059, 1057,    0,    0, 1059, 1057,    0,
     1053,    0, 1057, 1058,    0, 1054, 1055, 1060, 1056,    0,
     1058, 1060, 1061, 1059, 1058, 1062, 1061, 1063, 1057, 1062,
     1059, 1063, 1060,    0, 1059, 1064,    0, 1060,    0, 1064,
     1058,    0, 1061,    0, 1060, 1062,    0, 1063, 1060, 1061,
     1059,    0, 1062, 1061, 1063, 1064, 1062,    0, 1063, 1060,
        0, 1065, 1064, 1065, 1060,    0, 1064, 1065,    0, 1061,
        0, 1066, 1062, 1067, 1063, 1066, 1068, 1067, 1066,    0,
     1068, 1069, 1064, 1065,    0, 1069,    0,    0, 1065, 1068,
     1065, 1066,    0, 1067, 1065, 1070, 1068,    0, 1066, 1070,

     1067, 1069, 1066, 1068, 1067, 1066,    0, 1068, 1069, 1071,
     1065,    0, 1069, 1071,    0, 1070, 1068, 1072, 1066,    0,
     1067, 1072, 1070, 1068,    0,    0, 1070, 1074, 1069, 1071,
     1073, 1074,    0, 1074, 1073, 1075, 1071, 1072,    0, 1075,
     1071,    0, 1070,    0, 1072, 1073,    0, 1074, 1072, 1077,
     1073,    0,    0, 1077, 1074, 1075, 1071, 1073, 1074,    0,
     1074, 1073, 1075, 1076, 1072,    0, 1075, 1076,    0, 1077,
        0, 1078, 1073,    0, 1074, 1078, 1077, 1073, 1076,    0,
     1077, 1079, 1075, 1076, 1078, 1079,    0,    0,    0, 1079,
     1076, 1078,    0, 1080, 1076,    0, 1077, 1080, 1078, 1081,

        0, 1079, 1078, 1081,    0, 1076,    0,    0, 1079,    0,
     1076, 1078, 1079, 1080, 1081,    0, 1079, 1082, 1078, 1081,
     1080, 1082,    0, 1083, 1080, 1084, 1081, 1083, 1079, 1084,
     1081, 1100,    0,    0,    0, 1100,    0, 1082,    0,    0,
     1080, 1081,    0, 1083, 1082, 1084, 1081,    0, 1082,    0,
     1083, 1100, 1084, 1101, 1083, 1102, 1084, 1101, 1100, 1102,
        0, 1103, 1100,    0, 1082, 1103,    0,    0, 1101,    0,
     1083,    0, 1084, 1101,    0, 1102,    0,    0, 1100, 1104,
     1101, 1103, 1102, 1104, 1101, 1105, 1102, 1106, 1103, 1105,
        0, 1106, 1103,    0, 1104, 1101,    0, 1108,    0, 1104,

     1101, 1108, 1102,    0,    0, 1105, 1104, 1106, 1103, 1107,
     1104, 1109, 1105, 1107, 1106, 1109, 1105, 1108, 1106, 1110,
        0, 1104, 1107, 1110, 1108,    0, 1104,    0, 1108, 1107,
        0, 1109, 1105, 1111, 1106,    0, 1107, 1111, 1109, 1110,
     1107, 1112, 1109, 1113, 1108, 1112, 1110, 1113,    0, 1107,
     1110, 1114, 1112, 1111,    0, 1114, 1107,    0, 1109,    0,
     1111, 1112,    0, 1113, 1111, 1121, 1110,    0, 1112, 1121,
     1113, 1114, 1112, 1122, 1113,    0,    0, 1122, 1114, 1112,
     1111,    0, 1114, 1123,    0, 1121,    0, 1123, 1112,    0,
     1113, 1124, 1121, 1122,    0, 1124, 1121, 1123, 1114,    0,

     1122, 1125,    0, 1123, 1122, 1125,    0,    0,    0, 1126,
     1123, 1124, 1121, 1126, 1123,    0,    0,    0, 1124, 1126,
     1122, 1125, 1124, 1130, 1123,    0,    0, 1130, 1125, 1126,
     1123, 1131, 1125, 1132,    0, 1131, 1126, 1132, 1124,    0,
     1126, 1134, 1132, 1130,    0, 1134, 1126,    0, 1125,    0,
     1130, 1131,    0, 1132, 1130,    0, 1126,    0, 1131,    0,
     1132, 1134, 1131,    0, 1132,    0,    0,    0, 1134, 1132,
     1130,    0, 1134,    0,    0,    0,    0,    0, 1131,    0,
     1132,    0,    0,    0,    0,    0,    0,    0, 1134, 1136,
     1136, 1136, 1136, 1136, 1137,    0,    0, 1137, 1137, 1139,

     1139, 1139,    0, 1139, 1140,    0, 1140, 1140, 1140, 1141,
        0, 1141, 1141, 1141, 1142,    0, 1142, 1142, 1142, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 2369 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2383 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 58 "flex_lexer.l"


#line 2670 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1136 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1135 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 64 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(QUARTER)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(TINYINT)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 146:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 153:
#line 219 "flex_lexer.l"
case 154:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 229 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 235 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 240 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 241 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 242 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 243 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 244 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 246 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 249 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3556 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1136 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1136 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1135);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 249 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

