#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 164
#define YY_END_OF_BUFFER 165
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1146] =
    {   0,
        0,    0,  161,  161,    2,    2,  165,  163,    4,    4,
      163,  163,  153,  159,  153,  153,  156,  153,  153,  153,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  153,  161,  162,    2,    2,
        3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    4,  148,    0,
        1,  156,  155,  154,  150,  149,  147,  151,  158,  158,

      158,  158,  158,  158,  126,  158,  158,  127,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  128,  158,  158,  129,  130,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  131,
      132,  133,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      134,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      152,  161,  160,    2,    2,    2,    2,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  157,  154,
      114,  158,  115,  158,  158,  116,  158,  117,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,

      158,  158,  138,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  118,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  119,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  120,  158,  158,
      121,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  122,  158,  158,  123,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  124,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      125,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      158,  158,  158,  158,  158,  158,  158,  158,   83,  158,
       84,   46,   85,  158,  158,  158,   86,  158,  158,   87,
      158,  158,  158,  158,  158,   89,  158,  158,  158,   90,
       91,  158,  158,  158,  158,  158,  158,  158,   92,  158,
      158,   93,   94,  158,  158,   95,  158,   96,  137,  158,
      158,  158,  158,  158,  158,   97,  158,   98,   99,  100,
      158,  102,  158,  103,  158,  158,  158,  158,  105,  158,
      158,  158,  158,  158,  106,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  107,  158,  158,  158,  158,

      158,  108,  109,  110,  158,  158,  141,  158,  158,  158,
      158,  158,  158,  158,  158,  111,  158,  112,  158,  113,
      140,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   63,   64,  158,   65,  158,  144,  158,  158,
      158,  158,  158,  158,  158,   66,  158,  158,  158,  158,
      158,   67,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  142,   68,  158,  158,   69,  158,  101,  158,
       70,   71,  158,  158,  158,  158,   72,   73,   74,   75,
      158,  139,  158,  158,  158,   76,   77,  158,  158,  158,
      158,  158,  158,   78,  158,  158,  158,  158,  158,  158,

      158,   79,  158,  158,  158,  158,  158,   80,  158,  158,
      158,   81,  158,  158,  158,   82,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

      158,   36,  158,  104,  158,   37,  146,  158,   38,  158,
      158,  158,  158,   39,  158,   40,  158,   41,   42,   43,
      158,   44,  158,  158,   47,   48,   49,   50,   51,  158,
      158,  158,   52,  136,  158,  158,   53,  158,  158,  158,
      158,   54,  158,  158,   55,  135,   56,  158,   57,  158,
       58,  158,  158,  158,  158,  158,   59,   60,   61,   62,
      158,  158,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   16,   17,   18,   19,   20,  158,
      158,   23,   21,  158,  158,   22,   24,   45,   25,  158,
      158,   29,  158,  158,   30,   31,   26,  158,  158,   32,
      158,   33,  158,  158,   27,  158,  158,   34,   35,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   88,  158,   11,   12,  158,   10,

       13,  158,   14,  145,   28,  158,  158,  158,   15,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  158,    7,  158,    8,    9,  158,
        2,    2,    2,    2,    2,    2,    5,    6,  158,    2,
        2,    2,  143,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1153] =
    {   0,
        0,    0,  387,  384,   67,    0,  390, 5943,  133,  135,
      376,    0, 5943, 5943,  131,  377,  133,  132,  371,  343,
      129,  129,  138,  154,  165,  216,  146,  193,  226,  125,
      139,  188,  218,  221,  262,  261,  128,  242,  308,  351,
      271,  290,  179,    0,  146,  285,    0,  339,    0,  147,
      211,  326,  330,    0,    0,  155,  289,  213,  213,  257,
      247,  409,  476,  530,  582,  630,  682,  319,  411,  725,
      416,  283,  340,  468,  776,  825,  479,  404,  473,  871,
      923,  528,  518,  481,  532,  576,  187,  229, 5943,  215,
     5943,  285,  208,  201, 5943, 5943, 5943, 5943,    0,  222,

      228,  289,  301,  253,  274,  570,  323,    0,  334,  340,
      580,  401,  342,  640,  570,  323,  348,  365,  410,  427,
      669,  420,  423,  469,  477,  484,  490,  517,  519,  576,
      522,  530,    0,  544,  570,  673,  585,  593,  580,  600,
      598,  695,  612,  617,  623,  620,  628,  641,  660,  678,
        0,  691,  682,  688,  706,  723,  707,  726,  708,  714,
      733,  740,  731,  746,  730,  750,  752,  756,  751,  748,
      747,  781,  783,  781,  777,  796,  805,  788,  780,  800,
     5943,    0, 5943,    0,  304,    0,  203,    0,  300,  195,
      160,    0,    0,    0,    0,  829,  873,  863,  917,  935,

      925,  839,  983,  973,  970,  972, 1019, 1060, 1028, 1057,
     1111, 1108, 1033, 1131, 1146, 1165, 1031, 1215, 1163, 1175,
     1201, 1214, 1229, 1216, 1255, 1264, 1273, 1279, 1303, 1285,
     1309, 1324, 1373, 1324, 1321, 1359, 1373, 1417, 1469, 1441,
     1466, 1495, 1456, 1508, 1507, 1385, 1517, 1391, 1520, 1553,
     1552, 1562, 1570, 1598, 1417, 1603, 1604, 1616, 1666, 1648,
     1657, 1656, 1678, 1702, 1711, 1690, 1732, 1723, 1760, 1762,
     1774, 1724, 1777, 1802, 1810, 1812, 1840,    0, 5943,  148,
        0,  798,    0,  800,  824,    0,  861,    0,  870,  881,
      869,  884,  882,  980,  882,  887,  905,  926,  922,  953,

      953,  989,    0,  992, 1005, 1031, 1087, 1045, 1063, 1058,
     1084, 1072, 1086,    0, 1093, 1092, 1099, 1091, 1104, 1113,
     1114, 1159, 1165, 1163, 1164, 1169, 1183, 1165, 1201, 1213,
     1209, 1212, 1261, 1259, 1270, 1271, 1281, 1327, 1302, 1313,
        0, 1324, 1342, 1353, 1368, 1379, 1374, 1381, 1397, 1413,
     1414,    0, 1428, 1434, 1465, 1482, 1532, 1537, 1527, 1538,
     1553, 1556, 1590, 1572, 1603, 1603, 1612, 1605, 1622,    0,
     1609, 1621, 1625, 1629, 1655, 1654, 1697, 1709, 1720, 1728,
        0, 1756, 1819, 1808, 1762, 1790, 1789, 1807, 1828, 1813,
     1819, 1839, 1832, 1825,    0,  145, 1864, 1866, 1869, 1872,

     1874, 1898, 1910, 1920, 1922, 1923, 1944, 1952, 1961, 1978,
     1997, 1980, 2014, 2015, 2012, 2051, 2036, 2048, 2060, 2065,
     2066, 2104, 2090, 2116, 2102, 2119, 2148, 2153, 2138, 2140,
     2174, 2182, 2192, 2204, 2207, 2233, 2216, 2228, 2262, 2261,
     2270, 2279, 2287, 2300, 2319, 2321, 2336, 2357, 2338, 2372,
     2333, 2375, 2387, 2390, 2408, 2411, 2425, 2426, 2440, 2450,
     2462, 2479, 2474, 2496, 2491, 2504, 2513, 2528, 2545, 2537,
     2566, 2554, 2563, 2591, 2569, 2604, 2617, 2599, 2636, 2645,
     2650, 2662, 2671, 2674, 2686, 2695, 2710, 2700, 2725, 2739,
     2744, 2749, 2773, 2785, 2779, 2797, 2798, 2827, 2830, 2852,

     2849, 2888, 2851, 2890, 2903, 2900, 2909, 2945, 2922, 2944,
     1843, 1864, 1860, 1862, 1872, 1879, 1890, 1919,    0, 1935,
        0,    0,    0, 1928, 1935, 1933,    0, 1945, 1963, 1971,
     1987, 1994, 1990, 2011, 2035, 2041, 2078, 2080, 2081,    0,
        0, 2090, 2143, 2140, 2147, 2180, 2192, 2198,    0, 2184,
     2226,    0,    0, 2244, 2233,    0, 2241,    0,    0, 2268,
     2263, 2283, 2315, 2319, 2403,    0, 2328,    0,    0,    0,
     2339,    0, 2367,    0, 2386, 2721, 2393, 2423,    0, 2461,
     2465, 2472, 2502, 2512,    0, 2565, 2575, 2567, 2594, 2593,
     2605, 2631, 2626, 2632, 2660,    0, 2712, 2723, 2734, 2768,

     2772,    0,    0, 2770, 2788, 2794,    0, 2815, 2805, 2822,
     2847, 2831, 2846, 2868, 2882,    0, 2889,    0, 2914,    0,
        0, 2959, 2974, 2962, 2976, 2998, 3004, 3012, 3033, 3030,
     3048, 3054, 3062, 3063, 3084, 3087, 3108, 3096, 3102, 3126,
     3132, 3138, 3156, 3150, 3180, 3182, 3188, 3206, 3194, 3216,
     3234, 3240, 3248, 3258, 3272, 3293, 3294, 3306, 3280, 3312,
     3330, 3342, 3344, 3347, 3356, 3381, 3366, 3395, 3380, 3398,
     3410, 3420, 3434, 3435, 3459, 3474, 3464, 3489, 3488, 3498,
     3513, 3522, 3527, 3539, 3530, 3548, 3567, 3580, 3572, 3593,
     3617, 3602, 3626, 3632, 3647, 3634, 3680, 3689, 3671, 3688,

     3697, 3725, 3734, 3722, 3739, 3764, 3751, 3773, 3779, 3788,
     3797, 3812, 3809, 3814, 3833, 3838, 3848, 3846, 3872, 3878,
     3884, 3890, 3908, 3916, 3902, 3938, 3926, 3940, 3962, 3970,
     3972, 3975,    0,    0, 2895,    0, 2938,    0, 2968, 2955,
     2984, 2983, 2985, 3010, 3022,    0, 3024, 3036, 3074, 3065,
     3076,    0, 3074, 3071, 3089, 3124, 3141, 3147, 3175, 3198,
     3214, 3226,    0,    0, 3215, 3239,    0, 3253,    0, 3241,
        0,    0, 3249, 3274, 3314, 3270,    0,    0,    0,    0,
     3309,    0, 3326, 3360, 3367,    0,    0, 3396, 3392, 3403,
     3417, 3446, 3446,    0, 3460, 3462, 3471, 3509, 3524, 3539,

     3566, 3549, 3565, 3576, 3587, 3605, 3608,    0, 3616, 3636,
     3641,    0, 3636, 3660, 3664,    0, 3980, 3994, 4008, 4016,
     4026, 4034, 4040, 4062, 4070, 4075, 4088, 4114, 4112, 4127,
     4129, 4142, 4144, 4177, 4168, 4178, 4183, 4186, 4212, 4218,
     4227, 4236, 4237, 4246, 4271, 4272, 4281, 4286, 4296, 4322,
     4305, 4335, 4320, 4330, 4354, 4359, 4376, 4384, 4405, 4393,
     4408, 4410, 4434, 4443, 4444, 4456, 4462, 4492, 4484, 4494,
     4497, 4516, 4529, 4546, 4534, 4548, 4551, 4570, 4584, 4596,
     4606, 4609, 4608, 4621, 4634, 4646, 4658, 4659, 4688, 4676,
     4713, 4691, 4700, 4726, 4712, 4741, 4750, 4762, 4767, 4775,

     3705,    0, 3697,    0, 3714, 3733,    0, 3753,    0, 3755,
     3778, 3787, 3781,    0, 3830,    0, 3832,    0,    0,    0,
     3907,    0, 3915, 3917,    0,    0,    0,    0,    0, 3941,
     3961, 3968,    0,    0, 3970, 3982,    0, 3971, 3996, 3990,
     4002,    0, 4020, 4026, 4017,    0,    0, 4023,    0, 4042,
        0, 4068, 4076, 4063, 4082, 4068,    0,    0,    0,    0,
     4073, 4087, 4776, 4800, 4801, 4813, 4815, 4825, 4830, 4851,
     4849, 4859, 4883, 4884, 4897, 4889, 4922, 4921, 4934, 4943,
     4951, 4956, 4973, 4975, 4985, 5009, 4988, 5007, 5010, 5039,
     5042, 5045, 5044, 5078, 5063, 5077, 5080, 5099, 5112, 5113,

     5131, 5134, 5137, 5149, 5175, 5185, 5187, 5166, 5188, 5217,
     5220, 5223, 5225, 5242, 5259, 5276, 5277, 5294, 5295, 5312,
     5313, 5327, 5348, 5346,    0,    0,    0,    0,    0, 4098,
     4127,    0,    0, 4126, 4113,    0,    0,    0,    0, 4138,
     4131,    0, 4153, 4180,    0,    0,    0, 4177, 4190,    0,
     4187,    0, 4213, 4226,    0, 4220, 4242,    0,    0, 5345,
     5351, 5363, 5381, 5387, 5396, 5409, 5399, 5411, 5417, 5435,
     5441, 5447, 5449, 5459, 5483, 5485, 5471, 5500, 5495, 5497,
     5521, 5529, 5535, 5553, 5534, 5563, 5571, 5588, 5589, 5603,
     5617, 5622, 5625, 5627,    0, 4240,    0,    0, 4265,    0,

        0, 4275,    0,    0,    0, 4274, 4293, 4310,    0, 5651,
     5661, 5663, 5666, 5680, 5685, 5714, 5715, 5717, 5720, 5729,
     5739, 5754, 5753, 5768, 4344,    0, 4332,    0,    0, 4338,
     5771, 5783, 5793, 5805, 5808, 5817,    0,    0, 4351, 5822,
     5841, 5847,    0, 5846, 5943, 5912, 5917,  135, 5922, 5927,
     5932, 5937
    } ;

static const flex_int16_t yy_def[1153] =
    {   0,
     1145,    1, 1146, 1146, 1145,    5, 1145, 1145, 1145, 1145,
     1145, 1147, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1145, 1149, 1145, 1150, 1150,
     1145, 1150, 1151, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1152, 1152,   63,   63,   63,   64,   64,   64,   66,
       64,   63,   63,   63,   64,   64,   64,   76,   63,   63,
       64,   66,   63,   63,   63,   63, 1150, 1145, 1145, 1147,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1148, 1148,

     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1145, 1149, 1145, 1150, 1150, 1150, 1151, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   66,   63,   66,   63,   63,
       66,   66,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   66,   66,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   66,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63, 1150, 1145, 1145,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,

     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1150, 1150,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   76,   63,   63,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,

     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,

     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,

     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63, 1148, 1148, 1148, 1148, 1148, 1148,

     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63, 1148, 1148, 1148, 1148, 1148, 1148,
       63,   63,   63,   63,   63,   63, 1148, 1148, 1148,   63,
       63,   63, 1148,   63,    0, 1145, 1145, 1145, 1145, 1145,
     1145, 1145
    } ;

static const flex_int16_t yy_nxt[6011] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   44,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   44,   46,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,

       82,   83,   84,   85,   86,   85,   49,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
       85,   86,   85,   87,   88,   88,   88,   88,   91,   99,
       92,   94,   92,   95,   96,  100,  106,  101,  185,   88,
      107,  109,  138,  102,  396,  103,  139,  280,  110,  104,
      105,  157,  188,  180,  189,  111,  108,  113,  112,  396,
      128,  114,  100,  106,  101,  115,  129,  107,  109,  138,
      102,  116,  103,  139,  117,  110,  104,  105,  157,  118,
      180,  119,  111,  108,  113,  112,  120,  128,  114,  178,

      179,  121,  115,  129,  190,  140,  130,  395,  116,  141,
      280,  117,   88,   88,  131,  142,  118,   93,  119,  279,
      132,  191,  189,  120,  192,  193,  178,  179,  121,  122,
       88,   88,  140,  130,  146,  143,  141,  123,  281,  144,
      124,  131,  142,  125,  133,  145,  126,  132,  147,  127,
      134,  135,  136,  278,  148,  149,  122,  137,  195,  158,
      282,  146,  143,  159,  123,  281,  144,  124,  194,  160,
      125,  133,  145,  126,  154,  147,  127,  134,  135,  136,
      150,  148,  149,  287,  137,  155,  158,  282,  151,  288,
      159,  156,  152,   94,   92,  153,  160,  173,  190,  174,

      236,  154,  175,  176,  196,  185,   88,  150,  191,  189,
      287,  177,  155,  283,  285,  151,  288,  286,  156,  152,
      196,  284,  153,  161,  173,  162,  174,  236,  163,  175,
      176,  196,  196,  164,  184,  165,  166,  186,  177,  196,
      283,  285,  292,  225,  286,  183,  196,  196,  284,  226,
      161,  181,  162,  295,   98,  163,  311,  237,  293,  196,
      164,  238,  165,  166,  167,  294,  196,  239,  168,  292,
      225,  169,  170,  196,  302,  312,  226,  196,  171,  303,
      295,  172,   97,  311,  237,  293,   93,   89,  238, 1145,
       48,  167,  294,   48,  239,  168,  313, 1145,  169,  170,

     1145,  302,  312, 1145,  196,  171,  303, 1145,  172,  184,
      184, 1145,  184,  184,  184,  184,  184,  184,  300,  184,
      184,  184,  196,  313,  227,  197,  314,  198,  301,  196,
      196,  196,  228,  199,  196,  200,  196,  254,  229,  201,
      202,  196,  315,  235,  321,  300,  196,  322, 1145,  196,
     1145,  227,  197,  314,  198,  301,  196,  196,  196,  228,
      199,  196,  200,  196,  254,  229,  201,  202,  196,  315,
      235,  321, 1145,  196,  322,  184,  184,  184, 1145,  184,
      184,  184,  184,  184,  184,  240,  184,  184,  184,  241,
      255, 1145,  251,  203,  256,  242,  323,  204,  196,  196,

      257,  275,  276,  252, 1145,  196,  196,  324, 1145,  253,
      196,  325,  240,  205,  326, 1145,  241,  255,  196,  251,
      203,  256,  242,  323,  204,  196,  196,  257,  275,  276,
      252,  273,  196,  196,  324,  196,  253,  196,  325,  274,
      205,  326,  184,  206,  327,  196,  328,  196,  331,  196,
      207,  196,  196,  196,  270,  196,  271,  208,  273,  272,
      209, 1145,  196,  332,  196,  333,  274,  196, 1145,  196,
      206,  327, 1145,  328,  196,  331,  196,  207,  196,  196,
      196,  270,  196,  271,  208, 1145,  272,  209,  289,  290,
      332,  196,  333,  277,  196,  210,  196,  196,  334,  211,

      309,  310,  291,  212,  296,  297,  298,  329,  299,  213,
      330,  339,  214,  196,  340,  289,  290,  341,  342,  196,
      277,  343,  210,  344,  196,  334,  211,  309,  310,  291,
      212,  296,  297,  298,  329,  299,  213,  330,  339,  214,
      196,  340,  348,  349,  341,  342,  196,  196,  343,  350,
      344,  196,  351,  304,  215,  305,  216, 1145,  306, 1145,
      352,  217, 1145, 1145,  307,  353,  218,  196, 1145,  348,
      349,  308, 1145,  354,  196, 1145,  350, 1145,  196,  351,
      304,  215,  305,  216,  316,  306,  317,  352,  217,  335,
      318,  307,  353,  218,  196,  219,  355,  319,  308,  336,

      354,  320,  196,  220,  337,  338,  221,  356,  345,  222,
      346,  316,  223,  317,  357,  224,  335,  318,  358,  359,
      362,  347,  219,  355,  319, 1145,  336,  365,  320,  196,
      220,  337,  338,  221,  356,  345,  222,  346,  366,  223,
      360,  357,  224,  230,  361,  358,  359,  362,  347,  231,
      232,  233,  363,  367,  365,  368,  234,  364,  371,  372,
      373,  196, 1145,  374,  369,  366,  375,  360,  378, 1145,
      230,  361,  370,  379,  380,  381,  231,  232,  233,  363,
      367,  376,  368,  234,  364,  371,  372,  373,  196,  243,
      374,  369,  377,  375,  382,  378,  196,  386,  387,  370,

      379,  380,  381,  244,  384,  392,  196,  385,  376,  245,
      246, 1145,  393,  394,  383,  511,  243,  512, 1145,  377,
      388,  382,  390,  196,  386,  387,  389, 1145, 1145, 1145,
      244,  384,  392,  196,  385,  391,  245,  246,  196,  393,
      394,  383,  511,  247,  512,  196,  196,  388,  513,  390,
      196,  248,  196,  389,  404,  249,  196, 1145,  250, 1145,
      196, 1145,  391, 1145, 1145,  196,  196, 1145, 1145, 1145,
      247, 1145,  196,  196,  514,  513,  196,  196,  248,  196,
      196,  404,  249,  196,  196,  250,  258,  196,  259,  397,
      196,  260,  196,  196,  196,  398,  261,  515,  262,  263,

      196,  514,  516,  196,  517,  518,  519,  196,  196, 1145,
      196,  196,  523,  258, 1145,  259,  397,  196,  260,  196,
      524,  196,  398,  261,  515,  262,  263,  196, 1145,  516,
      525,  517,  518,  519,  196,  196,  264,  196,  196,  523,
      265,  399,  196,  266,  267, 1145,  196,  524,  401,  400,
      268,  402,  196,  269,  196,  403,  196,  525,  526,  527,
     1145,  196,  196,  264, 1145,  196,  528,  265,  399,  196,
      266,  267,  196,  196, 1145,  401,  400,  268,  402,  196,
      269,  196,  403,  196,  529,  526,  527,  196, 1145,  196,
      196,  196,  408,  528,  196,  520,  409,  521,  196,  196,

      196,  405,  406,  410,  196, 1145,  530,  196,  196, 1145,
      196,  529,  522, 1145,  196,  407,  531,  196,  196,  408,
      196,  196,  520,  409,  521,  196,  532,  196,  405,  406,
      410,  196,  411,  530,  196,  196,  196,  196, 1145,  522,
      196, 1145,  407,  531,  533,  416,  431,  196,  196,  196,
      196, 1145,  196,  532,  196,  417,  196, 1145, 1145,  411,
      536, 1145, 1145,  196, 1145,  196,  427,  196,  196, 1145,
      196,  533,  416,  431,  196,  196,  196,  196,  196,  196,
      537,  196,  417,  196,  412,  413,  414,  536,  415,  418,
      538,  196,  196,  427,  419,  196,  196,  196,  539, 1145,

      540,  196, 1145,  541,  534,  196,  542,  537, 1145,  543,
     1145,  412,  413,  414,  544,  415,  418,  538,  196,  535,
     1145,  419,  545,  196,  420,  539,  421,  540,  546,  422,
      541,  534,  196,  542,  196,  423,  543,  196,  425,  426,
     1145,  544,  424,  547,  196,  548,  535,  196,  196,  545,
     1145,  420,  196,  421, 1145,  546,  422, 1145,  428,  196,
     1145,  196,  423,  196,  196,  425,  426,  196,  196,  424,
      547,  196,  548, 1145,  196,  196,  549,  429,  550,  196,
      196,  430,  196,  196,  196,  428,  196,  437,  551,  552,
      196, 1145,  196,  553,  196,  196,  196,  554,  555,  438,

      196, 1145,  196,  549,  429,  550, 1145,  196,  430,  196,
      196,  196,  196,  196,  437,  551,  552, 1145,  196,  196,
      553,  556,  196,  196,  554,  555,  438,  196,  439,  196,
      432,  196,  433,  196,  557,  196,  434,  196,  196,  196,
      442,  558,  559,  435,  440,  196,  196,  436,  556,  196,
      196,  196,  196,  196, 1145,  439,  441,  432,  196,  433,
      196,  557,  196,  434,  196,  196,  196,  442,  558,  559,
      435,  440,  196,  196,  436, 1145,  196,  196,  196,  196,
      196,  196,  443,  441,  560,  196,  561,  562,  563, 1145,
      196,  444,  196,  196,  196, 1145,  196, 1145,  564,  196,

      196,  196,  196,  196,  445,  447,  196,  446,  196,  443,
      196,  560,  196,  561,  562,  563,  196,  196,  444,  196,
      196,  196,  196,  196,  196,  564,  196,  196,  196,  196,
      449,  445,  447,  196,  446,  567,  448,  196,  196,  568,
      196,  196,  456,  196,  565,  196,  196,  196,  196,  196,
      455,  196,  450,  196,  566,  196,  569,  449,  196,  570,
      196,  196,  567,  448, 1145,  196,  568,  196,  196,  456,
     1145,  565,  196,  196,  571,  196,  196,  455, 1145,  450,
      196,  566,  196,  569,  572,  196,  570,  196,  196,  451,
      196,  458,  573,  574,  196, 1145,  457,  196,  470,  452,

      575,  571,  196,  196,  453,  454,  196,  196,  196,  196,
      196,  572,  196, 1145, 1145, 1145,  451,  196,  458,  573,
      574,  196,  196,  457,  196,  470,  452,  575,  196,  196,
      576,  453,  454,  196,  196,  196,  196,  196,  196,  196,
      459,  196,  460,  479, 1145,  577, 1145,  578,  480,  196,
     1145, 1145,  579,  196,  196,  196, 1145,  576,  196, 1145,
     1145,  196,  196, 1145,  580,  196, 1145,  459,  196,  460,
      479,  464,  577,  196,  578,  480, 1145,  196,  196,  579,
      196,  196,  461,  196,  462,  196,  196,  196,  467,  196,
      196,  580,  465,  196, 1145,  463,  581, 1145,  464,  582,

      196, 1145, 1145,  196,  196,  196,  196, 1145, 1145,  461,
      196,  462,  196,  196,  196,  467,  196,  196, 1145,  465,
      196,  466,  463,  581,  196,  196,  582, 1145,  196,  196,
      196,  469,  196,  196,  196,  471,  472,  196,  196,  196,
      468,  196, 1145,  196,  196,  196, 1145, 1145,  466,  583,
      584,  196,  196,  585,  196,  196,  196,  196,  469,  196,
     1145,  196,  471,  472,  196,  196,  586,  468,  196,  196,
      196,  196,  196,  196,  196,  475,  583,  584,  587,  196,
      585,  196,  474,  196,  196,  473,  588,  476, 1145,  196,
      196,  477, 1145,  586, 1145, 1145,  196,  196, 1145,  196,

      196,  196,  475,  589,  590,  587,  196,  196, 1145,  474,
      196,  478,  473,  588,  476,  196,  196,  196,  477,  196,
      196,  196,  481,  591,  196,  196,  196,  592,  482,  593,
      589,  590,  594,  196,  196,  196,  483,  196,  478,  595,
      196,  196,  196, 1145,  596,  597,  196,  196,  196,  481,
      591,  196,  196,  196,  592,  482,  593,  598, 1145,  594,
      196,  599,  196,  483,  196,  196,  595,  196,  196,  196,
      488,  596,  597,  196,  196,  487, 1145,  196,  196,  600,
      196,  484,  601,  196,  598,  196,  489,  196,  599, 1145,
      485,  490,  196,  196,  196,  196,  196,  488,  486,  196,

      196,  196,  487,  196,  196,  196,  600,  494,  484,  601,
      196,  196,  196,  489,  196,  196,  491,  485,  490,  196,
      196,  196,  196,  196, 1145,  486,  196,  196,  196,  602,
      196, 1145,  196, 1145,  494,  603,  492,  604,  196,  196,
      196,  196,  196,  491,  196,  503,  196,  493,  196,  196,
      196,  497, 1145,  196,  196,  196,  602,  495,  496,  196,
      196,  196,  603,  492,  604,  605,  196,  196,  196,  196,
     1145,  196,  503,  498,  493,  196,  196,  196,  497,  196,
      196,  196,  606,  500,  495,  496,  501,  196,  196,  611,
      502,  196,  605,  499,  196,  196,  196,  196,  196,  196,

      498,  504, 1145,  612,  196, 1145,  196,  505,  196,  606,
      500,  196, 1145,  501,  196,  613,  611,  502,  196,  506,
      499,  196,  196,  196,  196,  196,  196,  508,  504,  196,
      612,  196,  507,  196,  505,  609,  607,  610,  196,  196,
      614,  196,  613,  615,  509,  608,  506,  196,  616,  196,
      196,  617,  620,  510,  508,  621,  196,  196,  196,  507,
      196,  196,  609,  607,  610,  618,  196,  614, 1145,  619,
      615,  509,  608,  733,  196,  616,  196,  196,  617,  620,
      510,  196,  621,  622,  196,  196,  196,  196,  196,  623,
      196,  196,  618,  196,  734,  196,  619,  735,  624,  736,

      733,  196,  737,  196,  196,  738,  196,  739,  196,  196,
      622,  196,  196,  196,  196,  196,  623,  196,  196,  196,
      196,  734,  196,  625,  735,  624,  736,  196,  196,  737,
      196,  196,  738,  196,  739,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  627,  740,  196,  196,  741,  626,
      625, 1145, 1145,  742,  196, 1145,  743,  196,  196,  196,
      196,  196,  196,  744,  196,  196,  196,  196,  196,  196,
      196,  627,  740,  629,  196,  741,  626,  745,  196,  628,
      742,  196,  196,  743,  196,  630,  196,  196,  196,  196,
      744, 1145,  196,  631,  746,  632,  196,  196,  196,  196,

      629,  196, 1145,  747,  745,  196,  628, 1145,  196,  196,
      633,  748,  630,  635,  196,  196,  196,  196,  196,  749,
      631,  746,  632,  750,  196,  196,  196,  634,  196,  196,
      747,  196,  196,  196,  196,  196,  196,  633,  748,  636,
      635,  196,  196,  751,  196,  196,  749,  637,  752,  638,
      750,  196,  196,  196,  634, 1145,  196,  196,  196,  196,
      196,  196,  196,  196,  639,  641,  636,  640,  196,  196,
      751,  753,  196,  196,  637,  752,  638,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  643,  196,  642,
     1145,  639,  641,  754,  640,  196,  196,  196,  753,  196,

      196,  755,  196,  196,  196,  756, 1145,  645,  196,  196,
      196,  196,  196,  196,  643,  196,  642,  644,  757,  648,
      754,  196,  646,  196,  196,  196, 1145,  196,  755,  196,
      196,  647,  756,  196,  645, 1145,  196,  196,  196,  196,
      196,  196, 1145, 1145,  644,  757,  648, 1145,  196,  646,
      196,  649,  196,  196,  196,  652,  196,  196,  647,  196,
      196,  196,  650,  196,  196,  196,  196,  196,  196,  196,
      196,  758, 1145,  759,  196,  196, 1145,  196,  649,  760,
      196,  651,  652,  196,  196,  196,  196,  653,  196,  650,
      196,  196,  196,  761, 1145,  196,  196,  196,  758,  654,

      759,  196,  196,  196,  196,  762,  760,  655,  651,  196,
     1145,  196,  196,  196,  653,  763,  764,  196,  196,  196,
      761,  196,  196, 1145,  196,  196,  654, 1145,  196,  196,
      196,  657,  762,  196,  655,  656,  196,  196,  196,  765,
      196,  196,  763,  764,  196,  660,  196,  659,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  766,  657, 1145,
      196,  767,  656,  658,  196,  196,  765,  768,  196, 1145,
      196,  196,  660, 1145,  659,  661,  196,  196,  196,  196,
      196,  196,  196,  196,  766,  769,  662,  196,  767, 1145,
      658,  196,  196,  770,  768,  663,  196,  196,  196,  196,

      196,  665,  661,  664,  196,  196,  196,  196,  196,  196,
      196, 1145,  769,  662,  196, 1145,  196,  196,  196,  771,
      770,  196,  663,  196,  196,  196,  196,  196,  665, 1145,
      664,  196, 1145,  666,  196,  196,  196,  196,  196,  667,
      196, 1145,  668,  196,  196,  772,  771, 1145,  196,  773,
      673,  196,  776,  196,  196,  196,  196,  196,  196,  196,
      666,  671, 1145,  196,  196,  196,  667,  196,  669,  668,
      196,  777,  772,  196,  196,  196,  773,  673,  196,  776,
      196,  196,  196,  196,  196,  196,  196,  670,  671,  196,
     1145,  778,  674,  196,  196,  669,  196,  196,  777,  672,

      196,  196,  196,  779,  675,  196, 1145,  676,  196,  196,
     1145,  196,  196,  782,  670, 1145,  196,  677,  778,  674,
      196,  196,  774,  196,  196,  196,  672,  196,  196,  196,
      779,  675,  196,  775,  676,  196,  196,  679,  196,  196,
      782,  678,  196,  196,  677,  196,  196,  196,  196,  774,
     1145,  196,  196,  783,  196,  196,  196,  681,  680,  196,
      775,  196,  196,  196,  679, 1145, 1145,  196,  678,  196,
      196,  682,  196,  196,  196,  196,  784,  196,  683,  196,
      783, 1145,  785,  196,  681,  680, 1145,  196,  196,  196,
      196,  196,  684,  685,  196,  196,  196, 1145,  682,  196,

      196, 1145,  786,  784,  196,  683,  196, 1145,  196,  785,
      196,  196,  196,  196,  196,  686,  196,  196,  196,  684,
      685,  196,  196,  196,  687,  196,  196,  196,  196,  786,
      196, 1145,  787,  196,  196,  196,  688,  788,  196,  196,
      196,  196,  686,  196,  196,  196,  689, 1145,  196,  196,
      196,  687,  196, 1145,  196,  196, 1145,  196,  196,  787,
      196,  196,  196,  688,  788,  196,  196,  691,  196,  690,
     1145,  693,  196,  689,  196,  196,  196,  196,  789, 1145,
      694,  196,  196,  196,  196,  196,  196,  196,  790,  196,
      196,  196,  196,  196,  691,  696,  690,  692,  693,  791,

      196,  196,  196,  196,  695,  789,  196,  694,  196,  196,
      196,  196,  196,  196,  196,  790,  196,  196,  196,  792,
      196,  196,  696,  793,  692,  196,  791,  196,  196,  699,
      196,  695,  697,  196,  196,  196,  196,  794,  196,  196,
     1145,  196,  698,  196, 1145,  795,  792,  196,  196,  700,
      793,  796,  196,  196,  196,  196,  699,  196,  797,  697,
     1145,  196,  196,  196,  794,  196,  196,  196,  196,  698,
      702,  196,  795,  196, 1145,  798,  700,  701,  796,  196,
      196,  196,  196,  196,  196,  797,  703,  196,  704,  196,
     1145,  196,  196,  196,  196,  196, 1145,  702,  196,  196,

      196,  705,  798,  706,  701, 1145,  196,  196,  196,  196,
      196,  196,  196,  703,  196,  704,  196,  196,  196,  196,
     1145,  196,  196,  196,  708, 1145,  196,  196,  705, 1145,
      706,  196,  196, 1145,  196,  196,  799,  196,  196,  196,
      800, 1145,  196,  196,  196,  707,  196,  196,  196, 1145,
      196,  708,  780,  781,  196,  801,  196,  709,  196,  196,
      196,  196,  196,  799,  196,  196,  196,  800,  711,  196,
      196,  710,  707,  196,  196, 1145,  196,  712, 1145,  780,
      781,  196,  801,  196,  709,  802,  196,  196,  196,  196,
      196, 1145,  196,  196,  196,  711,  715,  196,  710,  803,

      196,  804,  196,  196,  712,  713,  196, 1145,  196,  805,
      196,  714,  802,  196,  196,  196,  196,  196,  196,  196,
     1145,  196,  196,  715, 1145,  806,  803,  196,  804,  196,
      807,  808,  713,  196,  716,  196,  805,  196,  714, 1145,
     1145,  196,  196,  196,  196,  196,  196,  718,  196,  196,
     1145,  196,  806,  717, 1145,  809,  719,  807,  808, 1145,
      810,  716,  196,  811,  196,  812,  196,  196,  196,  196,
      196,  196,  196,  196,  718,  196,  722,  724,  196,  720,
      717,  721,  809,  719, 1145,  813,  196,  810,  196,  196,
      811,  196,  812,  196,  196,  196,  196,  196, 1145,  196,

      196,  723,  814,  722,  724,  196,  720,  196,  721,  196,
     1145,  196,  813,  196, 1145,  196,  196,  196,  726, 1145,
      196,  196,  815,  725,  196,  196,  196,  196,  723,  814,
      196,  816,  196,  901,  196,  727,  196,  196,  196,  196,
      196,  728,  731,  196,  196,  726,  196,  196,  196,  815,
      725,  196,  196,  196,  196,  902, 1145,  196,  816,  196,
      901,  196,  727,  196,  196,  196,  196,  196,  728,  731,
      196,  729, 1145,  196,  732,  730,  196, 1145,  196,  196,
      196,  196,  902,  196, 1145,  903,  196,  904,  196,  817,
      196,  196,  196,  196, 1145,  196,  196,  196,  729,  819,

      905,  732,  730,  196,  818,  196,  196,  196,  196,  906,
      196,  196,  903,  820,  904,  196,  817,  907,  196,  196,
      196,  196,  196,  196,  196,  196,  819,  905,  821,  823,
      822,  818, 1145,  196, 1145,  196,  906,  908,  196,  909,
      820,  196,  196, 1145,  907,  910,  196,  196,  196,  196,
      196,  196,  196, 1145,  196,  821,  823,  822, 1145,  824,
      196,  825,  196,  911,  908,  196,  909,  196,  196,  196,
      196,  196,  910, 1145,  196,  196,  196,  196,  196,  196,
      196,  196, 1145,  196,  196,  196,  824,  912,  825,  913,
      911,  196,  196,  914,  196,  915,  196,  196,  196,  196,

      196,  196,  196,  916,  196,  196,  196,  196,  827,  826,
      196,  196,  196,  196,  912,  917,  913,  196,  196,  196,
      914,  196,  915,  196,  196,  196,  196,  196,  196,  196,
      916,  196,  196,  196,  829,  827,  826, 1145,  828,  196,
      196,  918,  917,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196, 1145,  196,  196,  830,  919,  196,
      196,  829,  832,  196,  831,  828,  196,  196,  918,  196,
      196,  196,  196,  196,  196,  196,  196,  196, 1145,  920,
      196,  833,  196,  834,  830,  919,  196,  196, 1145,  832,
      196,  831, 1145,  196,  196,  836,  196,  196,  196,  196,

      196,  196,  196,  196,  196,  196,  920,  921,  833,  196,
      834,  196,  835, 1145,  196,  839, 1145,  196,  837,  196,
      196,  838,  836,  196,  196,  196,  196,  196,  196,  922,
      196,  196,  196,  196,  921,  923,  196,  196,  196,  835,
      840,  924,  839,  196,  196,  837,  196,  925,  838, 1145,
      196,  196,  196,  196,  196,  196,  922,  196,  196, 1145,
      196,  196,  923,  926,  196,  196, 1145,  840,  924,  196,
      196,  196,  927,  928,  925,  196,  841,  196,  196,  196,
      196,  929,  196, 1145,  196,  196,  842, 1145,  196,  196,
      926,  930,  196,  196,  933,  196,  196,  847,  196,  927,

      928,  196,  196,  841,  196,  843,  196,  845,  929,  196,
      196,  196,  196,  842,  196,  196,  196,  196,  930,  846,
      196,  933,  196,  196,  847,  844,  934,  196,  196,  196,
      196,  196,  843,  196,  845, 1145,  196,  196,  196,  935,
     1145,  196,  196,  196,  196,  931,  846,  196,  932,  196,
      196,  196,  844,  934,  196,  849,  196,  196,  196,  196,
      196,  196,  848,  196,  196,  196,  935,  196,  196,  850,
      196, 1145,  931,  196,  196,  932,  196,  196,  196,  196,
      936,  196,  849,  196,  196, 1145,  196,  196,  196,  848,
      196,  196,  196,  196,  196,  196,  850,  196,  196,  937,

      196,  196,  196,  196,  196, 1145,  196,  936,  196,  851,
      196,  196,  196,  938,  196,  196,  196,  196,  196,  196,
      196,  852,  939, 1145,  196,  196,  937,  853,  196,  196,
      196,  196,  196,  940,  941,  196,  851,  196, 1145,  196,
      938,  196,  196,  196,  196,  196,  196,  196,  852,  939,
      854,  196,  196, 1145,  853,  196,  196,  196,  196,  196,
      940,  941,  196,  942,  196,  856, 1145,  943,  196, 1145,
      855,  196,  196,  944,  196,  945,  196,  854,  196,  196,
      196,  196,  196,  196,  196,  196, 1145,  946, 1145,  857,
      942,  196,  856,  858,  943,  196,  196,  855,  196,  196,

      944,  196,  945,  196,  859,  196,  196,  196,  196,  196,
      196,  196,  196,  860,  946,  196,  857, 1145,  196,  196,
      858, 1145,  196,  196, 1145,  196,  196, 1145,  196, 1145,
      196,  859,  196,  196,  196,  196,  196,  196,  196,  196,
      860,  947,  196,  196,  196,  948,  196,  196,  196, 1145,
      196,  196,  196,  196,  861,  949,  196,  196, 1145,  196,
      196,  196,  196,  862,  196,  863,  196,  196,  947,  196,
      196,  196,  948, 1145,  196,  196,  196,  196,  196,  950,
      951,  861,  949,  196,  196,  196,  196,  196,  196,  196,
      862,  196,  863,  196,  196,  952,  196,  196,  864,  865,

      866,  196,  867,  196,  196, 1145,  950,  951,  953,  196,
      196,  196,  196,  954,  196,  196,  196,  196,  955,  869,
      196,  956,  952,  196,  196,  864,  865,  866,  196,  867,
      196,  196,  868,  957,  196,  953,  196,  196,  196,  196,
      954,  196, 1145,  196,  196,  955,  869,  196,  956,  196,
      196,  196,  958,  196,  196,  196,  870,  196,  959,  868,
      957,  196,  871,  196,  196,  196,  196,  960,  196,  196,
      196,  196,  872,  961,  196, 1145,  196,  962,  196,  958,
      196,  196,  196,  870,  196,  959, 1145, 1145,  196,  871,
      196,  196,  196,  873,  960,  196,  196,  196,  196,  872,

      961,  196,  874,  875,  962,  196,  196, 1145,  196,  196,
      196,  196, 1145,  876,  196,  196, 1145,  196,  196,  196,
      873, 1145, 1025, 1026,  196,  196,  196,  877,  196,  874,
      875, 1027,  196,  196,  196,  196,  196,  196, 1145,  196,
      876,  196,  196,  196,  196,  196,  196,  880,  879, 1025,
     1026,  196,  196,  196,  877,  196,  196,  878, 1027,  196,
      196,  196,  196, 1145, 1028,  881,  196, 1145,  196,  196,
      196,  196,  196,  196,  880,  879,  196, 1029,  196,  882,
     1030,  196,  196,  196,  878,  196,  196,  196,  196,  196,
      196, 1028,  881, 1031,  196,  196,  884,  883,  196,  196,

      196,  196, 1145,  196, 1029,  196,  882, 1030,  196,  885,
      196, 1032,  196, 1033,  886,  196,  196,  196,  196, 1145,
     1031,  196, 1145,  884,  883,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  885,  196, 1032,  887,
     1033,  886, 1145,  196, 1034,  196,  196, 1035, 1145,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  889,
      196,  196,  196,  196,  888,  196,  887,  196, 1145,  196,
      196, 1034, 1145,  196, 1035,  196,  196,  196,  196,  890,
     1145,  196,  196,  196, 1145,  196,  889,  891, 1145,  196,
      196,  888,  196,  196,  196,  196,  196,  196, 1145,  196,

     1145,  196,  196,  894,  892,  196,  890,  196, 1145,  196,
      196,  196,  196, 1145,  891,  196,  196,  893, 1145,  897,
      196,  196,  196,  196, 1036,  196,  196,  196,  196,  196,
      894,  892,  196,  196,  196,  896,  196,  196,  196,  196,
      895, 1037,  196,  196,  893,  196,  897,  196,  196, 1038,
      196, 1036,  196,  196,  196,  196,  196,  196,  898,  196,
      196,  196,  896,  196,  196, 1145,  196,  895, 1037, 1145,
      196, 1039,  196,  899,  196,  196, 1038,  196, 1040,  196,
      196, 1041,  196,  196,  196,  898,  196,  900,  196,  196,
      196,  196,  196,  196, 1042, 1043,  196,  196, 1039,  196,

      899,  196,  196, 1044,  196, 1040,  196,  196, 1041,  196,
      196,  196,  196, 1045,  900,  196,  196,  196,  196,  196,
      196, 1042, 1043,  196,  196,  196,  196, 1046,  196,  196,
     1044,  196, 1047,  196,  196, 1048,  196,  196,  196,  196,
     1045, 1049,  196,  964,  196,  196,  963,  196, 1050, 1051,
     1145,  196,  196,  196, 1046,  196,  196,  965,  196, 1047,
      196,  196, 1048,  196,  196, 1145, 1052, 1145, 1049, 1145,
      964,  196,  196,  963,  196, 1050, 1051,  196,  196,  196,
      196, 1053,  196,  196,  965, 1145,  967,  196,  196, 1054,
      196,  196,  196, 1052,  966, 1055,  196, 1056,  196,  196,

     1057,  968, 1145, 1058,  196,  196,  196,  196, 1053,  196,
      196, 1059,  196,  967,  196, 1095, 1054, 1145,  196,  196,
      969,  966, 1055,  196, 1056,  196,  196, 1057,  968,  971,
     1058,  196,  196,  196,  196,  196,  196, 1145, 1059,  196,
     1096,  970, 1095, 1097,  196, 1098,  196,  969,  196,  196,
      972,  196,  196, 1099, 1145, 1100,  971,  974,  196,  196,
      196,  196,  196,  196,  196,  196,  196, 1096,  970,  973,
     1097,  196, 1098,  196, 1145,  196,  196,  972,  196,  196,
     1099,  196, 1100, 1101,  974,  976,  196, 1145,  196,  196,
      196,  196,  196,  196,  196,  196,  973, 1102,  196,  196,

      196,  975, 1145,  196,  977,  196,  196,  196,  196, 1103,
     1101, 1145,  976, 1104,  196,  196,  196, 1145,  978, 1105,
      196,  196,  196,  196, 1102,  196,  196,  196,  975,  196,
      196,  977,  196,  196,  196,  980, 1103, 1145,  979,  196,
     1104,  196,  196, 1106,  981,  978, 1105,  196,  196,  196,
      196, 1107, 1108,  196,  196,  196,  196,  196,  196, 1109,
      196, 1145,  980,  196,  196,  979,  196,  196,  982,  983,
     1106,  981, 1125,  196,  196,  196,  196,  984, 1107, 1108,
      196,  196,  196,  196,  196,  196, 1109,  986,  196,  196,
      196,  196,  985,  196,  196,  982,  983, 1126,  196, 1125,

      196,  196,  196,  196,  984, 1127, 1145,  196,  196,  196,
      196, 1128, 1145,  196,  986,  196,  196,  196,  196,  985,
      196, 1129,  196,  196, 1126,  196,  196, 1145,  987,  196,
      196, 1130, 1127,  196,  196,  196,  196,  196, 1128,  196,
      196,  196,  196,  196,  196,  196,  988,  196, 1129,  196,
      196,  196,  196,  196,  989,  987,  196,  196, 1130,  196,
      196, 1137,  990, 1138,  196, 1139,  196,  196,  196,  196,
      196,  196,  196,  988,  196,  196,  196, 1143,  196,  196,
      196,  989, 1145,  196,  196, 1145,  196, 1145, 1137,  990,
     1138,  196, 1139,  196,  196, 1145,  196,  196,  196,  196,

     1145,  992,  196,  196, 1143,  196, 1145,  196,  991, 1145,
      196, 1145, 1145,  196,  196, 1145, 1145,  995,  196, 1145,
      196,  196,  196,  196,  196,  196,  196,  196,  992,  196,
      196,  196,  196, 1145, 1145,  991,  993,  196, 1145,  994,
      196,  196,  196, 1145,  995,  196, 1145,  196,  196,  196,
     1145,  196,  196,  196,  196,  196,  196,  196,  196, 1145,
      196,  996, 1145,  993,  196,  196,  994, 1145, 1145,  196,
     1145,  196,  196,  196,  196,  997, 1145,  196,  196,  196,
      196,  196,  196,  196, 1145, 1145, 1145,  196,  996, 1145,
     1145,  196,  196,  196, 1145, 1145, 1145, 1145,  196,  196,

      196,  196,  997, 1145,  196,  196,  196,  196,  196,  196,
      196,  196,  998,  196,  196,  196,  999, 1145,  196, 1145,
      196,  196, 1145, 1145, 1145, 1145,  196, 1145,  196,  196,
     1145,  196,  196, 1000,  196, 1145,  196,  196,  196,  998,
      196,  196,  196,  999, 1145,  196,  196, 1145,  196, 1145,
      196, 1003, 1145,  196, 1145,  196,  196, 1145,  196, 1001,
     1000,  196, 1145,  196,  196, 1004,  196,  196,  196,  196,
     1145,  196, 1005,  196, 1145, 1145, 1002,  196, 1003, 1145,
      196, 1145,  196,  196, 1145,  196, 1001,  196,  196, 1145,
      196,  196, 1004,  196,  196,  196,  196, 1006,  196, 1005,

     1145,  196, 1145, 1002, 1145,  196, 1145,  196, 1145, 1007,
      196, 1145,  196,  196,  196,  196, 1145,  196,  196, 1145,
     1145,  196, 1008,  196, 1006,  196,  196,  196,  196, 1010,
      196, 1145,  196,  196,  196, 1145, 1007, 1011,  196, 1145,
      196, 1009,  196,  196,  196,  196,  196, 1012,  196, 1008,
      196,  196,  196,  196,  196,  196, 1010,  196,  196, 1145,
      196, 1145, 1145,  196, 1011,  196, 1145,  196, 1009,  196,
      196,  196,  196,  196, 1012,  196,  196, 1013,  196,  196,
      196, 1145,  196,  196, 1145,  196, 1145, 1145, 1014, 1017,
      196, 1015, 1145,  196,  196,  196,  196,  196,  196, 1145,

     1145, 1145,  196,  196, 1013,  196,  196,  196,  196,  196,
      196, 1145,  196,  196, 1016, 1014, 1017, 1019, 1015, 1145,
      196,  196,  196,  196,  196,  196, 1018, 1145,  196, 1021,
      196, 1145,  196,  196,  196,  196,  196,  196, 1145,  196,
      196, 1016, 1020,  196, 1019, 1145, 1145,  196,  196,  196,
      196, 1145,  196, 1018, 1145,  196, 1021,  196,  196, 1145,
      196,  196,  196,  196,  196, 1145, 1145,  196, 1145, 1020,
      196,  196, 1145, 1145,  196, 1023,  196,  196,  196,  196,
     1024, 1022, 1145,  196,  196,  196, 1145,  196,  196,  196,
      196, 1145,  196, 1060,  196, 1145,  196,  196,  196,  196,

     1145, 1145, 1023, 1145,  196,  196,  196, 1024, 1022, 1145,
      196,  196,  196,  196,  196,  196, 1145,  196,  196,  196,
     1060,  196,  196,  196,  196, 1145,  196, 1061, 1145, 1145,
      196,  196, 1062, 1145,  196, 1145,  196,  196,  196,  196,
      196, 1145,  196, 1145,  196,  196,  196,  196,  196,  196,
      196,  196,  196, 1145, 1061, 1145, 1063,  196, 1145, 1062,
     1145,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196, 1145,  196,  196,  196, 1064,  196,  196,  196,  196,
      196, 1145, 1145, 1063, 1065, 1145,  196, 1145,  196,  196,
     1145, 1145, 1145,  196,  196,  196,  196,  196, 1066,  196,

      196,  196, 1064,  196,  196,  196,  196,  196, 1067, 1145,
      196, 1065, 1145,  196,  196,  196, 1145, 1145,  196, 1145,
      196,  196, 1145,  196, 1145, 1066,  196,  196,  196, 1068,
     1145,  196,  196,  196,  196, 1067, 1069,  196,  196,  196,
     1145,  196,  196,  196, 1145,  196, 1145,  196,  196, 1070,
     1145,  196, 1145,  196, 1145,  196, 1068, 1145,  196,  196,
      196,  196, 1145, 1069,  196,  196,  196, 1145,  196,  196,
      196,  196,  196,  196, 1145, 1145, 1070,  196,  196, 1145,
      196, 1145,  196, 1145, 1145,  196,  196,  196,  196, 1145,
     1071,  196,  196,  196,  196,  196,  196, 1145,  196,  196,

      196, 1145,  196, 1145,  196,  196,  196,  196, 1145,  196,
      196, 1072,  196, 1145, 1145,  196, 1145, 1071, 1145,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196, 1145, 1145,  196,  196, 1072,  196,
     1145, 1073, 1145, 1145,  196, 1145,  196,  196, 1145,  196,
     1145,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196, 1075,  196,  196, 1145,  196,  196, 1145, 1073, 1145,
     1145,  196, 1145,  196,  196, 1074,  196, 1145, 1145,  196,
      196,  196,  196,  196,  196, 1145,  196,  196, 1075,  196,
      196, 1076,  196,  196,  196,  196, 1145,  196,  196,  196,

      196,  196, 1074,  196, 1077, 1145,  196,  196,  196,  196,
     1145,  196, 1078, 1145,  196,  196,  196,  196, 1076, 1145,
      196,  196,  196, 1145,  196,  196,  196,  196,  196,  196,
      196, 1077, 1145,  196,  196, 1145,  196, 1145, 1145, 1078,
     1145,  196,  196,  196,  196, 1079, 1145,  196, 1080,  196,
      196,  196,  196, 1145,  196,  196,  196,  196,  196, 1145,
      196,  196, 1145,  196, 1145, 1145,  196, 1082,  196, 1145,
      196, 1081, 1079, 1145,  196, 1080,  196,  196,  196,  196,
     1145,  196,  196,  196, 1145,  196,  196,  196, 1145, 1145,
     1083, 1145,  196,  196, 1082,  196,  196,  196, 1081, 1145,

     1084,  196,  196,  196,  196,  196,  196, 1145,  196,  196,
      196, 1145,  196,  196,  196, 1145, 1145, 1083, 1085,  196,
     1145, 1145,  196,  196,  196,  196, 1145, 1084, 1145,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196, 1086,  196, 1085,  196, 1087, 1145,  196,
     1145,  196,  196, 1145,  196, 1088, 1145,  196, 1145,  196,
      196,  196,  196,  196,  196,  196, 1145,  196,  196,  196,
     1086,  196, 1089,  196, 1087, 1145,  196, 1145, 1145,  196,
      196,  196, 1088, 1145,  196, 1145,  196,  196, 1145,  196,
      196, 1145, 1091,  196,  196, 1145,  196,  196,  196, 1089,

     1145, 1145, 1145,  196, 1145, 1145,  196,  196, 1090, 1145,
     1145,  196,  196,  196,  196,  196,  196, 1145, 1145, 1091,
      196,  196, 1145,  196,  196,  196, 1092, 1145, 1145,  196,
      196,  196,  196,  196,  196, 1090, 1145, 1145,  196,  196,
      196,  196,  196,  196,  196, 1145, 1145, 1145,  196,  196,
      196, 1145, 1145, 1092, 1145, 1145,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
     1094,  196,  196, 1145, 1145,  196,  196,  196, 1093, 1145,
      196, 1145,  196,  196,  196,  196, 1145, 1145,  196,  196,
      196,  196,  196,  196,  196,  196,  196, 1094,  196,  196,

      196, 1145,  196, 1145,  196, 1093, 1145,  196,  196,  196,
      196,  196,  196, 1110, 1145,  196,  196,  196,  196, 1145,
      196, 1145, 1111, 1145,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196, 1112,  196,  196, 1145,  196, 1145,
     1110, 1145, 1145,  196,  196,  196,  196,  196,  196, 1111,
     1145,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196, 1112,  196,  196,  196,  196,  196, 1113,  196, 1145,
      196, 1145,  196,  196, 1145,  196,  196, 1145,  196,  196,
      196,  196, 1145,  196,  196,  196,  196, 1145,  196,  196,
     1145,  196,  196,  196, 1113,  196,  196,  196, 1114,  196,

      196, 1145,  196,  196,  196,  196,  196,  196,  196, 1115,
     1145,  196, 1117,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196, 1145, 1114, 1145,  196, 1145,  196,
     1116,  196,  196,  196,  196,  196, 1115,  196,  196, 1117,
     1145,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196, 1145, 1145,  196,  196, 1116,  196,  196,
     1145,  196, 1145, 1145,  196,  196,  196, 1118, 1145,  196,
      196,  196,  196,  196,  196, 1145, 1119,  196,  196,  196,
      196, 1145,  196,  196,  196,  196, 1145, 1145,  196, 1145,
      196, 1145,  196,  196, 1118, 1120, 1145,  196,  196,  196,

      196,  196, 1145, 1119, 1145,  196,  196,  196,  196,  196,
      196,  196, 1145, 1145, 1122,  196, 1145,  196, 1121,  196,
      196, 1145, 1120, 1145,  196,  196,  196,  196, 1145, 1145,
     1145, 1145,  196,  196,  196,  196,  196,  196,  196, 1124,
      196, 1122,  196,  196,  196, 1121,  196,  196,  196, 1123,
     1145,  196,  196,  196,  196, 1145, 1145, 1145, 1145,  196,
     1145,  196,  196, 1145,  196,  196, 1124,  196,  196,  196,
      196,  196,  196,  196, 1145,  196, 1123, 1145,  196, 1145,
      196,  196,  196,  196,  196, 1145,  196,  196,  196,  196,
     1145,  196, 1145, 1131, 1145,  196, 1145,  196,  196,  196,

      196,  196,  196,  196, 1145,  196,  196,  196, 1145,  196,
      196,  196, 1132, 1145,  196,  196, 1145,  196, 1145, 1145,
     1131, 1145,  196, 1145,  196,  196, 1145,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196, 1132,
     1145,  196, 1145, 1145,  196, 1133,  196, 1145, 1145,  196,
      196,  196,  196, 1145,  196, 1145,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196, 1145,  196, 1145,
      196,  196, 1133,  196, 1136,  196, 1134,  196,  196,  196,
     1145,  196, 1135,  196,  196,  196, 1145,  196, 1140,  196,
      196,  196,  196,  196, 1145, 1145, 1145,  196,  196, 1145,

      196, 1136,  196, 1134,  196,  196, 1145, 1145,  196, 1135,
      196, 1145,  196, 1145,  196, 1140,  196,  196,  196,  196,
      196, 1145,  196, 1145, 1141,  196,  196,  196, 1145,  196,
      196,  196,  196, 1145,  196,  196, 1145,  196,  196,  196,
     1145,  196,  196,  196, 1142,  196, 1145,  196, 1145,  196,
     1145, 1141,  196,  196,  196, 1145,  196,  196,  196,  196,
     1145,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196, 1142,  196, 1144, 1145, 1145, 1145, 1145,  196, 1145,
     1145,  196, 1145,  196,  196,  196,  196, 1145, 1145,  196,
      196,  196, 1145, 1145,  196,  196, 1145, 1145, 1145, 1145,

     1144, 1145, 1145, 1145, 1145,  196, 1145, 1145, 1145, 1145,
      196,  196,   47,   47,   47,   47,   47,   90, 1145, 1145,
       90,   90,  182,  182,  182, 1145,  182,  184, 1145,  184,
      184,  184,  187, 1145,  187,  187,  187,  196, 1145,  196,
      196,  196,    7, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,

     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145
    } ;

static const flex_int16_t yy_chk[6011] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   15, 1148,
       15,   17,   17,   18,   18,   21,   22,   21,   50,   50,
       22,   23,   30,   21,  396,   21,   31,  280,   23,   21,
       21,   37,   56,   45,   56,   23,   22,   24,   23,  191,
       27,   24,   21,   22,   21,   24,   27,   22,   23,   30,
       21,   24,   21,   31,   24,   23,   21,   21,   37,   25,
       45,   25,   23,   22,   24,   23,   25,   27,   24,   43,

       43,   25,   24,   27,  190,   32,   28,  187,   24,   32,
       94,   24,   51,   51,   28,   32,   25,   93,   25,   90,
       28,   58,   58,   25,   59,   59,   43,   43,   25,   26,
       88,   88,   32,   28,   34,   33,   32,   26,  100,   33,
       26,   28,   32,   26,   29,   33,   26,   28,   34,   26,
       29,   29,   29,   87,   34,   34,   26,   29,   61,   38,
      101,   34,   33,   38,   26,  100,   33,   26,   60,   38,
       26,   29,   33,   26,   36,   34,   26,   29,   29,   29,
       35,   34,   34,  104,   29,   36,   38,  101,   35,  105,
       38,   36,   35,   92,   92,   35,   38,   41,   57,   41,

       72,   36,   41,   42,   72,  185,  185,   35,  189,  189,
      104,   42,   36,  102,  103,   35,  105,  103,   36,   35,
       72,  102,   35,   39,   41,   39,   41,   72,   39,   41,
       42,   72,   68,   39,   53,   39,   39,   52,   42,   68,
      102,  103,  107,   68,  103,   48,   68,   72,  102,   68,
       39,   46,   39,  110,   20,   39,  116,   73,  109,   68,
       39,   73,   39,   39,   40,  109,   68,   73,   40,  107,
       68,   40,   40,   68,  113,  117,   68,   73,   40,  113,
      110,   40,   19,  116,   73,  109,   16,   11,   73,    7,
        4,   40,  109,    3,   73,   40,  118,    0,   40,   40,

        0,  113,  117,    0,   73,   40,  113,    0,   40,   62,
       62,    0,   62,   62,   62,   62,   62,   62,  112,   62,
       62,   62,   78,  118,   69,   62,  119,   62,  112,   71,
       78,   69,   69,   62,   78,   62,   71,   78,   69,   62,
       62,   69,  120,   71,  122,  112,   71,  123,    0,   78,
        0,   69,   62,  119,   62,  112,   71,   78,   69,   69,
       62,   78,   62,   71,   78,   69,   62,   62,   69,  120,
       71,  122,    0,   71,  123,   62,   63,   63,    0,   63,
       63,   63,   63,   63,   63,   74,   63,   63,   63,   74,
       79,    0,   77,   63,   79,   74,  124,   63,   84,   77,

       79,   84,   84,   77,    0,   74,   77,  125,    0,   77,
       79,  126,   74,   63,  127,    0,   74,   79,   84,   77,
       63,   79,   74,  124,   63,   84,   77,   79,   84,   84,
       77,   83,   74,   77,  125,   83,   77,   79,  126,   83,
       63,  127,   63,   64,  128,   84,  129,   64,  131,   85,
       64,   64,   82,   85,   82,   83,   82,   64,   83,   82,
       64,    0,   83,  132,   82,  134,   83,   64,    0,   85,
       64,  128,    0,  129,   64,  131,   85,   64,   64,   82,
       85,   82,   83,   82,   64,    0,   82,   64,  106,  106,
      132,   82,  134,   86,   64,   65,   85,   86,  135,   65,

      115,  115,  106,   65,  111,  111,  111,  130,  111,   65,
      130,  137,   65,   86,  138,  106,  106,  139,  140,   65,
       86,  141,   65,  141,   86,  135,   65,  115,  115,  106,
       65,  111,  111,  111,  130,  111,   65,  130,  137,   65,
       86,  138,  143,  144,  139,  140,   65,   66,  141,  145,
      141,   66,  146,  114,   66,  114,   66,    0,  114,    0,
      147,   66,    0,    0,  114,  148,   66,   66,    0,  143,
      144,  114,    0,  149,   66,    0,  145,    0,   66,  146,
      114,   66,  114,   66,  121,  114,  121,  147,   66,  136,
      121,  114,  148,   66,   66,   67,  150,  121,  114,  136,

      149,  121,   67,   67,  136,  136,   67,  152,  142,   67,
      142,  121,   67,  121,  153,   67,  136,  121,  154,  155,
      157,  142,   67,  150,  121,    0,  136,  159,  121,   67,
       67,  136,  136,   67,  152,  142,   67,  142,  160,   67,
      156,  153,   67,   70,  156,  154,  155,  157,  142,   70,
       70,   70,  158,  161,  159,  162,   70,  158,  163,  164,
      165,   70,    0,  166,  162,  160,  167,  156,  169,    0,
       70,  156,  162,  170,  170,  171,   70,   70,   70,  158,
      161,  168,  162,   70,  158,  163,  164,  165,   70,   75,
      166,  162,  168,  167,  172,  169,   75,  174,  175,  162,

      170,  170,  171,   75,  173,  178,   75,  173,  168,   75,
       75,    0,  179,  180,  172,  282,   75,  284,    0,  168,
      176,  172,  177,   75,  174,  175,  176,    0,    0,    0,
       75,  173,  178,   75,  173,  177,   75,   75,   76,  179,
      180,  172,  282,   76,  284,   76,  196,  176,  285,  177,
      196,   76,   76,  176,  202,   76,  202,    0,   76,    0,
      202,    0,  177,    0,    0,   76,  196,    0,    0,    0,
       76,    0,   76,  196,  287,  285,  202,  196,   76,   76,
      198,  202,   76,  202,  198,   76,   80,  202,   80,  197,
      197,   80,   80,  196,  197,  198,   80,  289,   80,   80,

      198,  287,  290,  202,  291,  292,  293,  198,   80,    0,
      197,  198,  295,   80,    0,   80,  197,  197,   80,   80,
      296,  197,  198,   80,  289,   80,   80,  198,    0,  290,
      297,  291,  292,  293,  199,   80,   81,  197,  199,  295,
       81,  199,  201,   81,   81,    0,  201,  296,  200,  199,
       81,  200,  200,   81,  199,  201,  200,  297,  298,  299,
        0,  199,  201,   81,    0,  199,  300,   81,  199,  201,
       81,   81,  200,  201,    0,  200,  199,   81,  200,  200,
       81,  199,  201,  200,  301,  298,  299,  205,    0,  201,
      204,  205,  204,  300,  204,  294,  206,  294,  206,  200,

      203,  203,  203,  206,  203,    0,  302,  205,  206,    0,
      204,  301,  294,    0,  205,  203,  304,  204,  205,  204,
      203,  204,  294,  206,  294,  206,  305,  203,  203,  203,
      206,  203,  207,  302,  205,  206,  207,  204,    0,  294,
      207,    0,  203,  304,  306,  209,  217,  203,  217,  209,
      213,    0,  217,  305,  213,  209,  207,    0,    0,  207,
      308,    0,    0,  207,    0,  209,  213,  207,  217,    0,
      213,  306,  209,  217,  210,  217,  209,  213,  210,  217,
      309,  213,  209,  207,  208,  208,  208,  308,  208,  210,
      310,  208,  209,  213,  210,  217,  208,  213,  311,    0,

      312,  210,    0,  313,  307,  210,  315,  309,    0,  316,
        0,  208,  208,  208,  317,  208,  210,  310,  208,  307,
        0,  210,  318,  208,  211,  311,  211,  312,  319,  211,
      313,  307,  212,  315,  212,  211,  316,  211,  212,  212,
        0,  317,  211,  320,  212,  321,  307,  211,  214,  318,
        0,  211,  214,  211,    0,  319,  211,    0,  214,  212,
        0,  212,  211,  215,  211,  212,  212,  215,  214,  211,
      320,  212,  321,    0,  211,  214,  322,  215,  323,  214,
      219,  216,  216,  215,  219,  214,  216,  219,  324,  325,
      215,    0,  220,  326,  215,  214,  220,  327,  328,  220,

      219,    0,  216,  322,  215,  323,    0,  219,  216,  216,
      215,  219,  220,  216,  219,  324,  325,    0,  221,  220,
      326,  329,  221,  220,  327,  328,  220,  219,  221,  216,
      218,  222,  218,  224,  330,  222,  218,  224,  221,  220,
      224,  331,  332,  218,  222,  221,  223,  218,  329,  221,
      223,  222,  218,  224,    0,  221,  223,  218,  222,  218,
      224,  330,  222,  218,  224,  221,  223,  224,  331,  332,
      218,  222,  225,  223,  218,    0,  225,  223,  222,  218,
      224,  226,  225,  223,  333,  226,  334,  335,  336,    0,
      227,  226,  225,  223,  227,    0,  228,    0,  337,  225,

      228,  226,  230,  225,  227,  228,  230,  227,  226,  225,
      227,  333,  226,  334,  335,  336,  228,  227,  226,  225,
      229,  227,  230,  228,  229,  337,  231,  228,  226,  230,
      231,  227,  228,  230,  227,  339,  229,  227,  235,  340,
      229,  232,  235,  228,  338,  232,  231,  229,  234,  230,
      234,  229,  232,  231,  338,  234,  342,  231,  235,  343,
      234,  232,  339,  229,    0,  235,  340,  229,  232,  235,
        0,  338,  232,  231,  344,  234,  236,  234,    0,  232,
      236,  338,  234,  342,  345,  235,  343,  234,  232,  233,
      237,  237,  346,  347,  237,    0,  236,  233,  246,  233,

      348,  344,  246,  236,  233,  233,  246,  236,  248,  233,
      237,  345,  248,    0,    0,    0,  233,  237,  237,  346,
      347,  237,  246,  236,  233,  246,  233,  348,  248,  246,
      349,  233,  233,  246,  238,  248,  233,  237,  238,  248,
      238,  255,  238,  255,    0,  350,    0,  351,  255,  246,
        0,    0,  353,  255,  238,  248,    0,  349,  240,    0,
        0,  238,  240,    0,  354,  238,    0,  238,  255,  238,
      255,  240,  350,  243,  351,  255,    0,  243,  240,  353,
      255,  238,  239,  241,  239,  240,  239,  241,  243,  240,
      239,  354,  241,  243,    0,  239,  355,    0,  240,  356,

      243,    0,    0,  241,  243,  240,  239,    0,    0,  239,
      241,  239,  242,  239,  241,  243,  242,  239,    0,  241,
      243,  242,  239,  355,  245,  244,  356,    0,  245,  244,
      241,  245,  242,  239,  247,  247,  249,  249,  247,  242,
      244,  249,    0,  242,  245,  244,    0,    0,  242,  357,
      358,  245,  244,  359,  247,  245,  244,  249,  245,  242,
        0,  247,  247,  249,  249,  247,  360,  244,  249,  251,
      250,  245,  244,  251,  250,  252,  357,  358,  361,  252,
      359,  247,  251,  252,  249,  250,  362,  253,    0,  251,
      250,  253,    0,  360,    0,    0,  251,  250,    0,  252,

      251,  250,  252,  363,  364,  361,  252,  253,    0,  251,
      252,  254,  250,  362,  253,  254,  251,  250,  253,  254,
      256,  257,  256,  365,  256,  257,  252,  366,  257,  367,
      363,  364,  368,  258,  253,  254,  258,  258,  254,  369,
      256,  257,  254,    0,  371,  372,  254,  256,  257,  256,
      365,  256,  257,  258,  366,  257,  367,  373,    0,  368,
      258,  374,  254,  258,  258,  260,  369,  256,  257,  260,
      261,  371,  372,  262,  261,  260,    0,  262,  261,  375,
      258,  259,  376,  259,  373,  260,  262,  259,  374,    0,
      259,  263,  260,  262,  261,  263,  260,  261,  259,  263,

      262,  261,  260,  259,  262,  261,  375,  266,  259,  376,
      259,  266,  260,  262,  259,  263,  264,  259,  263,  264,
      262,  261,  263,  264,    0,  259,  263,  266,  265,  377,
      259,    0,  265,    0,  266,  378,  265,  379,  266,  264,
      268,  272,  263,  264,  268,  272,  264,  265,  265,  267,
      264,  268,    0,  267,  266,  265,  377,  267,  267,  265,
      268,  272,  378,  265,  379,  380,  264,  268,  272,  267,
        0,  268,  272,  269,  265,  265,  267,  269,  268,  270,
      267,  269,  382,  270,  267,  267,  270,  268,  272,  385,
      271,  271,  380,  269,  273,  271,  267,  269,  273,  270,

      269,  273,    0,  386,  269,    0,  270,  273,  269,  382,
      270,  271,    0,  270,  273,  387,  385,  271,  271,  274,
      269,  273,  271,  274,  269,  273,  270,  275,  273,  276,
      386,  275,  274,  276,  273,  384,  383,  384,  271,  274,
      388,  273,  387,  389,  276,  383,  274,  275,  390,  276,
      274,  391,  393,  277,  275,  394,  276,  277,  275,  274,
      276,  277,  384,  383,  384,  392,  274,  388,    0,  392,
      389,  276,  383,  511,  275,  390,  276,  277,  391,  393,
      277,  397,  394,  398,  277,  397,  399,  398,  277,  400,
      399,  401,  392,  400,  512,  401,  392,  513,  401,  514,

      511,  397,  515,  398,  277,  516,  399,  517,  397,  400,
      398,  401,  397,  399,  398,  402,  400,  399,  401,  402,
      400,  512,  401,  403,  513,  401,  514,  403,  397,  515,
      398,  403,  516,  399,  517,  402,  400,  404,  401,  405,
      406,  404,  402,  405,  406,  518,  402,  403,  520,  405,
      403,    0,    0,  524,  403,    0,  525,  404,  403,  405,
      406,  407,  402,  526,  404,  407,  405,  406,  404,  408,
      405,  406,  518,  408,  403,  520,  405,  528,  409,  407,
      524,  407,  409,  525,  404,  409,  405,  406,  407,  408,
      526,    0,  407,  410,  529,  410,  408,  412,  409,  410,

      408,  412,    0,  530,  528,  409,  407,    0,  407,  409,
      410,  531,  409,  412,  411,  410,  408,  412,  411,  532,
      410,  529,  410,  533,  412,  409,  410,  411,  412,  415,
      530,  413,  414,  415,  411,  413,  414,  410,  531,  413,
      412,  411,  410,  534,  412,  411,  532,  414,  535,  415,
      533,  413,  414,  417,  411,    0,  415,  417,  413,  414,
      415,  411,  413,  414,  416,  418,  413,  417,  416,  418,
      534,  536,  416,  417,  414,  535,  415,  419,  413,  414,
      417,  419,  420,  421,  417,  418,  420,  421,  416,  420,
        0,  416,  418,  537,  417,  416,  418,  419,  536,  416,

      417,  538,  420,  421,  419,  539,    0,  423,  419,  420,
      421,  423,  418,  420,  421,  416,  420,  422,  542,  425,
      537,  422,  423,  425,  419,  422,    0,  423,  538,  420,
      421,  424,  539,  424,  423,    0,  426,  424,  423,  425,
      426,  422,    0,    0,  422,  542,  425,    0,  422,  423,
      425,  426,  422,  424,  423,  429,  426,  430,  424,  429,
      424,  430,  427,  426,  424,  427,  425,  426,  422,  427,
      428,  543,    0,  544,  428,  429,    0,  430,  426,  545,
      424,  428,  429,  426,  430,  427,  429,  431,  430,  427,
      428,  431,  427,  546,    0,  431,  427,  428,  543,  432,

      544,  428,  429,  432,  430,  547,  545,  433,  428,  433,
        0,  431,  427,  433,  431,  548,  550,  428,  431,  432,
      546,  434,  431,    0,  435,  434,  432,    0,  435,  433,
      432,  435,  547,  437,  433,  434,  433,  437,  431,  551,
      433,  434,  548,  550,  435,  438,  432,  437,  434,  438,
      436,  435,  434,  437,  436,  435,  433,  554,  435,    0,
      437,  555,  434,  436,  437,  438,  551,  557,  434,    0,
      436,  435,  438,    0,  437,  439,  438,  436,  440,  439,
      437,  436,  440,  439,  554,  560,  440,  441,  555,    0,
      436,  441,  438,  561,  557,  441,  442,  436,  440,  439,

      442,  443,  439,  442,  443,  440,  439,  441,  443,  440,
      439,    0,  560,  440,  441,    0,  442,  444,  441,  562,
      561,  444,  441,  442,  443,  440,  439,  442,  443,    0,
      442,  443,    0,  444,  441,  443,  445,  444,  446,  445,
      445,    0,  446,  442,  444,  563,  562,    0,  444,  564,
      451,  443,  567,  447,  451,  449,  445,  447,  446,  449,
      444,  449,    0,  445,  444,  446,  445,  445,  447,  446,
      451,  571,  563,  447,  448,  449,  564,  451,  448,  567,
      447,  451,  449,  445,  447,  446,  449,  448,  449,  450,
        0,  573,  452,  450,  448,  447,  452,  451,  571,  450,

      447,  448,  449,  575,  453,  448,    0,  454,  453,  450,
        0,  454,  452,  577,  448,    0,  450,  454,  573,  452,
      450,  448,  565,  452,  453,  455,  450,  454,  456,  455,
      575,  453,  456,  565,  454,  453,  450,  456,  454,  452,
      577,  455,  457,  458,  454,  455,  457,  458,  456,  565,
        0,  453,  455,  578,  454,  456,  455,  459,  458,  456,
      565,  459,  457,  458,  456,    0,    0,  460,  455,  457,
      458,  460,  455,  457,  458,  456,  580,  459,  461,  461,
      578,    0,  581,  461,  459,  458,    0,  460,  459,  457,
      458,  463,  462,  463,  460,  463,  462,    0,  460,  461,

      462,    0,  582,  580,  459,  461,  461,    0,  465,  581,
      461,  463,  465,  464,  460,  464,  462,  464,  463,  462,
      463,  466,  463,  462,  465,  466,  461,  462,  465,  582,
      467,    0,  583,  464,  467,  465,  466,  584,  463,  465,
      464,  466,  464,  462,  464,  468,  467,    0,  466,  468,
      467,  465,  466,    0,  470,  465,    0,  467,  470,  583,
      464,  467,  469,  466,  584,  468,  469,  470,  466,  469,
        0,  472,  468,  467,  470,  472,  468,  467,  586,    0,
      473,  470,  469,  471,  473,  470,  475,  471,  587,  469,
      475,  472,  468,  469,  470,  475,  469,  471,  472,  588,

      473,  470,  472,  471,  474,  586,  475,  473,  474,  469,
      471,  473,  474,  475,  471,  587,  478,  475,  472,  589,
      478,  476,  475,  590,  471,  476,  588,  473,  474,  478,
      471,  474,  476,  475,  477,  474,  478,  591,  477,  474,
        0,  476,  477,  478,    0,  592,  589,  478,  476,  479,
      590,  593,  476,  479,  477,  474,  478,  479,  594,  476,
        0,  477,  480,  478,  591,  477,  480,  481,  476,  477,
      481,  481,  592,  479,    0,  595,  479,  480,  593,  482,
      479,  477,  480,  482,  479,  594,  482,  481,  483,  480,
        0,  484,  483,  480,  481,  484,    0,  481,  481,  482,

      479,  484,  595,  485,  480,    0,  482,  485,  483,  480,
      482,  484,  486,  482,  481,  483,  486,  488,  484,  483,
        0,  488,  484,  485,  488,    0,  482,  487,  484,    0,
      485,  487,  486,    0,  485,  483,  597,  488,  484,  486,
      598,    0,  489,  486,  488,  487,  489,  487,  488,    0,
      485,  488,  576,  576,  487,  599,  490,  489,  487,  486,
      490,  491,  489,  597,  488,  491,  492,  598,  491,  489,
      492,  490,  487,  489,  487,    0,  490,  492,    0,  576,
      576,  491,  599,  490,  489,  600,  492,  490,  491,  489,
      493,    0,  491,  492,  493,  491,  495,  492,  490,  601,

      495,  604,  494,  490,  492,  493,  494,    0,  491,  605,
      493,  494,  600,  492,  496,  497,  495,  493,  496,  497,
        0,  493,  494,  495,    0,  606,  601,  495,  604,  494,
      608,  609,  493,  494,  496,  497,  605,  493,  494,    0,
        0,  496,  497,  495,  498,  496,  497,  499,  498,  494,
        0,  499,  606,  498,    0,  610,  499,  608,  609,    0,
      611,  496,  497,  612,  498,  613,  501,  499,  503,  500,
      501,  498,  503,  500,  499,  498,  501,  503,  499,  500,
      498,  500,  610,  499,    0,  614,  501,  611,  503,  500,
      612,  498,  613,  501,  499,  503,  500,  501,    0,  503,

      500,  502,  615,  501,  503,  502,  500,  504,  500,  502,
        0,  504,  614,  501,    0,  503,  500,  506,  505,    0,
      505,  506,  617,  504,  505,  502,  507,  504,  502,  615,
      507,  619,  502,  735,  504,  506,  502,  506,  504,  509,
      505,  507,  509,  509,  506,  505,  507,  505,  506,  617,
      504,  505,  502,  507,  504,  737,    0,  507,  619,  509,
      735,  510,  506,  508,  506,  510,  509,  505,  507,  509,
      509,  508,    0,  507,  510,  508,  622,    0,  508,  624,
      622,  510,  737,  624,    0,  739,  509,  740,  510,  622,
      508,  623,  510,  625,    0,  623,  622,  625,  508,  624,

      741,  510,  508,  622,  623,  508,  624,  622,  510,  742,
      624,  623,  739,  625,  740,  626,  622,  743,  623,  626,
      625,  627,  623,  622,  625,  627,  624,  741,  626,  628,
      627,  623,    0,  628,    0,  626,  742,  744,  623,  745,
      625,  627,  626,    0,  743,  747,  626,  630,  627,  628,
      629,  630,  627,    0,  629,  626,  628,  627,    0,  629,
      628,  631,  626,  748,  744,  631,  745,  630,  627,  631,
      629,  632,  747,    0,  630,  632,  628,  629,  630,  633,
      634,  629,    0,  633,  634,  631,  629,  749,  631,  750,
      748,  632,  631,  751,  630,  753,  631,  629,  632,  633,

      634,  635,  632,  754,  636,  635,  633,  634,  636,  635,
      633,  634,  631,  638,  749,  755,  750,  638,  632,  639,
      751,  635,  753,  639,  636,  637,  633,  634,  635,  637,
      754,  636,  635,  638,  639,  636,  635,    0,  637,  639,
      638,  756,  755,  640,  638,  637,  639,  640,  635,  641,
      639,  636,  637,  641,    0,  642,  637,  640,  757,  642,
      638,  639,  642,  640,  641,  637,  639,  644,  756,  641,
      640,  644,  637,  643,  640,  642,  641,  643,    0,  758,
      641,  643,  642,  644,  640,  757,  642,  644,    0,  642,
      640,  641,    0,  643,  644,  646,  641,  645,  644,  646,

      643,  645,  642,  646,  643,  647,  758,  759,  643,  647,
      644,  649,  645,    0,  644,  649,    0,  645,  647,  646,
      643,  648,  646,  648,  645,  647,  646,  648,  645,  760,
      646,  649,  647,  650,  759,  761,  647,  650,  649,  645,
      650,  762,  649,  648,  645,  647,  646,  765,  648,    0,
      648,  651,  647,  650,  648,  651,  760,  652,  649,    0,
      650,  652,  761,  766,  650,  653,    0,  650,  762,  653,
      648,  651,  768,  770,  765,  654,  653,  652,  651,  654,
      650,  773,  651,    0,  652,  653,  654,    0,  652,  655,
      766,  774,  653,  655,  776,  654,  653,  659,  651,  768,

      770,  659,  654,  653,  652,  655,  654,  657,  773,  655,
      656,  657,  653,  654,  656,  657,  655,  659,  774,  658,
      655,  776,  654,  658,  659,  656,  781,  658,  659,  660,
      656,  657,  655,  660,  657,    0,  655,  656,  657,  783,
        0,  656,  657,  658,  659,  775,  658,  661,  775,  660,
      658,  661,  656,  781,  658,  662,  660,  656,  657,  662,
      660,  663,  661,  662,  664,  663,  783,  661,  664,  665,
      658,    0,  775,  665,  661,  775,  660,  665,  661,  662,
      784,  663,  662,  667,  664,    0,  662,  667,  663,  661,
      662,  664,  663,  665,  661,  664,  665,  669,  666,  785,

      665,  669,  666,  667,  665,    0,  662,  784,  663,  666,
      667,  664,  668,  788,  667,  670,  668,  669,  666,  670,
      665,  668,  789,    0,  669,  666,  785,  671,  669,  666,
      667,  671,  668,  790,  791,  670,  666,  672,    0,  668,
      788,  672,  670,  668,  669,  666,  670,  671,  668,  789,
      672,  673,  674,    0,  671,  673,  674,  672,  671,  668,
      790,  791,  670,  792,  672,  674,    0,  793,  672,    0,
      673,  673,  674,  795,  671,  796,  675,  672,  673,  674,
      675,  677,  673,  674,  672,  677,    0,  797,    0,  675,
      792,  676,  674,  676,  793,  676,  675,  673,  673,  674,

      795,  677,  796,  675,  676,  679,  678,  675,  677,  679,
      678,  676,  677,  678,  797,  680,  675,    0,  676,  680,
      676,    0,  676,  675,    0,  679,  678,    0,  677,    0,
      681,  676,  679,  678,  681,  680,  679,  678,  676,  682,
      678,  798,  680,  682,  683,  799,  680,  685,  683,    0,
      681,  685,  679,  678,  682,  800,  684,  681,    0,  682,
      684,  681,  680,  684,  683,  686,  682,  685,  798,  686,
      682,  683,  799,    0,  685,  683,  684,  681,  685,  801,
      802,  682,  800,  684,  687,  686,  682,  684,  687,  689,
      684,  683,  686,  689,  685,  803,  686,  688,  687,  687,

      688,  688,  689,  684,  687,    0,  801,  802,  804,  689,
      690,  687,  686,  805,  690,  687,  689,  688,  806,  692,
      689,  807,  803,  692,  688,  687,  687,  688,  688,  689,
      690,  687,  691,  809,  691,  804,  689,  690,  691,  692,
      805,  690,    0,  693,  688,  806,  692,  693,  807,  694,
      692,  696,  810,  694,  691,  696,  693,  690,  811,  691,
      809,  691,  694,  693,  695,  691,  692,  813,  695,  694,
      693,  696,  695,  814,  693,    0,  694,  815,  696,  810,
      694,  691,  696,  693,  695,  811,    0,    0,  699,  694,
      693,  695,  699,  697,  813,  695,  694,  697,  696,  695,

      814,  697,  698,  699,  815,  700,  698,    0,  699,  700,
      698,  695,    0,  700,  701,  699,    0,  697,  701,  699,
      697,    0,  901,  903,  697,  700,  698,  701,  697,  698,
      699,  905,  700,  698,  701,  699,  700,  698,    0,  704,
      700,  701,  702,  704,  697,  701,  702,  704,  703,  901,
      903,  703,  700,  698,  701,  703,  705,  702,  905,  704,
      705,  701,  702,    0,  906,  705,  704,    0,  707,  702,
      704,  703,  707,  702,  704,  703,  705,  908,  703,  706,
      910,  706,  703,  705,  702,  706,  704,  705,  707,  702,
      708,  906,  705,  911,  708,  707,  709,  708,  703,  707,

      709,  706,    0,  705,  908,  710,  706,  910,  706,  710,
      708,  912,  706,  913,  711,  707,  709,  708,  711,    0,
      911,  708,    0,  709,  708,  710,  713,  709,  706,  712,
      713,  714,  710,  712,  711,  714,  710,  708,  912,  712,
      913,  711,    0,  709,  915,  711,  713,  917,    0,  712,
      715,  714,  710,  713,  715,  716,  712,  713,  714,  716,
      712,  711,  714,  718,  715,  717,  712,  718,    0,  717,
      715,  915,    0,  713,  917,  716,  712,  715,  714,  717,
        0,  715,  716,  718,    0,  717,  716,  719,    0,  719,
      718,  715,  717,  719,  718,  720,  717,  715,    0,  720,

        0,  721,  716,  722,  720,  721,  717,  722,    0,  719,
      718,  722,  717,    0,  719,  720,  719,  721,    0,  725,
      719,  721,  720,  725,  921,  723,  720,  722,  721,  723,
      722,  720,  721,  724,  722,  724,  719,  724,  722,  725,
      723,  923,  720,  727,  721,  723,  725,  727,  721,  924,
      725,  921,  723,  724,  722,  726,  723,  728,  726,  726,
      724,  728,  724,  727,  724,    0,  725,  723,  923,    0,
      727,  930,  723,  728,  727,  726,  924,  728,  931,  729,
      724,  932,  726,  729,  728,  726,  726,  730,  728,  731,
      727,  730,  732,  731,  935,  936,  732,  817,  930,  729,

      728,  817,  726,  938,  728,  931,  729,  730,  932,  731,
      729,  818,  732,  939,  730,  818,  731,  817,  730,  732,
      731,  935,  936,  732,  817,  819,  729,  940,  817,  819,
      938,  818,  941,  820,  730,  943,  731,  820,  818,  732,
      939,  944,  818,  821,  817,  819,  819,  821,  945,  948,
        0,  822,  819,  820,  940,  822,  819,  823,  818,  941,
      820,  823,  943,  821,  820,    0,  950,    0,  944,    0,
      821,  822,  819,  819,  821,  945,  948,  823,  822,  824,
      820,  952,  822,  824,  823,    0,  825,  825,  823,  953,
      821,  825,  826,  950,  824,  954,  826,  955,  822,  824,

      956,  826,    0,  961,  823,  827,  824,  825,  952,  827,
      824,  962,  826,  825,  825, 1030,  953,    0,  825,  826,
      827,  824,  954,  826,  955,  827,  824,  956,  826,  829,
      961,  828,  827,  829,  825,  828,  827,    0,  962,  826,
     1031,  828, 1030, 1034,  830, 1035,  831,  827,  830,  829,
      831,  828,  827, 1040,    0, 1041,  829,  833,  828,  832,
      829,  833,  828,  832,  830,  833,  831, 1031,  828,  832,
     1034,  830, 1035,  831,    0,  830,  829,  831,  828,  832,
     1040,  833, 1041, 1043,  833,  835,  832,    0,  833,  835,
      832,  830,  833,  831,  834,  836,  832, 1044,  834,  836,

      837,  834,    0,  838,  837,  835,  832,  838,  833, 1048,
     1043,    0,  835, 1049,  834,  836,  835,    0,  838, 1051,
      837,  834,  836,  838, 1044,  834,  836,  837,  834,  839,
      838,  837,  835,  839,  838,  840, 1048,    0,  839,  840,
     1049,  834,  836, 1053,  841,  838, 1051,  837,  841,  839,
      838, 1054, 1056,  842,  843,  840,  839,  842,  843, 1057,
      839,    0,  840,  844,  841,  839,  840,  844,  842,  843,
     1053,  841, 1096,  842,  843,  841,  839,  844, 1054, 1056,
      842,  843,  840,  844,  842,  843, 1057,  846,  845,  846,
      844,  841,  845,  846,  844,  842,  843, 1099,  847, 1096,

      842,  843,  847,  848,  844, 1102,    0,  848,  845,  846,
      844, 1106,    0,  849,  846,  845,  846,  849,  847,  845,
      846, 1107,  851,  848, 1099,  847,  851,    0,  849,  847,
      848, 1108, 1102,  849,  848,  845,  846,  853, 1106,  850,
      849,  853,  851,  850,  849,  847,  850,  854, 1107,  851,
      848,  854,  852,  851,  852,  849,  852,  853, 1108,  850,
      849, 1125,  854, 1127,  853, 1130,  850,  854,  853,  851,
      850,  855,  852,  850,  854,  855,  856, 1139,  854,  852,
      856,  852,    0,  852,  853,    0,  850,    0, 1125,  854,
     1127,  855, 1130,  857,  854,    0,  856,  857,  855,  852,

        0,  858,  855,  856, 1139,  858,    0,  856,  857,    0,
      860,    0,    0,  857,  860,    0,    0,  860,  855,    0,
      857,  858,  859,  856,  857,  861,  859,  862,  858,  861,
      860,  862,  858,    0,    0,  857,  859,  860,    0,  859,
      857,  860,  859,    0,  860,  861,    0,  862,  858,  859,
        0,  863,  861,  859,  862,  863,  861,  860,  862,    0,
      864,  865,    0,  859,  864,  865,  859,    0,    0,  859,
        0,  863,  861,  866,  862,  867,    0,  866,  863,  867,
      864,  865,  863,  867,    0,    0,    0,  864,  865,    0,
        0,  864,  865,  866,    0,    0,    0,    0,  863,  867,

      866,  869,  867,    0,  866,  869,  867,  864,  865,  868,
      867,  870,  868,  868,  871,  870,  869,    0,  871,    0,
      866,  869,    0,    0,    0,    0,  867,    0,  869,  868,
        0,  870,  869,  872,  871,    0,  868,  872,  870,  868,
      868,  871,  870,  869,    0,  871,  873,    0,  869,    0,
      873,  875,    0,  872,    0,  875,  868,    0,  870,  873,
      872,  871,    0,  874,  872,  876,  873,  874,  877,  876,
        0,  875,  877,  873,    0,    0,  874,  873,  875,    0,
      872,    0,  875,  874,    0,  876,  873,  878,  877,    0,
      874,  878,  876,  873,  874,  877,  876,  879,  875,  877,

        0,  879,    0,  874,    0,  879,    0,  878,    0,  880,
      874,    0,  876,  880,  878,  877,    0,  880,  878,    0,
        0,  879,  881,  881,  879,  883,  882,  881,  879,  883,
      882,    0,  879,  880,  878,    0,  880,  884,  884,    0,
      880,  882,  884,  881,  880,  883,  882,  885,  879,  881,
      881,  885,  883,  882,  881,  885,  883,  882,  884,    0,
      880,    0,    0,  886,  884,  884,    0,  886,  882,  884,
      881,  885,  883,  882,  885,  887,  888,  886,  885,  887,
      888,    0,  885,  886,    0,  884,    0,    0,  887,  890,
      886,  888,    0,  890,  886,  887,  888,  890,  885,    0,

        0,    0,  887,  888,  886,  889,  887,  888,  892,  889,
      886,    0,  892,  890,  889,  887,  890,  893,  888,    0,
      890,  893,  887,  888,  890,  889,  891,    0,  892,  895,
      891,    0,  889,  895,  891,  892,  889,  893,    0,  892,
      890,  889,  894,  894,  893,    0,    0,  894,  893,  895,
      891,    0,  889,  891,    0,  892,  895,  891,  896,    0,
      895,  891,  896,  894,  893,    0,    0,  897,    0,  894,
      894,  897,    0,    0,  894,  898,  895,  891,  896,  898,
      899,  897,    0,  898,  899,  896,    0,  897,  899,  896,
      894,    0,  900,  963,  897,    0,  900,  963,  897,  898,

        0,    0,  898,    0,  899,  896,  898,  899,  897,    0,
      898,  899,  900,  963,  897,  899,    0,  964,  965,  900,
      963,  964,  965,  900,  963,    0,  898,  965,    0,    0,
      966,  899,  967,    0,  966,    0,  967,  964,  965,  900,
      963,    0,  968,    0,  964,  965,  968,  969,  964,  965,
      966,  969,  967,    0,  965,    0,  968,  966,    0,  967,
        0,  966,  968,  967,  964,  965,  971,  969,  970,  968,
      971,    0,  970,  968,  969,  970,  972,  966,  969,  967,
      972,    0,    0,  968,  972,    0,  971,    0,  970,  968,
        0,    0,    0,  971,  969,  970,  972,  971,  973,  970,

      973,  974,  970,  972,  973,  974,  976,  972,  974,    0,
      976,  972,    0,  971,  975,  970,    0,    0,  975,    0,
      973,  974,    0,  972,    0,  973,  976,  973,  974,  975,
        0,  973,  974,  976,  975,  974,  977,  976,  978,  977,
        0,  975,  978,  977,    0,  975,    0,  973,  974,  979,
        0,  979,    0,  976,    0,  979,  975,    0,  978,  977,
      980,  975,    0,  977,  980,  978,  977,    0,  981,  978,
      977,  979,  981,  982,    0,    0,  979,  982,  979,    0,
      980,    0,  979,    0,    0,  978,  977,  980,  981,    0,
      983,  980,  984,  982,  983,  981,  984,    0,  979,  981,

      982,    0,  985,    0,  982,  987,  985,  980,    0,  987,
      983,  985,  984,    0,    0,  981,    0,  983,    0,  984,
      982,  983,  985,  984,  988,  987,  986,  989,  988,  985,
      986,  989,  987,  985,    0,    0,  987,  983,  985,  984,
        0,  986,    0,    0,  988,    0,  986,  989,    0,  985,
        0,  988,  987,  986,  989,  988,  990,  986,  989,  991,
      990,  993,  992,  991,    0,  993,  992,    0,  986,    0,
        0,  988,    0,  986,  989,  992,  990,    0,    0,  991,
      995,  993,  992,  990,  995,    0,  991,  990,  993,  992,
      991,  994,  993,  992,  996,  994,    0,  997,  996,  994,

      995,  997,  992,  990,  997,    0,  991,  995,  993,  992,
        0,  995,  998,    0,  996,  994,  998,  997,  994,    0,
      998,  996,  994,    0,  997,  996,  994,  995,  997,  999,
     1000,  997,    0,  999, 1000,    0,  998,    0,    0,  998,
        0,  996,  994,  998,  997, 1000,    0,  998, 1001,  999,
     1000, 1002, 1001,    0, 1003, 1002,  999, 1000, 1003,    0,
      999, 1000,    0,  998,    0,    0, 1004, 1003, 1001,    0,
     1004, 1002, 1000,    0, 1003, 1001,  999, 1000, 1002, 1001,
        0, 1003, 1002, 1008,    0, 1003, 1004, 1008,    0,    0,
     1005,    0, 1005, 1004, 1003, 1001, 1005, 1004, 1002,    0,

     1006, 1003, 1006, 1008, 1007, 1009, 1006,    0, 1007, 1009,
     1008,    0, 1005, 1004, 1008,    0,    0, 1005, 1007, 1005,
        0,    0, 1006, 1005, 1007, 1009,    0, 1006,    0, 1006,
     1008, 1007, 1009, 1006, 1010, 1007, 1009, 1011, 1010, 1005,
     1012, 1011, 1013, 1010, 1012, 1007, 1013, 1012,    0, 1006,
        0, 1007, 1009,    0, 1010, 1014,    0, 1011,    0, 1014,
     1012, 1010, 1013, 1014, 1011, 1010,    0, 1012, 1011, 1013,
     1010, 1012, 1015, 1013, 1012,    0, 1015,    0,    0, 1014,
     1015, 1010, 1014,    0, 1011,    0, 1014, 1012,    0, 1013,
     1014,    0, 1017, 1016, 1017,    0, 1015, 1016, 1017, 1015,

        0,    0,    0, 1015,    0,    0, 1014, 1015, 1016,    0,
        0, 1018, 1019, 1016, 1017, 1018, 1019,    0,    0, 1017,
     1016, 1017,    0, 1015, 1016, 1017, 1018,    0,    0, 1020,
     1021, 1018, 1019, 1020, 1021, 1016,    0,    0, 1018, 1019,
     1016, 1017, 1018, 1019, 1022,    0,    0,    0, 1022, 1020,
     1021,    0,    0, 1018,    0,    0, 1020, 1021, 1018, 1019,
     1020, 1021, 1060, 1024, 1022, 1023, 1060, 1024, 1061, 1023,
     1024, 1022, 1061,    0,    0, 1022, 1020, 1021, 1023,    0,
     1062,    0, 1060, 1024, 1062, 1023,    0,    0, 1061, 1060,
     1024, 1022, 1023, 1060, 1024, 1061, 1023, 1024, 1063, 1061,

     1062,    0, 1063,    0, 1064, 1023,    0, 1062, 1064, 1060,
     1024, 1062, 1023, 1065,    0, 1061, 1067, 1065, 1063,    0,
     1067,    0, 1066,    0, 1064, 1063, 1066, 1062, 1068, 1063,
     1066, 1064, 1068, 1065, 1069, 1064, 1067,    0, 1069,    0,
     1065,    0,    0, 1067, 1065, 1063, 1066, 1067, 1068, 1066,
        0, 1064, 1070, 1066, 1069, 1068, 1070, 1066, 1071, 1068,
     1065, 1069, 1071, 1067, 1072, 1069, 1073, 1070, 1072,    0,
     1073,    0, 1070, 1066,    0, 1068, 1074,    0, 1071, 1070,
     1074, 1069,    0, 1070, 1072, 1071, 1073,    0, 1077, 1071,
        0, 1072, 1077, 1073, 1070, 1072, 1074, 1073, 1075, 1070,

     1075,    0, 1076, 1074, 1075, 1071, 1076, 1074, 1077, 1076,
        0, 1072, 1079, 1073, 1080, 1077, 1079, 1078, 1080, 1077,
     1075, 1078, 1076, 1074,    0, 1075,    0, 1075,    0, 1076,
     1078, 1075, 1079, 1076, 1080, 1077, 1076, 1078, 1081, 1079,
        0, 1080, 1081, 1079, 1078, 1080, 1082, 1075, 1078, 1076,
     1082, 1085, 1083,    0,    0, 1085, 1083, 1078, 1081, 1079,
        0, 1080,    0,    0, 1078, 1081, 1082, 1083,    0, 1081,
     1084, 1085, 1083, 1082, 1084,    0, 1084, 1082, 1085, 1083,
     1086,    0, 1085, 1083, 1086, 1081,    0,    0, 1087,    0,
     1084,    0, 1087, 1082, 1083, 1086,    0, 1084, 1085, 1083,

     1086, 1084,    0, 1084,    0, 1088, 1089, 1086, 1087, 1088,
     1089, 1086,    0,    0, 1089, 1087,    0, 1084, 1088, 1087,
     1090,    0, 1086,    0, 1090, 1088, 1089, 1086,    0,    0,
        0,    0, 1088, 1089, 1091, 1087, 1088, 1089, 1091, 1092,
     1090, 1089, 1093, 1092, 1094, 1088, 1093, 1090, 1094, 1091,
        0, 1090, 1088, 1089, 1091,    0,    0,    0,    0, 1092,
        0, 1091, 1093,    0, 1094, 1091, 1092, 1090, 1110, 1093,
     1092, 1094, 1110, 1093,    0, 1094, 1091,    0, 1111,    0,
     1112, 1091, 1111, 1113, 1112,    0, 1092, 1113, 1110, 1093,
        0, 1094,    0, 1111,    0, 1110,    0, 1114, 1111, 1110,

     1112, 1114, 1115, 1113,    0, 1111, 1115, 1112,    0, 1111,
     1113, 1112, 1114,    0, 1113, 1110,    0, 1114,    0,    0,
     1111,    0, 1115,    0, 1114, 1111,    0, 1112, 1114, 1115,
     1113, 1116, 1117, 1115, 1118, 1116, 1117, 1119, 1118, 1114,
        0, 1119,    0,    0, 1114, 1117, 1120,    0,    0, 1115,
     1120, 1116, 1117,    0, 1118,    0, 1121, 1119, 1116, 1117,
     1121, 1118, 1116, 1117, 1119, 1118, 1120,    0, 1119,    0,
     1123, 1122, 1117, 1120, 1123, 1122, 1121, 1120, 1116, 1117,
        0, 1118, 1122, 1121, 1119, 1124,    0, 1121, 1131, 1124,
     1123, 1122, 1131, 1120,    0,    0,    0, 1123, 1122,    0,

     1132, 1123, 1122, 1121, 1132, 1124,    0,    0, 1131, 1122,
     1133,    0, 1124,    0, 1133, 1131, 1124, 1123, 1122, 1131,
     1132,    0, 1134,    0, 1133, 1135, 1134, 1132,    0, 1135,
     1133, 1132, 1124,    0, 1136, 1131,    0, 1133, 1136, 1140,
        0, 1133, 1134, 1140, 1136, 1135,    0, 1132,    0, 1134,
        0, 1133, 1135, 1134, 1136,    0, 1135, 1133, 1141, 1140,
        0, 1136, 1141, 1144, 1142, 1136, 1140, 1144, 1142, 1134,
     1140, 1136, 1135, 1142,    0,    0,    0,    0, 1141,    0,
        0, 1136,    0, 1144, 1142, 1141, 1140,    0,    0, 1141,
     1144, 1142,    0,    0, 1144, 1142,    0,    0,    0,    0,

     1142,    0,    0,    0,    0, 1141,    0,    0,    0,    0,
     1144, 1142, 1146, 1146, 1146, 1146, 1146, 1147,    0,    0,
     1147, 1147, 1149, 1149, 1149,    0, 1149, 1150,    0, 1150,
     1150, 1150, 1151,    0, 1151, 1151, 1151, 1152,    0, 1152,
     1152, 1152, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,

     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 2378 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2392 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 58 "flex_lexer.l"


#line 2679 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1146 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1145 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 64 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(QUARTER)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(TINYINT)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 147:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 154:
#line 220 "flex_lexer.l"
case 155:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 225 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 230 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 236 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 241 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 242 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 243 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 244 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 245 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 247 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 250 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3570 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1146 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1146 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1145);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 250 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

