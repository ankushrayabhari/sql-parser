#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 165
#define YY_END_OF_BUFFER 166
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1158] =
    {   0,
        0,    0,  162,  162,    2,    2,  166,  164,    4,    4,
      164,  164,  154,  160,  154,  154,  157,  154,  154,  154,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  154,  162,  163,    2,    2,
        3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    4,  149,    0,
        1,  157,  156,  155,  151,  150,  148,  152,  159,  159,

      159,  159,  159,  159,  127,  159,  159,  159,  128,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  129,  159,  159,  130,  131,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      132,  133,  134,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  135,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  153,  162,  161,    2,    2,    2,    2,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      158,  155,  115,  159,  116,  159,  159,  117,  159,  118,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,

      159,  159,  159,  159,  159,  139,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  119,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  120,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      121,  159,  159,  122,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  123,  159,  159,  124,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  125,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  126,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  159,  159,  159,  159,  159,  159,
      159,  159,  159,   84,  159,   85,   47,   86,  159,  159,
      159,   87,  159,  159,   88,  159,  159,  159,  159,  159,
       90,  159,  159,  159,   91,   92,  159,  159,  159,  159,
      159,  159,  159,   93,  159,  159,   94,   95,  159,  159,
       96,  159,   97,  138,  159,  159,  159,  159,  159,  159,
       98,  159,   99,  100,  101,  159,  103,  159,  104,  159,
      159,  159,  159,  106,  159,  159,  159,  159,  159,  107,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,

      108,  159,  159,  159,  159,  159,  109,  110,  111,  159,
      159,  142,  159,  159,  159,  159,  159,  159,  159,  159,
      112,  159,  113,  159,  114,  141,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   64,   65,
      159,   66,  159,  145,  159,  159,  159,  159,  159,  159,
      159,  159,   67,  159,  159,  159,  159,  159,   68,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  143,
       69,  159,  159,   70,  159,  102,  159,   71,   72,  159,
      159,  159,  159,   73,   74,   75,   76,  159,  140,  159,
      159,  159,   77,   78,  159,  159,  159,  159,  159,  159,

       79,  159,  159,  159,  159,  159,  159,  159,   80,  159,
      159,  159,  159,  159,   81,  159,  159,  159,   82,  159,
      159,  159,   83,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,  159,   37,
      159,  105,  159,  159,   38,  147,  159,   39,  159,  159,
      159,  159,   40,  159,   41,  159,   42,   43,   44,  159,
       45,  159,  159,   48,   49,   50,   51,   52,  159,  159,
      159,   53,  137,  159,  159,   54,  159,  159,  159,  159,
       55,  159,  159,   56,  136,   57,  159,   58,  159,   59,
      159,  159,  159,  159,  159,   60,   61,   62,   63,  159,
      159,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   16,   17,   29,   18,   19,   20,
      159,  159,   23,   21,  159,  159,   22,   24,   46,   25,
      159,  159,   30,  159,  159,   31,   32,   26,  159,  159,
       33,  159,   34,  159,  159,   27,  159,  159,   35,   36,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,   89,  159,   11,   12,
      159,   10,   13,  159,   14,  146,   28,  159,  159,  159,
       15,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  159,    7,  159,    8,
        9,  159,    2,    2,    2,    2,    2,    2,    5,    6,
      159,    2,    2,    2,  144,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1165] =
    {   0,
        0,    0,  394,  391,   67,    0,  394, 7452,  133,  135,
      379,    0, 7452, 7452,  131,  380,  133,  132,  371,  343,
      129,  129,  138,  154,  165,  216,  146,  193,  226,  125,
      144,  188,  218,  221,  262,  261,  130,  242,  308,  351,
      271,  290,  179,    0,  187,  285,    0,  339,    0,  147,
      211,  323,  294,    0,    0,  155,  274,  213,  213,  257,
      247,  409,  476,  530,  582,  630,  682,  319,  411,  725,
      416,  283,  340,  468,  776,  825,  487,  404,  481,  871,
      923,  468,  535,  577,  539,  584,  187,  292, 7452,  226,
     7452,  297,  210,  208, 7452, 7452, 7452, 7452,    0,  222,

      228,  289,  301,  259,  327,  623,  334,  329,    0,  334,
      361,  634,  401,  410,  683,  479,  342,  352,  365,  410,
      429,  731,  477,  482,  519,  519,  526,  530,  531,  534,
      579,  538,  567,    0,  581,  578,  768,  582,  595,  581,
      605,  640,  684,  614,  623,  626,  621,  632,  649,  664,
      687,    0,  692,  679,  683,  704,  710,  705,  729,  701,
      729,  744,  780,  738,  753,  741,  761,  767,  777,  780,
      789,  777,  821,  796,  803,  814,  826,  836,  831,  817,
      844, 7452,    0, 7452,    0,  307,    0,  206,    0,  378,
      198,  160,    0,    0,    0,    0,  873,  885,  924,  928,

      969,  977,  988, 1028, 1018, 1039, 1064,  969, 1070, 1104,
     1055, 1099, 1155, 1152, 1154, 1148, 1193, 1204, 1201, 1253,
     1247, 1251, 1294, 1273, 1302, 1296, 1307, 1336, 1336, 1350,
     1365, 1386, 1390, 1420, 1469, 1409, 1415, 1434, 1473, 1516,
     1564, 1478, 1491, 1527, 1563, 1581, 1574, 1615, 1613, 1618,
     1631, 1663, 1664, 1672, 1710, 1698, 1708, 1717, 1736, 1756,
     1799, 1765, 1807, 1813, 1819, 1855, 1853, 1866, 1893, 1897,
     1934, 1942, 1946, 1905, 1972, 1989, 1990, 2015, 2001,    0,
     7452,  148,    0,  843,    0,  851,  865,    0,  884,    0,
      876,  883,  870,  886,  887,  896, 1206,  912,  913,  923,

      925,  928,  981,  967,  985,    0,  982,  990, 1000, 1036,
      999, 1026, 1030, 1084, 1078, 1090,    0, 1099, 1097, 1100,
     1091, 1099, 1107, 1113, 1149, 1161, 1152, 1197, 1202, 1217,
     1200, 1214, 1215, 1207, 1212, 1222, 1259, 1272, 1308, 1320,
     1348, 1308, 1343,    0, 1346, 1362, 1361, 1372, 1380, 1404,
     1407, 1396, 1417, 1432,    0, 1446, 1450, 1452, 1469, 1470,
     1476, 1476, 1497, 1512, 1510, 1530, 1515, 1536, 1534, 1542,
     1538, 1558,    0, 1553, 1567, 1571, 1597, 1609, 1622, 1620,
     1627, 1642, 1646,    0, 1661, 1689, 1750, 1676, 1700, 1720,
     1724, 1766, 1747, 1756, 1771, 1770, 1761,    0,  145, 2037,

     2039, 2044, 2068, 2073, 2087, 2087, 2122, 2126, 2130, 2154,
     2169, 2134, 2169, 2209, 2208, 2213, 2249, 2251, 2268, 2273,
     2293, 2304, 2316, 2314, 2342, 2358, 2370, 2396, 2372, 2410,
     2418, 2440, 2454, 2459, 2443, 2472, 2500, 2488, 2504, 2536,
     2507, 2551, 2562, 2571, 2587, 2600, 2606, 2622, 2641, 2629,
     2653, 2676, 2691, 2695, 2692, 2707, 2726, 2741, 2739, 2749,
     2782, 2792, 2786, 2799, 2838, 2844, 2849, 2853, 2879, 2890,
     2895, 2900, 2920, 2936, 2939, 2947, 2977, 2986, 2979, 3020,
     3028, 3042, 3047, 3075, 3090, 3082, 3104, 3122, 3134, 3136,
     3148, 3136, 3177, 3190, 3193, 3226, 3234, 3237, 3259, 3277,

     3285, 3284, 3319, 3317, 3331, 3356, 3363, 3372, 3382, 3410,
     3420, 3404, 3455, 3456, 1772, 1781, 1784, 1799, 1814, 1819,
     1848, 1848, 1863,    0, 1868,    0,    0,    0, 1861, 1867,
     1870,    0, 1899, 1907, 1925, 1961, 1961, 1985, 1990, 2011,
     2045, 2086, 2085, 2086,    0,    0, 2093, 2127, 2128, 2140,
     2164, 2194, 2192,    0, 2183, 2212,    0,    0, 2216, 2216,
        0, 2219,    0,    0, 2232, 2230, 2225, 2233, 2250, 2309,
        0, 2267,    0,    0,    0, 2267,    0, 2291,    0, 2317,
     2342, 2315, 2319,    0, 2339, 2340, 2353, 2362, 2369,    0,
     2382, 2390, 2393, 2426, 2435, 2447, 2491, 2500, 2508, 2532,

        0, 2526, 2536, 2538, 2562, 2554,    0,    0, 2563, 2601,
     2602,    0, 2620, 2612, 2612, 2665, 2667, 2681, 2693, 2712,
        0, 2706,    0, 2733,    0,    0, 3461, 3477, 3499, 3502,
     3508, 3507, 3524, 3551, 3553, 3558, 3573, 3596, 3601, 3605,
     3624, 3640, 3643, 3652, 3678, 3688, 3691, 3702, 3732, 3741,
     3743, 3779, 3784, 3795, 3813, 3820, 3829, 3838, 3862, 3871,
     3886, 3912, 3920, 3928, 3949, 3962, 3963, 3974, 3978, 4010,
     4016, 4021, 4025, 4036, 4062, 4068, 4083, 4073, 4108, 4120,
     4122, 4165, 4160, 4161, 4170, 4203, 4206, 4212, 4236, 4250,
     4254, 4256, 4290, 4298, 4310, 4331, 4350, 4339, 4359, 4371,

     4392, 4407, 4411, 4413, 4439, 4460, 4461, 4462, 4509, 4500,
     4502, 4543, 4544, 4547, 4555, 4587, 4595, 4596, 4609, 4621,
     4630, 4647, 4646, 4672, 4690, 4676, 4719, 4720, 4731, 4762,
     4766, 4771, 4802, 4805, 4815, 4826, 4834, 4852,    0,    0,
     2716,    0, 2743,    0, 2747, 2769, 2791, 2795, 2788, 2785,
     2792, 2804,    0, 2808, 2806, 2845, 2837, 2850,    0, 2856,
     2855, 2864, 2894, 2898, 2899, 2902, 2928, 2959, 2967,    0,
        0, 2953, 2976,    0, 2989,    0, 2986,    0,    0, 2988,
     3005, 3005, 2999,    0,    0,    0,    0, 3017,    0, 3025,
     3037, 3026,    0,    0, 3053, 3062, 3070, 3092, 3094, 3102,

        0, 3141, 3151, 3161, 3147, 3172, 3189, 3194, 3180, 3185,
     3186, 3211, 3234, 3242,    0, 3255, 3262, 3274,    0, 3270,
     3311, 3313,    0, 4860, 4874, 4882, 4896, 4904, 4918, 4932,
     4946, 4944, 4972, 4988, 4990, 5004, 5015, 5039, 5047, 5061,
     5072, 5082, 5073, 5107, 5115, 5133, 5122, 5145, 5147, 5173,
     5181, 5188, 5199, 5227, 5235, 5240, 5253, 5242, 5272, 5290,
     5296, 5314, 5332, 5338, 5356, 5307, 5374, 5380, 5398, 5416,
     5422, 5440, 5349, 5433, 5469, 5475, 5481, 5487, 5523, 5525,
     5534, 5538, 5539, 5569, 5577, 5591, 5589, 5607, 5636, 5638,
     5623, 5682, 5661, 5676, 5693, 5711, 5718, 5732, 5747, 5753,

     5761, 5775, 5799, 5800, 5804, 5811, 5829, 5857, 3313,    0,
     3306,    0, 3314, 3347, 3335,    0, 3350,    0, 3355, 3369,
     3368, 3372,    0, 3392,    0, 3405,    0,    0,    0, 3427,
        0, 3425, 3428,    0,    0,    0,    0,    0, 3432, 3449,
     3471,    0,    0, 3476, 3492,    0, 3490, 3513, 3507, 3553,
        0, 3577, 3600, 3602,    0,    0, 3613,    0, 3623,    0,
     3655, 3656, 3643, 3665, 3654,    0,    0,    0,    0, 3659,
     3669, 5854, 5868, 5870, 5889, 5893, 5918, 5912, 5933, 5947,
     5961, 5977, 5980, 6001, 6010, 6024, 6048, 6052, 6066, 6090,
     6094, 6108, 6119, 6133, 6138, 6154, 6168, 6184, 6192, 6198,

     6222, 6239, 6247, 6270, 6279, 6285, 6292, 6317, 6321, 6333,
     6335, 6349, 6364, 6368, 6387, 6413, 6406, 6425, 6448, 6449,
     6467, 6490, 6491, 6520, 6525, 6543, 6551, 6574, 6583, 6599,
     6605, 6614, 6630, 6643,    0,    0,    0,    0,    0,    0,
     3686, 3708,    0,    0, 3726, 3713,    0,    0,    0,    0,
     3737, 3738,    0, 3734, 3749,    0,    0,    0, 3746, 3757,
        0, 3780,    0, 3786, 3793,    0, 3788, 3804,    0,    0,
     6649, 6652, 6673, 6687, 6696, 6715, 6716, 6735, 6754, 6756,
     6770, 6785, 6788, 6810, 6824, 6829, 6838, 6845, 6863, 6877,
     6874, 6888, 6902, 6916, 6930, 6938, 6956, 6964, 6978, 6994,

     7020, 7016, 7039, 7041, 7063, 7082,    0, 3795,    0,    0,
     3800,    0,    0, 3828,    0,    0,    0, 3839, 3851, 3860,
        0, 7085, 7111, 7087, 7123, 7136, 7135, 7137, 7183, 7184,
     7185, 7189, 7227, 7228, 7230, 7242, 3867,    0, 3863,    0,
        0, 3873, 7268, 7276, 7278, 7297, 7311, 7290,    0,    0,
     3879, 7322, 7336, 7341,    0, 7357, 7452, 7421, 7426,  135,
     7431, 7436, 7441, 7446
    } ;

static const flex_int16_t yy_def[1165] =
    {   0,
     1157,    1, 1158, 1158, 1157,    5, 1157, 1157, 1157, 1157,
     1157, 1159, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1157, 1161, 1157, 1162, 1162,
     1157, 1162, 1163, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1164, 1164,   63,   63,   63,   64,   64,   64,   66,
       64,   63,   63,   63,   64,   64,   64,   76,   63,   63,
       64,   66,   64,   64,   64,   63, 1162, 1157, 1157, 1159,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1157, 1161, 1157, 1162, 1162, 1162, 1163, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162,   63,   63,   63,   66,

       64,   64,   64,   76,   76,   64,   64,   66,   64,   66,
       63,   63,   66,   66,   76,   63,   66,   66,   66,   63,
       66,   66,   63,   76,   63,   66,   63,   63,   66,   66,
       76,   76,   63,   63,   66,   66,   63,   63,   76,   76,
       76,   76,   76,   76,   76,   76,   66,   64,   76,   76,
       76,   76,   76,   64,   63,   64,   66,   66,   66,   64,
       66,   64,   64,   64,   64,   64,   66,   63,   66,   66,
       64,   66,   66,   63,   66,   63,   63,   63,   64, 1162,
     1157, 1157, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1162, 1162,   64,

       63,   63,   63,   66,   66,   64,   64,   64,   63,   63,
       63,   66,   66,  220,   64,   76,   76,   76,   63,   64,
       66,   63,   63,   66,   63,   64,   63,   63,   63,   63,
       63,   63,   63,   63,   64,   63,   63,   66,   66,   64,
       66,   63,   64,   64,   64,   66,   66,   76,   64,   63,
       63,   64,   64,   64,   63,   63,   63,   63,   76,   76,
       76,   76,   63,   63,   63,   64,   64,   64,   76,   76,
       76,   76,   66,   76,   66,   63,   63,   64,   66,   66,
       66,   64,   64,   64,   64,   66,   63,   63,   63,   63,
       63,   66,   66,   66,   66,   66,   66,   66,   63,   63,

       63,   66,   66,   63,   63,   64,   66,   76,   76,   76,
       76,   76,   64,   64, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160,   64,   64,   63,   63,
       64,   76,   63,   76,   63,   63,   64,   64,   64,   64,
       64,   63,   64,   64,   64,   66,   66,   66,   66,   76,
       76,   64,   64,   64,   63,   66,   66,   66,   66,   66,
       76,   76,   64,   64,   63,   63,   63,   64,   64,   64,
       64,   64,   64,   76,   76,   76,   63,   76,   66,   76,
       76,   76,   76,   66,   66,   66,   66,   66,   66,   66,
       66,   63,   66,   64,   64,   64,   64,   63,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       66,   66,   66,   66,   63,   63,   63,   63,   63,   63,
       66,   63,   66,   66,   66,   66,   76,   64,   64,   64,
       63,   64,   64,   76,   76,   63,   63,   63, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160,   63,   63,   63,   63,   63,   63,   63,
       63,   64,   64,   76,   76,   64,   63,   63,   63,   63,
       64,   66,   63,   63,   63,   63,   66,   63,   63,   63,
       63,   66,   63,   63,   63,   63,   63,   66,   66,   66,
       66,   66,   66,   66,   66,   63,   66,   66,   66,   66,
       66,   66,   63,   63,   64,   64,   64,   64,   64,   63,
       64,   64,   63,   63,   63,   63,   64,   64,   64,   64,
       63,   63,   64,   66,   64,   64,   66,   64,   64,   64,

       63,   63,   63,   63,   66,   64,   64,   64, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160,   63,   63,   66,   66,   66,   63,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   63,   63,   66,   66,   66,   66,   66,   66,

       66,   64,   63,   64,   64,   64,   66,   64,   64,   64,
       63,   63,   64,   64,   64,   64,   66,   66,   66,   66,
       66,   66,   66,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   66, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
       66,   66,   66,   66,   66,   66,   63,   64,   64,   64,
       63,   63,   63,   63,   63,   63,   63,   66,   66,   64,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   64,

       64,   64,   64,   63,   63,   63, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160,   63,   63,   63,   63,   63,   63,   63,   64,   64,
       64,   64,   63,   63,   63,   63, 1160, 1160, 1160, 1160,
     1160, 1160,   63,   63,   66,   66,   66,   63, 1160, 1160,
     1160,   63,   63,   66, 1160,   66,    0, 1157, 1157, 1157,
     1157, 1157, 1157, 1157
    } ;

static const flex_int16_t yy_nxt[7520] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   44,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   44,   46,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,

       82,   83,   84,   85,   86,   85,   49,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
       85,   86,   85,   87,   88,   88,   88,   88,   91,   99,
       92,   94,   92,   95,   96,  100,  106,  101,  186,   88,
      107,  110,  139,  102,  399,  103,  108,  282,  111,  104,
      105,  140,  189,  158,  190,  112,  109,  114,  113,  399,
      129,  115,  100,  106,  101,  116,  130,  107,  110,  139,
      102,  117,  103,  108,  118,  111,  104,  105,  140,  119,
      158,  120,  112,  109,  114,  113,  121,  129,  115,  179,

      180,  122,  116,  130,  181,  141,  131,  191,  117,  142,
      398,  118,   88,   88,  132,  143,  119,  282,  120,   93,
      133,  192,  190,  121,  193,  194,  179,  180,  122,  123,
      281,  181,  141,  131,  147,  144,  142,  124,  283,  145,
      125,  132,  143,  126,  134,  146,  127,  133,  148,  128,
      135,  136,  137,  280,  149,  150,  123,  138,  196,  159,
      284,  147,  144,  160,  124,  283,  145,  125,  195,  161,
      126,  134,  146,  127,  155,  148,  128,  135,  136,  137,
      151,  149,  150,  191,  138,  156,  159,  284,  152,  289,
      160,  157,  153,   88,   88,  154,  161,  174,  185,  175,

      238,  155,  176,  177,  197,   94,   92,  151,  186,   88,
      197,  178,  156,  285,  287,  152,  289,  288,  157,  153,
      197,  286,  154,  162,  174,  163,  175,  238,  164,  176,
      177,  197,  197,  165,  187,  166,  167,  197,  178,  197,
      285,  287,  290,  227,  288,  184,  197,  197,  286,  228,
      162,  182,  163,  294,   98,  164,  295,  239,  296,  197,
      165,  240,  166,  167,  168,  297,  197,  241,  169,  290,
      227,  170,  171,  197,  298,  314,  228,  197,  172,  315,
      294,  173,   97,  295,  239,  296,  192,  190,  240,   93,
       89,  168,  297, 1157,  241,  169,  316,   48,  170,  171,

       48,  298,  314, 1157,  197,  172,  315, 1157,  173,  185,
      185, 1157,  185,  185,  185,  185,  185,  185,  303,  185,
      185,  185,  197,  316,  229,  198,  317,  199,  304,  197,
      197,  197,  230,  200,  197,  201,  197,  256,  231,  202,
      203,  197,  305,  237,  318,  303,  197,  306, 1157,  197,
     1157,  229,  198,  317,  199,  304,  197,  197,  197,  230,
      200,  197,  201,  197,  256,  231,  202,  203,  197,  305,
      237,  318, 1157,  197,  306,  185,  185,  185, 1157,  185,
      185,  185,  185,  185,  185,  242,  185,  185,  185,  243,
     1157, 1157,  197,  204,  272,  244,  273,  205,  257,  274,

      253,  324,  258,  206,  197,  197,  325,  197,  259,  312,
      313,  254,  242,  207,  197, 1157,  243,  255,  197,  197,
      204,  272,  244,  273,  205,  257,  274,  253,  324,  258,
      206,  197,  197,  325,  197,  259,  312,  313,  254, 1157,
      207,  197,  185,  208,  255,  197,  326,  197,  275,  327,
      209,  197,  197,  328,  329,  197,  276,  210,  330,  197,
      211,  331,  197, 1157,  334,  197,  197,  197, 1157,  197,
      208, 1157, 1157,  326,  197,  275,  327,  209,  197,  197,
      328,  329,  197,  276,  210,  330,  197,  211,  331,  197,
      197,  334,  197,  197,  197,  212,  197,  277,  278,  213,

      335,  279,  336,  214,  197,  197,  337,  197,  342,  215,
      332,  197,  216,  333, 1157, 1157,  343,  197,  344,  197,
     1157,  197,  212,  345,  277,  278,  213,  335,  279,  336,
      214,  197,  197,  337,  197,  342,  215,  332,  197,  216,
      333,  291,  292,  343,  351,  344,  197,  197,  197,  352,
      345,  197,  353,  354,  217,  293,  218,  197,  299,  300,
      301,  219,  302,  346,  355,  347,  220,  197,  291,  292,
     1157,  351, 1157,  356,  197, 1157,  352,  357,  197,  353,
      354,  217,  293,  218,  197,  299,  300,  301,  219,  302,
      346,  355,  347,  220,  197,  221,  307,  348,  308,  349,

      356,  309,  197,  222,  357,  358,  223,  310,  359,  224,
      350,  360,  225,  361,  311,  226, 1157,  362,  365, 1157,
      368, 1157,  221,  307,  348,  308,  349,  363,  309,  197,
      222,  364,  358,  223,  310,  359,  224,  350,  360,  225,
      361,  311,  226,  232,  362,  365,  319,  368,  320,  233,
      234,  235,  321,  369,  363,  366,  236, 1157,  364,  322,
      367,  197, 1157,  323,  370,  374,  375, 1157, 1157, 1157,
      232,  376, 1157,  319,  377,  320,  233,  234,  235,  321,
      369,  378,  366,  236,  338, 1157,  322,  367,  197,  245,
      323,  370,  374,  375,  339,  371,  197,  381,  376,  340,

      341,  377,  379,  246,  372,  384,  197, 1157,  378,  247,
      248,  338,  373,  380,  382,  383,  245,  387, 1157,  389,
      388,  339,  371,  197,  381, 1157,  340,  341, 1157,  379,
      246,  372,  384,  197,  385,  390,  247,  248,  197,  373,
      380,  382,  383,  249,  387,  197,  389,  388,  395,  396,
      391,  250,  197,  393,  386,  251,  392,  397,  252, 1157,
      515,  385,  390, 1157, 1157,  197,  394, 1157,  516, 1157,
      249, 1157,  197, 1157, 1157,  395,  396,  391,  250,  197,
      393,  386,  251,  392,  397,  252,  260,  515,  261,  517,
      197,  262,  197,  394,  197,  516,  263,  518,  264,  265,

      197,  400,  197,  519,  520,  521,  197,  522,  197, 1157,
      197,  523,  197,  260, 1157,  261,  517,  197,  262,  197,
      524,  197,  197,  263,  518,  264,  265,  197,  400,  197,
      519,  520,  521,  197,  522,  197,  266,  197,  523,  197,
      267,  197,  528,  268,  269,  197,  529,  524,  530,  197,
      270,  197,  402,  271,  197, 1157,  401,  531, 1157,  197,
      403,  197, 1157,  266,  197,  532, 1157,  267,  197,  528,
      268,  269,  197,  529, 1157,  530, 1157,  270,  197,  402,
      271,  197,  404,  401,  531,  405,  197,  403,  197,  197,
      197,  197,  532,  413,  533,  197,  197,  197,  534,  197,

      414,  197,  535,  407,  197,  197,  536,  406,  197,  404,
     1157,  537,  405,  538,  541,  197,  197,  197,  197, 1157,
      413,  533,  197,  197,  197,  534,  197,  414,  197,  535,
      407,  197,  197,  536,  406,  197,  197,  411,  537, 1157,
      538,  541,  197,  542,  197,  197,  408,  409,  197, 1157,
     1157,  197,  197,  539,  197, 1157, 1157, 1157,  197,  197,
      410,  197,  543,  197,  411, 1157,  412, 1157,  540,  197,
      542,  197,  420,  408,  409,  197,  197,  197,  197,  197,
      539,  197,  421,  415,  197,  197,  197,  410,  197,  543,
      197,  197,  197,  412,  197,  540,  197,  197,  544,  420,

      197, 1157, 1157,  197,  197, 1157,  545,  546, 1157,  421,
      415,  197,  547, 1157,  548,  549,  197,  197,  197,  197,
      197,  197,  550,  551,  197,  544,  197,  197,  416,  417,
      418,  422,  419,  545,  546,  197,  423,  552, 1157,  547,
      197,  548,  549,  197,  553, 1157, 1157,  197, 1157,  550,
      551, 1157, 1157,  197, 1157,  416,  417,  418,  422,  419,
     1157, 1157,  197,  423,  552,  197,  554,  197,  424,  197,
      425,  553,  197,  426,  555,  432,  197,  556,  197,  427,
      197,  197,  429,  430,  197,  197,  428,  431,  197, 1157,
     1157,  197,  197,  554, 1157,  424,  197,  425, 1157,  197,

      426,  555,  432,  197,  556,  197,  427,  197,  197,  429,
      430,  197,  197,  428,  431,  197,  435,  197,  197,  197,
      434,  525,  557,  526,  433,  197,  558,  197,  197,  197,
      197,  559,  197,  560,  561,  197,  562,  197,  527,  563,
      197, 1157,  564,  435,  197,  565,  197,  434,  525,  557,
      526,  433,  197,  558,  197,  197,  197,  197,  559,  197,
      560,  561,  197,  562,  197,  527,  563,  197,  436,  564,
      437,  441,  565,  197,  438,  442, 1157,  197,  197, 1157,
      197,  439,  197,  197, 1157,  440,  566,  197, 1157,  567,
      197,  197, 1157, 1157, 1157,  436, 1157,  437,  441,  197,

      197,  438,  442,  444,  197,  197,  197,  197,  439,  197,
      197,  197,  440,  566,  197,  197,  567,  197,  197,  197,
      446,  443,  197,  197,  197,  568,  197,  197,  197,  445,
      444,  197,  197,  197,  447, 1157, 1157,  569,  197,  197,
     1157,  572,  197, 1157,  197, 1157,  197,  446,  443,  197,
      197,  197,  568,  197,  197,  197,  445,  197,  197,  197,
      197,  447,  197,  448,  569,  570,  197,  449,  572,  573,
      450,  197,  197,  197,  197,  571,  451, 1157,  574,  575,
      197,  197,  576,  197,  197, 1157,  197,  197,  577,  197,
      448,  197,  570,  578,  449,  197,  573,  450,  452,  197,

      197,  197,  571,  451,  197,  574,  575,  197,  197,  576,
      197,  453,  197,  197, 1157,  577,  197,  197,  197,  197,
      578, 1157,  197,  579, 1157,  452,  580,  197, 1157,  581,
     1157,  197,  197,  197,  197,  459,  460,  197,  453,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  454,  582,
      579,  197,  197,  580,  197,  197,  581,  197, 1157,  197,
      197,  197,  459,  460,  197,  583, 1157,  197,  197,  197,
      584,  461,  197, 1157,  197,  454,  582, 1157,  197,  197,
      585, 1157,  197,  586,  197,  455,  587,  588,  197,  589,
     1157,  462,  583,  197, 1157,  456,  197,  584,  461,  197,

      457,  458,  590,  197,  197,  197,  197,  585,  468,  197,
      586,  197,  455,  587,  588, 1157,  589,  469,  462, 1157,
      197,  197,  456,  197,  197,  591,  197,  457,  458,  590,
      197,  197,  197,  197,  197,  468,  197,  592,  197,  463,
      593,  464,  197,  594,  469,  197,  197,  595,  197,  197,
     1157,  197,  591,  470, 1157, 1157,  596,  197,  597,  598,
      197,  197, 1157, 1157,  592,  599,  463,  593,  464,  197,
      594, 1157,  197,  197,  595,  600,  197,  465, 1157,  466,
      470,  197,  197,  596,  197,  597,  598,  197,  601,  197,
      467,  602,  599,  197,  197,  471,  197,  197,  473,  197,

      197, 1157,  600,  603,  465,  197,  466,  197,  197,  197,
      197,  197, 1157,  472,  197,  601,  197,  467,  602, 1157,
      197,  197,  471,  197,  197,  473,  197,  197,  474,  604,
      603,  475,  197,  605,  197,  197,  197,  197,  197,  197,
      472,  197,  197,  197,  197,  197,  197,  476,  197,  197,
      606,  197,  607,  608, 1157,  474,  604,  197,  475,  609,
      605,  197,  197,  197,  197, 1157,  197, 1157, 1157,  197,
      197,  197,  197,  197,  476,  197,  197,  606,  197,  607,
      608,  197,  197,  610,  197,  479,  609,  611,  197,  197,
      197,  197,  197,  197,  478,  477,  197,  197, 1157,  197,

     1157, 1157,  197,  616, 1157, 1157,  612, 1157,  197,  197,
      610,  482,  479,  617,  611,  613,  197,  197,  197,  197,
      197,  478,  477,  197,  197,  197,  197,  480,  197,  197,
      616,  481,  197,  612,  483, 1157,  485,  197,  482,  484,
      617,  197,  613,  197,  197,  197,  618,  197,  197, 1157,
     1157, 1157,  197,  197,  480,  197, 1157,  619,  481,  197,
      486,  483,  197,  485,  197, 1157,  484,  197,  197,  197,
      197,  197,  197,  618,  197,  197,  487,  614,  197,  615,
      197,  620,  621,  197,  619,  197,  197,  486,  622,  197,
      625,  626,  491, 1157,  197,  197,  197,  623, 1157,  197,

     1157,  624,  739,  487,  614,  197,  615, 1157,  620,  621,
      197,  740,  197,  197,  488,  622, 1157,  625,  626,  491,
      492,  741,  197,  489,  623,  197,  197,  197,  624,  739,
      197,  490,  494,  197,  197,  197,  742,  197,  740,  197,
      197,  488, 1157,  493,  743,  744,  197,  492,  741,  197,
      489, 1157,  197,  197,  197, 1157, 1157,  197,  490,  494,
      197,  197,  197,  742,  197,  745,  197,  197,  197,  495,
      493,  743,  744,  197,  746,  197,  197,  197,  496,  197,
      747,  748,  197,  498,  197,  197,  749,  197,  750,  497,
     1157, 1157,  745,  197, 1157,  197,  495, 1157, 1157, 1157,

      751,  746,  197,  197,  197,  496,  197,  747,  748,  197,
      498,  197,  197,  749,  197,  750,  497,  197,  499,  500,
      197,  197,  197,  197,  197,  501,  507,  751,  197,  197,
      197,  752,  197,  197, 1157, 1157, 1157, 1157,  753, 1157,
     1157, 1157,  197, 1157,  197,  499,  500,  502,  197,  197,
      197,  197,  501,  507,  197,  197,  197,  754,  752,  197,
      197,  197,  506,  504,  197,  753,  505,  503,  197,  197,
      197, 1157,  197,  197,  502, 1157, 1157,  197,  197, 1157,
     1157,  197,  197, 1157,  754,  755,  756, 1157,  197,  506,
      504,  197, 1157,  505,  503,  197,  508,  197,  197,  197,

      197, 1157,  509,  197,  197,  197,  510,  512,  197,  197,
      197,  197,  755,  756,  514, 1157,  197,  197,  757,  511,
     1157,  197,  758,  508,  759,  197,  197,  197,  197,  509,
      197,  197,  197,  510,  512,  197,  197,  197,  197, 1157,
     1157,  514,  197,  197,  197,  757,  511,  513,  197,  758,
      197,  759,  197,  197,  197,  197,  627,  197,  197,  197,
      197,  197, 1157,  197,  197,  197,  197,  197, 1157,  197,
     1157,  197, 1157, 1157,  513,  760,  197,  197, 1157,  197,
     1157,  197, 1157,  627,  197,  628, 1157,  197,  197,  197,
     1157,  197,  197,  197,  197,  197, 1157,  629,  197,  197,

      630,  761,  760,  197,  197,  197,  762,  197,  197,  197,
      763,  197,  628,  197,  197, 1157,  197,  197,  197, 1157,
     1157,  764,  197,  197,  629, 1157,  197,  630,  761, 1157,
     1157,  197,  197,  762,  197,  197,  197,  763,  197,  197,
      197,  197,  197, 1157,  197,  197,  197,  197,  764,  197,
      197,  632,  197,  631, 1157,  765,  197,  197,  635, 1157,
      197,  766,  197, 1157, 1157,  197,  197,  197, 1157,  197,
      197,  197,  767,  197,  197,  197,  197,  768,  632,  197,
      631,  197,  765,  197,  197,  635,  197,  197,  766,  633,
      634,  197,  197,  636,  197,  197,  197,  197,  197,  767,

      197, 1157,  197, 1157,  768,  197,  197,  769,  197,  770,
     1157, 1157, 1157,  197, 1157,  771,  633,  634,  197, 1157,
      636,  197,  197,  197,  637,  772,  638,  197,  197,  773,
      197,  197,  197,  197,  769,  197,  770,  197,  640,  197,
     1157,  639,  771,  197,  774,  775,  641, 1157,  197,  776,
     1157,  637,  772,  638, 1157,  197,  773,  197,  197, 1157,
      777,  778,  197,  779,  197,  640,  197,  197,  639,  197,
      197,  774,  775,  641,  642,  197,  776,  197, 1157,  197,
      780,  197,  197,  643,  197,  197,  645,  777,  778,  197,
      779,  783, 1157,  197,  197,  197,  197, 1157, 1157,  784,

      197,  642,  197,  197,  197,  644,  197,  780,  197,  197,
      643,  197,  197,  645, 1157,  785,  197,  197,  783,  197,
      197,  647,  197, 1157,  646,  197,  784,  197,  781,  197,
      197,  197,  644,  197,  786,  789, 1157,  197,  648,  782,
      197,  197,  785,  197,  197,  197,  197, 1157,  647,  790,
      197,  646,  197,  197,  791,  781,  197,  792,  197,  197,
      197,  786,  789,  649,  197,  648,  782,  197,  197,  197,
      197,  650,  197,  787,  788, 1157,  790,  197,  197,  197,
      197,  791, 1157,  793,  792,  197,  197,  651,  197,  654,
      649,  197,  794,  197,  795,  796,  197,  197,  650,  197,

      787,  788,  652,  797, 1157,  197,  197,  197, 1157,  197,
      793,  653,  197,  197,  651,  197,  654,  197,  197,  794,
      197,  795,  796,  197,  197,  798,  197,  197, 1157,  652,
      797,  197,  656,  197,  197,  197,  197,  197,  653,  197,
      197, 1157,  655, 1157,  197,  197, 1157,  197, 1157, 1157,
      197,  799,  798, 1157,  197,  197,  659,  197,  197,  656,
      197,  197,  197,  197,  197,  800,  197,  197,  657,  655,
      197,  658,  197,  197,  197,  197,  197,  197,  799,  801,
      197,  197,  197,  659,  197, 1157,  197, 1157,  197,  660,
      197,  197,  800,  197,  197,  657,  197,  197,  658,  197,

      197, 1157,  197,  197,  197,  802,  801,  197,  197,  197,
     1157, 1157,  197,  197,  197,  661,  660,  197,  197,  662,
      197,  197, 1157,  197,  197,  803,  197,  197,  663, 1157,
      197,  197,  802,  197,  804,  197,  197,  197,  665,  197,
      197,  197,  661,  197,  197, 1157,  662,  805,  197,  197,
      806,  197,  803,  807,  197,  663,  197,  197,  197,  808,
      197,  804,  197,  197,  197,  665,  664,  197,  666, 1157,
      197, 1157,  197, 1157,  805,  667,  197,  806,  197,  809,
      807,  810,  197,  197,  197, 1157,  808, 1157,  197,  197,
      197,  197,  197,  664,  811,  666,  668, 1157,  197,  197,

      197,  197,  667, 1157, 1157,  197,  809,  197,  810,  197,
     1157,  197,  669, 1157,  197,  197,  197,  197,  197,  197,
      671,  811,  812,  668,  670,  197,  197,  197,  197, 1157,
      197,  197,  197,  813,  197,  814,  197,  197,  815,  669,
      197,  197,  197, 1157,  197,  816,  197,  671,  197,  812,
      674,  670,  197,  197,  197,  672,  197,  197,  197,  197,
      813,  673,  814,  197,  197,  815,  197,  197,  197,  197,
      197,  197,  816,  197,  197,  197, 1157,  674,  817,  197,
      197,  197,  672,  197, 1157,  675, 1157, 1157,  673,  197,
      197, 1157, 1157,  197, 1157,  197,  197,  197,  197,  818,

      819,  197, 1157,  197,  197,  817,  676,  197,  197,  679,
      820,  197,  675,  197,  677,  197,  197,  197,  197,  197,
     1157,  197,  678,  197,  680,  197,  818,  819,  197,  197,
      197,  197,  821,  676,  197,  197,  679,  820,  197,  822,
      197,  677,  197,  681,  197,  197,  197,  197,  197,  678,
      823,  680,  197,  197,  909,  197,  197,  197,  682,  821,
      910,  197,  197,  197,  911,  197,  822,  197,  683,  197,
      681,  197,  684, 1157,  197,  685, 1157,  823,  197,  197,
      197,  909,  197, 1157,  197,  682, 1157,  910, 1157,  197,
      197,  911,  197, 1157,  197,  683,  197, 1157, 1157,  684,

      197,  912,  685,  687,  913,  197,  197,  197,  197,  197,
      197,  914,  197,  197,  915,  197,  197,  916,  197,  917,
      688,  918,  197,  197,  686,  197,  197,  197,  912,  919,
      687,  913, 1157,  920,  197,  197,  197,  197,  914,  197,
      197,  915,  197,  197,  916,  197,  917,  688,  918,  197,
      197,  686,  197,  197,  689,  197,  919,  690,  921,  197,
      920,  922,  197,  197,  197,  197,  197,  923,  691,  197,
     1157,  197,  692,  197,  197,  197,  197,  924, 1157,  197,
      197,  689,  197,  197,  690,  921,  197,  925,  922,  197,
      926,  197,  197,  197,  923,  691,  197,  197,  197,  692,

      197,  197,  197,  197,  924,  197,  197,  197,  197,  197,
      197,  927,  693,  197,  925,  928,  197,  926,  197, 1157,
      197,  197,  694,  197,  197,  197,  197, 1157,  695, 1157,
      197,  929,  197,  197,  930,  197,  197, 1157,  927,  693,
      197, 1157,  928,  197,  696,  197,  197,  197,  197,  694,
      197,  197,  197,  197,  197,  695,  197,  197,  929,  931,
      197,  930,  197,  197,  699,  197,  697, 1157,  197,  197,
      698,  696, 1157,  197,  197,  197, 1157, 1157,  197, 1157,
      932,  197,  933,  197,  197,  934,  931, 1157, 1157,  197,
      197,  699,  197,  697,  700,  197,  197,  698,  197,  701,

      935,  197,  197,  197,  197,  702,  197,  932,  936,  933,
      197,  197,  934,  197,  197,  197,  197, 1157,  937, 1157,
      938,  700,  939,  942, 1157,  197,  701,  935, 1157, 1157,
      197,  197,  702,  197,  943,  936,  940,  197,  944,  941,
      197,  197,  197,  197,  197,  937,  197,  938,  703,  939,
      942,  197,  197,  704,  197,  197,  197,  945,  946,  197,
      706,  943,  197,  940,  197,  944,  941,  197, 1157,  197,
      947,  197,  705,  197,  197,  703, 1157,  197,  197,  197,
      704,  197,  197,  197,  945,  946,  197,  706,  197,  197,
     1157,  197,  948, 1157,  197,  197,  197,  947, 1157,  705,

      949,  197,  197,  197,  197,  197,  709,  707,  197,  950,
      708,  951, 1157,  197, 1157,  197, 1157,  197,  197,  948,
      197,  710,  197,  952, 1157,  197, 1157,  949, 1157,  197,
      197,  197,  197,  709,  707,  197,  950,  708,  951,  197,
      197,  197, 1157,  197,  197,  197, 1157,  197,  710,  711,
      952,  712,  197,  197,  953,  197, 1157,  197,  197,  197,
      714,  197,  197,  197,  954,  197,  197,  197,  197,  197,
      197,  197,  197,  197, 1157,  197,  711,  955,  712,  956,
      197,  953,  197,  713,  197,  197,  197,  714,  197,  197,
      197,  954,  197,  957,  197, 1157,  197, 1157,  197,  197,

      197,  197,  197,  197,  955,  958,  956,  959,  197,  715,
      713,  960,  197,  197,  197,  961,  197,  717,  962,  197,
      957,  197,  716, 1157,  197, 1157,  197, 1157,  197,  197,
      197, 1157,  958, 1157,  959,  197,  715,  963,  960, 1157,
      197,  197,  961,  197,  717,  962,  197,  964,  197,  716,
      197,  197,  197,  197,  718,  965,  197,  197,  197, 1157,
      197,  197,  197,  720,  963,  197,  719, 1157,  197, 1157,
      197, 1157,  966,  197,  964, 1157,  721,  197,  967,  197,
      197,  718,  965, 1157,  197,  197,  197,  197,  197,  197,
      720,  968,  197,  719,  197,  197,  197,  197,  197,  966,

      197,  969,  197,  721,  197,  967,  197,  197,  197, 1157,
      723, 1157,  197,  197,  722,  197, 1157, 1157,  968, 1157,
      197,  197,  197,  197,  970,  197,  971, 1157,  969,  197,
     1035,  197, 1036,  197,  197,  197,  724,  723,  197,  197,
     1037,  722,  197,  197,  726,  725,  727,  197,  197,  197,
      197,  970,  197,  971,  197,  197, 1157, 1035,  728, 1036,
     1157,  197, 1157,  724, 1038,  197, 1039, 1037,  197,  729,
      197,  726,  725,  727, 1040,  197,  197,  197, 1157,  197,
     1041,  197,  197,  197, 1042,  728,  197,  197, 1157,  730,
      197, 1038, 1043, 1039,  197,  197,  729,  732,  197,  197,

      197, 1040,  197,  197, 1044,  731, 1045, 1041,  197, 1157,
      197, 1042,  197,  197,  197,  197,  730,  197, 1157, 1043,
     1046,  197,  197, 1157,  732,  197,  197,  197,  197,  197,
      735, 1044,  731, 1045,  736,  197,  197,  197,  197,  197,
      197, 1157,  197,  197, 1047,  733,  197, 1046, 1157,  197,
      197, 1048,  734,  197, 1157,  197, 1157,  735, 1157, 1157,
     1049,  736, 1050,  197,  197,  197, 1051,  197,  197,  197,
      197, 1047,  733,  197,  197,  737,  197,  197, 1048,  734,
      197,  197,  197,  197, 1052,  197,  738, 1049,  197, 1050,
      197,  824, 1157, 1051, 1157,  197,  197,  197, 1157, 1157,

     1053,  197,  737,  197,  197, 1054, 1157,  825,  197,  197,
      197, 1052,  197,  738, 1157,  197,  197,  197,  824,  197,
      197,  197, 1055,  197,  197,  197,  197, 1053,  197,  197,
     1056,  197, 1054,  829,  825,  197,  826,  197,  828,  827,
      197,  830, 1157,  197, 1057,  197,  197,  197,  197, 1055,
      197,  197,  197,  197, 1157,  197,  197, 1056, 1157, 1157,
      829,  197,  197,  826,  197,  828,  827,  197,  830,  197,
      832, 1057,  197, 1157,  197,  197, 1157,  831,  197,  197,
      197,  197, 1157, 1058,  197,  197,  833, 1157,  197, 1157,
      197, 1157, 1059,  197, 1157,  197,  197,  832, 1157, 1157,

      197,  197,  197,  197,  831, 1157,  197,  197,  197,  197,
     1058,  197,  197,  833,  197, 1060,  197,  197,  197, 1059,
      197,  197,  197,  197, 1157,  197,  197,  197,  197, 1157,
      197,  197,  197, 1061, 1157,  197,  197,  197, 1157, 1062,
     1157,  197, 1060,  197,  197,  197, 1157, 1063,  197,  834,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
     1061,  835,  197,  197,  197,  197, 1062,  197, 1064, 1065,
      197,  197,  197,  836, 1063, 1066,  834,  197,  197,  197,
     1067,  197,  197,  197,  197, 1157, 1068, 1157,  835, 1069,
      197,  197,  197, 1070,  197, 1064, 1065,  197,  197,  197,

      836, 1157, 1066, 1107,  197,  197,  197, 1067,  197,  197,
      837, 1157,  197, 1068,  197,  197, 1069,  197,  197,  838,
     1070, 1108,  197,  839,  197,  197,  840,  197,  197, 1157,
     1107, 1157,  197,  197, 1157,  197, 1157,  837,  197,  197,
     1157,  197,  197, 1109,  197, 1110,  838, 1157, 1108,  197,
      839,  197, 1111,  840,  197,  197,  197,  841,  197,  197,
      197,  197, 1112,  197, 1113,  197, 1114,  197,  197,  197,
     1109,  197, 1110,  197,  842,  843,  197, 1157, 1115, 1111,
     1116, 1157, 1157,  197,  841,  197,  197, 1157,  197, 1112,
      197, 1113,  844, 1114,  197,  197,  197,  197,  197,  197,

      197,  842,  843,  197,  197, 1115,  197, 1116,  197,  197,
      846,  197, 1117, 1157,  845,  197, 1118, 1157, 1119,  844,
     1120, 1121,  197, 1157,  197,  197,  197, 1137, 1157, 1157,
      197,  197, 1138,  197,  847,  197,  197,  846,  197, 1117,
      197,  845,  197, 1118,  848, 1119,  197, 1120, 1121,  197,
      197,  197,  197,  197, 1137,  197,  197,  197, 1139, 1138,
      197,  847,  197, 1157,  197,  197, 1157,  197, 1157,  197,
     1157,  848, 1157,  197,  197, 1157, 1140,  197,  197, 1141,
      197, 1142,  197,  197, 1149, 1139,  197,  197,  197,  197,
      849,  197,  197,  197, 1150,  197,  197,  197,  197,  850,

     1151,  197,  197, 1140,  197, 1155, 1141,  197, 1142, 1157,
     1157, 1149,  197,  197, 1157,  197,  197,  849, 1157,  851,
      197, 1150,  197, 1157,  197,  197,  850, 1151, 1157,  197,
      197,  197, 1155,  853,  197, 1157, 1157, 1157,  197,  197,
      197,  854,  197,  197,  852,  197,  851,  197,  197, 1157,
      197, 1157, 1157, 1157, 1157,  197, 1157,  197,  197, 1157,
      853, 1157, 1157, 1157, 1157,  197,  855,  197,  854,  197,
      197,  852,  197, 1157,  197,  197,  197,  197, 1157,  197,
      197, 1157,  197,  197,  197,  197,  197,  857, 1157,  197,
      197,  197, 1157,  855,  197,  856, 1157,  197,  197,  197,

      197,  197, 1157,  197,  197,  197,  197,  197,  197, 1157,
      197,  197, 1157,  197,  857, 1157,  197,  197,  197, 1157,
     1157,  197,  856,  197, 1157,  197,  197,  197,  197,  858,
      197,  197,  197, 1157,  197,  197,  197,  197,  197, 1157,
      197,  197, 1157,  197, 1157,  197,  197, 1157,  197,  859,
      197,  197,  197, 1157,  197,  197,  858,  197, 1157, 1157,
     1157,  197,  860,  197,  197,  197,  197,  197,  197,  197,
      197, 1157,  197,  197, 1157,  197,  859, 1157,  197,  197,
      197,  197,  197, 1157, 1157, 1157,  197, 1157,  197,  860,
     1157,  197,  197,  197,  197,  197,  197, 1157,  197,  197,

      861,  197, 1157,  862,  197, 1157,  197,  197, 1157, 1157,
      197, 1157, 1157,  197, 1157,  197, 1157, 1157,  197,  197,
      197,  197,  197, 1157, 1157,  197,  197,  861,  197, 1157,
      862,  197,  197,  197,  197, 1157, 1157,  197,  197,  197,
      197, 1157, 1157, 1157,  863, 1157,  197,  197,  197, 1157,
      864, 1157,  865,  197, 1157,  197, 1157, 1157, 1157,  197,
     1157,  197, 1157, 1157, 1157,  197,  197,  197, 1157, 1157,
     1157,  863, 1157,  197, 1157,  197, 1157,  864,  197,  865,
      197, 1157,  197,  197,  866,  868,  197,  197, 1157, 1157,
      197,  197,  197,  197,  197,  867,  197,  197,  197, 1157,

     1157,  197, 1157, 1157, 1157,  197,  197, 1157, 1157, 1157,
      197,  866,  868,  197,  197, 1157, 1157,  197,  197,  197,
      197,  197,  867,  197,  197,  197, 1157,  197,  197,  197,
      197, 1157,  197,  197,  197, 1157,  197,  197,  197,  197,
     1157, 1157,  197,  197,  869, 1157, 1157, 1157,  197, 1157,
     1157, 1157, 1157, 1157,  197, 1157,  197,  197, 1157,  197,
      197,  197,  197,  197,  197,  197,  197,  197, 1157,  197,
      197,  869,  197,  871,  870,  197,  197,  197,  197, 1157,
      197,  197, 1157,  197, 1157,  197,  197,  197, 1157,  197,
      197, 1157, 1157,  197,  197, 1157, 1157, 1157, 1157,  197,

      871,  870, 1157,  197,  197,  197, 1157,  197,  197, 1157,
      197,  197,  197,  197,  197, 1157,  197,  197,  874, 1157,
      197,  872,  873,  197, 1157,  197,  197, 1157,  197, 1157,
      197, 1157, 1157, 1157, 1157, 1157, 1157,  197,  197, 1157,
      875,  197, 1157,  197,  197,  874, 1157, 1157,  872,  873,
      197,  197,  197,  197, 1157,  197,  877,  197,  197, 1157,
      197,  197, 1157,  197,  197,  876,  197,  875, 1157, 1157,
      197,  197,  197, 1157, 1157, 1157,  197,  197,  197,  197,
      197, 1157, 1157,  877,  197,  197,  197,  197,  197,  878,
      197,  197,  876,  197, 1157, 1157, 1157,  197,  197,  197,

     1157,  879, 1157,  197,  197,  197,  197,  197, 1157, 1157,
     1157,  197,  197,  197, 1157, 1157,  878,  880,  197,  197,
      197, 1157,  197, 1157,  881,  197,  882,  197,  879, 1157,
     1157,  197,  197,  197,  197, 1157, 1157,  197,  197,  197,
      197,  197, 1157,  197,  880, 1157,  197,  197, 1157,  197,
     1157,  881,  197,  882,  197, 1157, 1157, 1157,  197,  197,
      197,  197, 1157, 1157,  197,  197,  197,  197,  197,  197,
      197,  883, 1157,  197,  197,  197, 1157, 1157, 1157,  197,
      197,  197,  197, 1157, 1157,  884,  197,  197,  197,  197,
      197,  885,  197,  197,  886, 1157,  197, 1157,  883, 1157,

      197,  197,  197, 1157, 1157, 1157, 1157,  197,  197,  197,
     1157, 1157,  884,  197,  197,  197,  197,  197,  885,  197,
      197,  886,  197,  887, 1157,  888,  197,  197,  889,  197,
      197, 1157, 1157,  197, 1157, 1157,  197, 1157,  197,  197,
      197, 1157, 1157, 1157, 1157, 1157, 1157,  197, 1157,  197,
      887, 1157,  888,  197,  197,  889,  197,  197,  890, 1157,
      197, 1157, 1157,  197, 1157,  197,  197,  197,  197,  197,
      197,  891,  892,  197,  197,  197,  197, 1157,  197,  197,
      197, 1157,  197,  197, 1157,  890, 1157, 1157, 1157, 1157,
     1157, 1157,  197, 1157,  197,  197,  197,  197,  891,  892,

      197,  197,  197,  197,  197,  197,  197,  197,  893,  197,
      197, 1157,  894,  197,  197, 1157,  197,  197, 1157,  197,
     1157, 1157,  197,  895,  197, 1157,  197, 1157, 1157, 1157,
      197,  197,  197,  197, 1157,  893,  197, 1157,  197,  894,
      197,  197,  197,  197,  197, 1157,  197, 1157,  197,  197,
      895,  197, 1157,  197,  197, 1157,  197,  197,  197,  197,
      197,  896, 1157,  197,  197,  197,  197, 1157,  897,  197,
      197, 1157,  197,  197,  197,  197, 1157,  898, 1157, 1157,
     1157,  197,  197,  197,  197,  197, 1157, 1157,  896, 1157,
     1157,  197, 1157,  197, 1157,  897,  197,  197,  197,  197,

      197,  197,  900,  197,  898,  899, 1157,  197,  197,  197,
     1157,  197,  197, 1157,  197, 1157,  197, 1157, 1157, 1157,
     1157,  197, 1157,  197, 1157,  197,  197,  197, 1157,  900,
      197, 1157,  899,  902,  197,  197, 1157,  197, 1157,  197,
      197,  197, 1157,  197,  197,  197, 1157,  197,  197,  197,
      197,  197,  901,  197, 1157, 1157, 1157, 1157,  197, 1157,
      902,  197, 1157,  903,  197, 1157, 1157,  197, 1157, 1157,
     1157,  197,  197, 1157,  197,  197,  197,  197,  197,  901,
     1157,  904,  197,  905,  197,  197, 1157,  197,  197,  197,
      903,  906,  197,  197, 1157, 1157, 1157, 1157,  197, 1157,

     1157,  197,  197,  197, 1157, 1157, 1157, 1157,  904,  197,
      905,  197, 1157, 1157,  197,  197,  197, 1157,  906,  197,
      197, 1157,  197,  197, 1157,  197, 1157, 1157,  197,  197,
      197,  197,  197,  197, 1157,  197, 1157, 1157,  907, 1157,
     1157,  197,  197,  908, 1157,  197, 1157,  197,  197,  197,
      197,  197, 1157,  197, 1157,  197,  197, 1157,  197,  197,
      197,  197,  197,  197, 1157,  907, 1157, 1157,  197,  197,
      908,  197,  197,  197,  197,  197, 1157,  197,  197,  197,
      197,  197,  197, 1157, 1157, 1157, 1157,  197,  197,  197,
      197,  197, 1157, 1157, 1157,  197,  197,  197,  197,  197,

      197,  197, 1157,  197,  197, 1157,  197, 1157,  197,  197,
     1157,  197, 1157,  197,  197, 1157,  197,  197,  197,  197,
      972,  973,  197,  197,  197,  197,  197, 1157,  197, 1157,
      197,  197, 1157,  197, 1157,  197,  197, 1157,  197,  197,
      197,  197, 1157, 1157,  197,  197,  197,  972,  973,  974,
      197, 1157,  197,  197, 1157,  197, 1157,  976,  197,  197,
      197, 1157,  197,  197,  197, 1157,  197,  197,  197,  197,
     1157,  197,  197,  197,  197, 1157,  974, 1157,  975, 1157,
      197, 1157,  197,  197,  976,  197,  197, 1157,  977, 1157,
      197,  197,  197, 1157,  197, 1157,  197, 1157,  197,  197,

      197,  197,  197, 1157, 1157,  975,  197, 1157,  197, 1157,
      197, 1157,  197, 1157,  978,  977,  197,  197,  197,  197,
      197,  197,  979,  197,  197, 1157,  197, 1157, 1157,  197,
     1157,  980,  981,  197,  197,  197,  197, 1157, 1157, 1157,
     1157,  978,  197,  197,  197,  197, 1157,  197,  197,  979,
      197,  197,  197, 1157, 1157, 1157,  197, 1157,  980,  981,
      197,  197, 1157,  197,  197, 1157,  197, 1157,  982,  197,
     1157, 1157, 1157, 1157,  197, 1157,  197, 1157,  197,  197,
     1157, 1157,  197,  197,  197,  984, 1157,  197,  983, 1157,
      986,  197,  197,  197,  197,  982, 1157, 1157,  197,  197,

      197,  197,  197,  197, 1157,  197,  985, 1157,  197,  197,
      197,  197,  984,  197, 1157,  983, 1157,  986,  197,  197,
     1157,  197, 1157, 1157,  197,  197,  197,  197,  197,  197,
     1157, 1157,  197,  985,  197,  197,  987,  197, 1157, 1157,
      197, 1157,  197, 1157,  197,  197,  197, 1157,  989, 1157,
      197,  197,  197,  197,  197,  197, 1157, 1157,  197,  197,
      197,  197,  990,  987,  991,  988,  197, 1157,  197,  197,
      197,  197,  197,  197,  197,  989, 1157,  197, 1157,  197,
      197,  197,  197, 1157,  197,  197, 1157,  197, 1157,  990,
      197,  991,  988,  197,  197,  197, 1157,  197,  197,  197,

      197,  197,  197, 1157, 1157,  992, 1157, 1157,  197,  197,
      197,  197,  197,  993,  197, 1157,  197,  197,  197,  994,
      995,  197, 1157, 1157,  197,  197,  197,  197, 1157,  197,
     1157, 1157,  992, 1157, 1157,  197,  197,  197, 1157,  197,
      993,  197,  996,  197,  197,  197,  994,  995,  197, 1157,
     1157,  197,  197,  197,  197, 1157,  197,  197, 1157, 1157,
     1157,  197,  197,  197,  197, 1157,  998,  197,  197,  996,
      197,  197,  197,  197,  197,  197, 1157,  197,  197,  197,
      197,  197, 1157,  197,  197,  997, 1157, 1157,  197,  197,
      197,  197, 1157,  998,  197,  197,  197,  197,  197,  197,

      197,  197, 1157,  197,  197,  197, 1157,  197,  197,  999,
     1157, 1157,  997, 1157,  197, 1157,  197,  197, 1157, 1157,
      197,  197,  197,  197, 1002,  197,  197,  197,  197, 1157,
      197, 1157,  197, 1157,  197,  197,  999, 1157,  197, 1157,
      197,  197, 1157,  197,  197,  197, 1000,  197,  197,  197,
      197, 1002, 1157,  197,  197,  197,  197, 1157,  197,  197,
     1157,  197,  197,  197,  197,  197, 1006,  197,  197,  197,
      197,  197,  197, 1000,  197, 1157,  197,  197, 1157, 1157,
      197, 1157,  197,  197, 1157,  197,  197,  197, 1001,  197,
      197,  197,  197, 1006, 1157,  197,  197,  197,  197, 1157,

      197,  197, 1157,  197, 1005, 1003,  197,  197, 1004,  197,
      197,  197, 1157,  197,  197, 1001,  197, 1157, 1157,  197,
     1157, 1157,  197, 1157,  197,  197, 1157,  197, 1157,  197,
     1157, 1005, 1003,  197,  197, 1004, 1157,  197,  197, 1157,
      197, 1157,  197,  197, 1157, 1157,  197,  197,  197,  197,
      197,  197,  197,  197,  197, 1157,  197, 1157,  197, 1157,
      197,  197, 1157, 1157,  197, 1157,  197,  197, 1157,  197,
      197,  197, 1157,  197,  197,  197,  197,  197, 1157,  197,
      197,  197, 1007, 1157, 1157,  197, 1157,  197,  197,  197,
     1157,  197, 1157,  197,  197, 1008,  197,  197,  197,  197,

      197,  197,  197,  197, 1157,  197, 1157,  197,  197, 1007,
     1157,  197, 1157, 1009,  197,  197,  197,  197, 1157, 1157,
     1157,  197, 1008,  197, 1157, 1157,  197,  197,  197,  197,
     1157, 1157,  197, 1157,  197,  197,  197, 1157,  197, 1157,
     1009,  197, 1010,  197,  197, 1157,  197,  197, 1157, 1157,
      197,  197,  197,  197,  197, 1157, 1013, 1157,  197, 1157,
      197,  197,  197,  197, 1011,  197,  197, 1157, 1012, 1010,
      197, 1157, 1157,  197,  197, 1157,  197,  197,  197,  197,
      197,  197, 1157, 1013, 1157,  197, 1014,  197,  197,  197,
      197, 1011,  197,  197,  197, 1012,  197, 1157, 1015, 1157,

     1157, 1157, 1016,  197,  197, 1157,  197, 1157,  197,  197,
     1157, 1157,  197, 1014,  197, 1157,  197,  197,  197,  197,
     1017,  197, 1157,  197, 1157, 1015, 1157,  197,  197, 1016,
     1157,  197, 1157,  197,  197,  197,  197,  197, 1157,  197,
      197,  197, 1157,  197, 1020,  197,  197, 1017, 1157,  197,
      197,  197, 1018, 1157,  197,  197,  197, 1157,  197, 1157,
      197,  197, 1157,  197,  197,  197,  197,  197,  197, 1157,
     1019, 1020, 1157, 1157, 1022, 1157,  197,  197,  197, 1018,
     1157,  197, 1157,  197, 1157,  197, 1157,  197,  197, 1157,
      197,  197,  197,  197, 1157,  197, 1157, 1019, 1021,  197,

      197, 1022,  197,  197, 1157, 1157,  197, 1023,  197,  197,
     1157, 1157,  197,  197, 1157,  197, 1157, 1157,  197,  197,
      197, 1157, 1157, 1024,  197, 1021,  197,  197, 1157,  197,
      197,  197, 1157,  197, 1023, 1157,  197, 1157,  197,  197,
      197,  197,  197, 1025, 1026, 1027,  197,  197, 1157,  197,
     1024,  197,  197, 1157,  197, 1157, 1157, 1157,  197,  197,
     1028, 1157,  197, 1157, 1157,  197,  197,  197,  197,  197,
     1025, 1026, 1027,  197,  197, 1157,  197,  197, 1029,  197,
      197,  197,  197,  197, 1157, 1157,  197, 1028,  197,  197,
     1157, 1030,  197,  197,  197, 1157,  197, 1157,  197, 1157,

      197,  197,  197, 1157,  197, 1029, 1157,  197, 1157,  197,
      197, 1157,  197, 1157, 1157,  197, 1031,  197, 1030,  197,
      197,  197, 1157,  197, 1033,  197,  197,  197,  197,  197,
      197,  197, 1157, 1157, 1157, 1032,  197,  197,  197,  197,
      197,  197, 1034, 1031,  197, 1157, 1157,  197,  197,  197,
     1157, 1033, 1157,  197,  197,  197,  197,  197,  197,  197,
     1157, 1157, 1032,  197,  197,  197, 1157,  197,  197, 1034,
      197, 1071, 1157, 1157, 1157,  197,  197,  197, 1157, 1157,
     1157,  197, 1157,  197,  197,  197,  197,  197, 1157,  197,
     1157,  197, 1157, 1157,  197,  197, 1072,  197, 1071, 1157,

     1157,  197,  197, 1157,  197,  197,  197, 1157,  197, 1157,
     1157,  197,  197,  197,  197,  197,  197,  197,  197, 1073,
      197,  197,  197, 1072,  197,  197, 1157, 1157,  197,  197,
     1157, 1157,  197,  197, 1157, 1074,  197, 1157,  197,  197,
      197, 1157,  197, 1075,  197,  197, 1073,  197,  197, 1157,
     1157,  197,  197, 1157, 1157,  197,  197,  197, 1157,  197,
     1157, 1157, 1074,  197,  197,  197,  197, 1157, 1157,  197,
     1075, 1076,  197,  197, 1157,  197, 1157, 1157,  197, 1157,
     1157, 1157,  197,  197,  197,  197,  197,  197, 1157, 1157,
     1157,  197,  197, 1157, 1157, 1078,  197,  197, 1076, 1157,

      197,  197, 1077,  197,  197,  197,  197, 1157,  197, 1157,
      197,  197,  197,  197,  197, 1157,  197, 1157, 1157,  197,
     1157, 1157, 1078, 1157,  197, 1079, 1157,  197,  197, 1077,
      197,  197,  197,  197,  197,  197,  197,  197,  197, 1157,
      197,  197, 1080,  197, 1157, 1157,  197, 1157,  197, 1157,
      197, 1157, 1079, 1157,  197,  197, 1157, 1157, 1157,  197,
      197,  197, 1081,  197,  197, 1157, 1157, 1157,  197, 1080,
     1157, 1157,  197,  197,  197,  197,  197,  197,  197,  197,
     1157, 1082,  197,  197,  197, 1157, 1157,  197,  197, 1081,
      197, 1157,  197, 1157, 1157, 1157, 1157,  197, 1157,  197,

     1157,  197,  197,  197, 1157,  197,  197, 1157, 1082, 1157,
      197,  197, 1157, 1157,  197,  197,  197,  197,  197,  197,
      197,  197, 1157, 1157,  197,  197,  197, 1157, 1157,  197,
      197, 1157,  197, 1157,  197, 1157, 1083, 1157, 1157,  197,
      197,  197, 1157,  197,  197,  197,  197,  197,  197, 1157,
      197, 1157,  197,  197,  197, 1157,  197,  197, 1157,  197,
      197,  197,  197, 1083, 1084, 1157,  197,  197, 1157,  197,
      197,  197, 1157,  197,  197, 1157, 1157,  197,  197, 1157,
      197,  197, 1157,  197, 1157,  197, 1085,  197, 1157,  197,
      197, 1084,  197, 1157,  197, 1157,  197,  197, 1157,  197,

     1157,  197, 1157, 1157,  197,  197, 1157,  197,  197, 1157,
      197, 1157,  197, 1085, 1157,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197, 1157,  197, 1157,  197,  197,
     1157,  197, 1157, 1157,  197,  197, 1157,  197, 1157, 1157,
     1157, 1157,  197,  197, 1157,  197,  197,  197,  197,  197,
      197,  197,  197,  197, 1157,  197,  197, 1157,  197,  197,
     1157,  197, 1157, 1157, 1087, 1157,  197, 1157,  197, 1086,
     1157, 1157, 1157,  197,  197,  197, 1157, 1157, 1157,  197,
      197, 1157, 1157, 1088,  197,  197,  197, 1157, 1157, 1157,
      197, 1087,  197,  197, 1157,  197, 1086,  197,  197,  197,

      197,  197, 1157, 1157, 1157,  197,  197, 1157, 1157,  197,
     1088,  197,  197, 1157, 1157,  197, 1089,  197,  197,  197,
     1157, 1157, 1157,  197,  197,  197,  197,  197,  197, 1157,
     1090, 1157,  197,  197,  197, 1157,  197,  197, 1157,  197,
     1157,  197,  197, 1089,  197,  197,  197,  197,  197, 1157,
      197,  197, 1092,  197, 1157,  197,  197, 1090, 1157, 1157,
      197,  197,  197,  197,  197, 1091,  197, 1157,  197, 1157,
      197,  197,  197,  197,  197,  197,  197,  197,  197, 1092,
      197,  197, 1157,  197,  197, 1157, 1093,  197,  197,  197,
      197,  197, 1091,  197, 1094,  197, 1157,  197,  197,  197,

      197, 1157, 1095,  197,  197, 1157, 1157,  197,  197, 1157,
     1157,  197, 1157, 1093,  197,  197, 1157,  197,  197, 1157,
     1157, 1094,  197, 1157, 1157,  197,  197,  197, 1096, 1095,
      197, 1157,  197,  197,  197, 1157, 1157, 1097, 1157, 1157,
      197,  197,  197,  197,  197, 1157, 1157, 1157, 1157,  197,
     1157,  197, 1157,  197, 1157, 1096,  197,  197, 1157,  197,
      197,  197, 1157, 1157, 1097, 1157, 1157,  197, 1157,  197,
      197, 1157,  197,  197,  197, 1098,  197, 1157,  197,  197,
      197, 1157, 1157,  197,  197,  197, 1157, 1157,  197, 1157,
     1157,  197, 1157,  197, 1157, 1157, 1157, 1157,  197,  197,

      197,  197, 1098,  197, 1157, 1157,  197,  197, 1157, 1157,
     1157,  197,  197, 1157, 1099,  197,  197,  197,  197, 1157,
      197,  197,  197, 1157, 1157,  197,  197,  197, 1157, 1157,
      197, 1157, 1157, 1100, 1157, 1157, 1157, 1157, 1101, 1157,
      197, 1099,  197,  197,  197,  197, 1157,  197,  197,  197,
      197, 1157,  197,  197,  197,  197,  197, 1157, 1157, 1157,
     1100, 1157, 1157,  197,  197, 1101, 1103,  197, 1157, 1157,
      197,  197,  197,  197,  197, 1102, 1157,  197,  197,  197,
     1157,  197,  197,  197, 1157, 1157, 1157,  197, 1157, 1157,
      197,  197, 1157, 1103,  197, 1157,  197,  197,  197, 1157,

      197,  197, 1102,  197,  197,  197, 1104, 1157,  197, 1157,
      197, 1157,  197,  197,  197, 1157, 1157, 1157,  197,  197,
     1157,  197, 1157,  197, 1157,  197,  197,  197,  197,  197,
      197,  197,  197, 1104,  197,  197, 1157,  197, 1157,  197,
      197,  197, 1157,  197,  197,  197,  197, 1157, 1157, 1157,
      197, 1157,  197,  197,  197, 1157,  197,  197, 1157,  197,
     1105,  197,  197, 1157, 1157, 1157, 1157, 1106,  197,  197,
      197,  197, 1157,  197,  197,  197,  197,  197,  197,  197,
      197, 1157, 1157,  197,  197,  197, 1157, 1105,  197, 1157,
     1157, 1157, 1157, 1157, 1106, 1157,  197,  197, 1157,  197,

      197,  197,  197,  197,  197,  197,  197,  197, 1157,  197,
      197,  197,  197,  197, 1157,  197, 1157, 1157,  197, 1157,
      197, 1157,  197,  197,  197, 1157,  197,  197, 1157, 1157,
     1157,  197,  197, 1122, 1157, 1157,  197,  197,  197,  197,
      197,  197, 1157,  197, 1157,  197,  197,  197, 1123,  197,
      197,  197, 1157,  197,  197,  197, 1157, 1157, 1157,  197,
     1122, 1157,  197, 1157,  197,  197,  197,  197,  197,  197,
      197, 1157, 1157,  197,  197, 1123,  197, 1157,  197, 1157,
      197,  197,  197,  197,  197, 1157,  197, 1124, 1157,  197,
     1157,  197,  197, 1157,  197, 1157,  197,  197, 1157, 1157,

     1157,  197,  197,  197, 1157,  197,  197,  197,  197,  197,
      197,  197,  197,  197, 1124,  197, 1157, 1125,  197, 1157,
     1157, 1157,  197, 1157,  197,  197, 1157,  197, 1157,  197,
     1157,  197,  197,  197,  197, 1157,  197,  197, 1157,  197,
     1157,  197,  197, 1157, 1125,  197,  197,  197, 1157,  197,
      197,  197,  197, 1126,  197,  197,  197, 1157,  197,  197,
     1157,  197, 1157, 1157,  197,  197,  197, 1157,  197, 1127,
     1157,  197,  197,  197,  197,  197,  197,  197,  197, 1157,
     1126,  197,  197,  197, 1157, 1157,  197,  197,  197,  197,
      197, 1129,  197,  197,  197,  197, 1127,  197,  197,  197,

     1157,  197,  197,  197,  197,  197, 1157, 1128,  197,  197,
     1157,  197, 1157, 1157,  197,  197,  197,  197, 1129,  197,
     1157,  197,  197,  197,  197,  197,  197, 1157,  197,  197,
     1157,  197,  197,  197, 1128, 1157,  197,  197,  197,  197,
     1157, 1157,  197,  197, 1157, 1157,  197,  197, 1157, 1157,
      197,  197,  197,  197, 1157,  197,  197,  197, 1157,  197,
      197, 1131, 1130, 1157,  197,  197,  197,  197, 1157, 1157,
      197, 1157, 1157,  197,  197,  197, 1157,  197,  197, 1157,
      197,  197,  197,  197,  197,  197,  197, 1157, 1131, 1130,
     1157,  197,  197,  197,  197,  197, 1132, 1157, 1157,  197,

      197,  197,  197, 1157,  197,  197, 1157,  197,  197, 1157,
      197, 1157,  197, 1157,  197,  197, 1157, 1157,  197, 1157,
      197,  197,  197, 1132, 1133, 1157,  197, 1157,  197,  197,
     1157, 1157,  197,  197,  197, 1157,  197, 1157, 1157, 1157,
      197,  197,  197,  197, 1157, 1134,  197,  197,  197, 1157,
      197, 1133,  197, 1157, 1157, 1157,  197, 1157, 1136,  197,
      197, 1157,  197,  197, 1157, 1157,  197,  197,  197,  197,
      197, 1135, 1134,  197,  197, 1157, 1157,  197,  197,  197,
      197, 1157, 1157, 1157,  197, 1136,  197, 1157, 1157,  197,
      197, 1157, 1157,  197, 1157,  197,  197, 1157, 1135,  197,

      197, 1157,  197,  197,  197,  197,  197,  197,  197,  197,
     1157,  197,  197, 1157,  197, 1157, 1157,  197, 1157,  197,
     1157, 1157,  197, 1157,  197, 1157,  197,  197,  197,  197,
      197,  197,  197,  197, 1157,  197,  197, 1157,  197,  197,
      197,  197, 1157, 1143,  197, 1157,  197, 1157,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197, 1157,  197,  197,  197,  197, 1157,  197, 1144, 1157,
     1143,  197,  197,  197,  197,  197, 1157,  197, 1157,  197,
      197,  197, 1157,  197,  197,  197, 1157,  197, 1157,  197,
      197,  197, 1157, 1157, 1157, 1144,  197,  197,  197,  197,

      197,  197,  197,  197,  197,  197, 1157, 1157, 1157,  197,
      197,  197,  197, 1145,  197,  197,  197, 1157, 1157,  197,
     1157, 1157, 1157,  197,  197,  197, 1157, 1157, 1157,  197,
      197,  197,  197, 1157, 1157, 1157,  197,  197,  197,  197,
     1145,  197,  197,  197,  197,  197,  197,  197,  197,  197,
     1157, 1148, 1157, 1157,  197,  197, 1147,  197, 1157,  197,
     1157, 1157, 1157,  197, 1146,  197, 1157,  197, 1157,  197,
     1157,  197,  197, 1157,  197,  197,  197, 1157, 1148,  197,
     1157,  197,  197, 1147,  197, 1152,  197, 1157, 1157,  197,
      197, 1146,  197,  197,  197,  197,  197,  197, 1157, 1157,

     1157, 1157,  197,  197,  197,  197,  197,  197, 1157, 1153,
     1157,  197, 1152,  197,  197, 1157,  197, 1154, 1157, 1157,
      197,  197,  197,  197,  197, 1157, 1157,  197,  197,  197,
      197,  197,  197,  197,  197,  197, 1153,  197,  197,  197,
      197,  197,  197,  197, 1154, 1157, 1157,  197,  197,  197,
      197, 1157, 1157,  197,  197,  197, 1157,  197, 1157,  197,
      197, 1157,  197,  197,  197,  197,  197, 1156, 1157,  197,
      197, 1157,  197,  197,  197, 1157,  197,  197, 1157, 1157,
      197,  197, 1157,  197,  197, 1157,  197, 1157,  197, 1157,
      197, 1157,  197,  197, 1156, 1157, 1157, 1157, 1157,  197,

      197, 1157, 1157, 1157,  197, 1157, 1157, 1157,  197, 1157,
      197, 1157, 1157, 1157, 1157,  197, 1157, 1157, 1157, 1157,
      197,   47,   47,   47,   47,   47,   90, 1157, 1157,   90,
       90,  183,  183,  183, 1157,  183,  185, 1157,  185,  185,
      185,  188, 1157,  188,  188,  188,  197, 1157,  197,  197,
      197,    7, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,

     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157
    } ;

static const flex_int16_t yy_chk[7520] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   15, 1160,
       15,   17,   17,   18,   18,   21,   22,   21,   50,   50,
       22,   23,   30,   21,  399,   21,   22,  282,   23,   21,
       21,   31,   56,   37,   56,   23,   22,   24,   23,  192,
       27,   24,   21,   22,   21,   24,   27,   22,   23,   30,
       21,   24,   21,   22,   24,   23,   21,   21,   31,   25,
       37,   25,   23,   22,   24,   23,   25,   27,   24,   43,

       43,   25,   24,   27,   45,   32,   28,  191,   24,   32,
      188,   24,   51,   51,   28,   32,   25,   94,   25,   93,
       28,   58,   58,   25,   59,   59,   43,   43,   25,   26,
       90,   45,   32,   28,   34,   33,   32,   26,  100,   33,
       26,   28,   32,   26,   29,   33,   26,   28,   34,   26,
       29,   29,   29,   87,   34,   34,   26,   29,   61,   38,
      101,   34,   33,   38,   26,  100,   33,   26,   60,   38,
       26,   29,   33,   26,   36,   34,   26,   29,   29,   29,
       35,   34,   34,   57,   29,   36,   38,  101,   35,  104,
       38,   36,   35,   88,   88,   35,   38,   41,   53,   41,

       72,   36,   41,   42,   72,   92,   92,   35,  186,  186,
       72,   42,   36,  102,  103,   35,  104,  103,   36,   35,
       72,  102,   35,   39,   41,   39,   41,   72,   39,   41,
       42,   72,   68,   39,   52,   39,   39,   72,   42,   68,
      102,  103,  105,   68,  103,   48,   68,   72,  102,   68,
       39,   46,   39,  107,   20,   39,  108,   73,  110,   68,
       39,   73,   39,   39,   40,  110,   68,   73,   40,  105,
       68,   40,   40,   68,  111,  117,   68,   73,   40,  118,
      107,   40,   19,  108,   73,  110,  190,  190,   73,   16,
       11,   40,  110,    7,   73,   40,  119,    4,   40,   40,

        3,  111,  117,    0,   73,   40,  118,    0,   40,   62,
       62,    0,   62,   62,   62,   62,   62,   62,  113,   62,
       62,   62,   78,  119,   69,   62,  120,   62,  113,   71,
       78,   69,   69,   62,   78,   62,   71,   78,   69,   62,
       62,   69,  114,   71,  121,  113,   71,  114,    0,   78,
        0,   69,   62,  120,   62,  113,   71,   78,   69,   69,
       62,   78,   62,   71,   78,   69,   62,   62,   69,  114,
       71,  121,    0,   71,  114,   62,   63,   63,    0,   63,
       63,   63,   63,   63,   63,   74,   63,   63,   63,   74,
        0,    0,   82,   63,   82,   74,   82,   63,   79,   82,

       77,  123,   79,   63,   82,   74,  124,   77,   79,  116,
      116,   77,   74,   63,   77,    0,   74,   77,   79,   82,
       63,   82,   74,   82,   63,   79,   82,   77,  123,   79,
       63,   82,   74,  124,   77,   79,  116,  116,   77,    0,
       63,   77,   63,   64,   77,   79,  125,   64,   83,  126,
       64,   64,   85,  127,  128,   83,   83,   64,  129,   85,
       64,  130,   83,    0,  132,   83,   85,   64,    0,   85,
       64,    0,    0,  125,   64,   83,  126,   64,   64,   85,
      127,  128,   83,   83,   64,  129,   85,   64,  130,   83,
       84,  132,   83,   85,   64,   65,   85,   84,   84,   65,

      133,   86,  135,   65,   84,   86,  136,   84,  138,   65,
      131,   86,   65,  131,    0,    0,  139,   84,  140,   65,
        0,   86,   65,  141,   84,   84,   65,  133,   86,  135,
       65,   84,   86,  136,   84,  138,   65,  131,   86,   65,
      131,  106,  106,  139,  144,  140,   65,   66,   86,  145,
      141,   66,  146,  147,   66,  106,   66,   66,  112,  112,
      112,   66,  112,  142,  148,  142,   66,   66,  106,  106,
        0,  144,    0,  149,   66,    0,  145,  150,   66,  146,
      147,   66,  106,   66,   66,  112,  112,  112,   66,  112,
      142,  148,  142,   66,   66,   67,  115,  143,  115,  143,

      149,  115,   67,   67,  150,  151,   67,  115,  153,   67,
      143,  154,   67,  155,  115,   67,    0,  156,  158,    0,
      160,    0,   67,  115,  143,  115,  143,  157,  115,   67,
       67,  157,  151,   67,  115,  153,   67,  143,  154,   67,
      155,  115,   67,   70,  156,  158,  122,  160,  122,   70,
       70,   70,  122,  161,  157,  159,   70,    0,  157,  122,
      159,   70,    0,  122,  162,  164,  165,    0,    0,    0,
       70,  166,    0,  122,  167,  122,   70,   70,   70,  122,
      161,  168,  159,   70,  137,    0,  122,  159,   70,   75,
      122,  162,  164,  165,  137,  163,   75,  170,  166,  137,

      137,  167,  169,   75,  163,  172,   75,    0,  168,   75,
       75,  137,  163,  169,  171,  171,   75,  174,    0,  175,
      174,  137,  163,   75,  170,    0,  137,  137,    0,  169,
       75,  163,  172,   75,  173,  176,   75,   75,   76,  163,
      169,  171,  171,   76,  174,   76,  175,  174,  179,  180,
      177,   76,   76,  178,  173,   76,  177,  181,   76,    0,
      284,  173,  176,    0,    0,   76,  178,    0,  286,    0,
       76,    0,   76,    0,    0,  179,  180,  177,   76,   76,
      178,  173,   76,  177,  181,   76,   80,  284,   80,  287,
      197,   80,   80,  178,  197,  286,   80,  289,   80,   80,

      197,  198,  198,  291,  292,  293,  198,  294,   80,    0,
      197,  295,  198,   80,    0,   80,  287,  197,   80,   80,
      296,  197,  198,   80,  289,   80,   80,  197,  198,  198,
      291,  292,  293,  198,  294,   80,   81,  197,  295,  198,
       81,  199,  298,   81,   81,  199,  299,  296,  300,  198,
       81,  199,  200,   81,  200,    0,  199,  301,    0,  200,
      200,  199,    0,   81,  200,  302,    0,   81,  199,  298,
       81,   81,  199,  299,    0,  300,    0,   81,  199,  200,
       81,  200,  201,  199,  301,  201,  200,  200,  199,  201,
      202,  200,  302,  208,  303,  208,  201,  202,  304,  201,

      208,  203,  305,  203,  202,  208,  307,  202,  203,  201,
        0,  308,  201,  309,  311,  203,  201,  202,  203,    0,
      208,  303,  208,  201,  202,  304,  201,  208,  203,  305,
      203,  202,  208,  307,  202,  203,  205,  205,  308,    0,
      309,  311,  203,  312,  205,  203,  204,  204,  205,    0,
        0,  205,  206,  310,  204,    0,    0,    0,  204,  206,
      204,  204,  313,  205,  205,    0,  206,    0,  310,  206,
      312,  205,  211,  204,  204,  205,  211,  207,  205,  206,
      310,  204,  211,  209,  207,  204,  206,  204,  204,  313,
      209,  207,  211,  206,  207,  310,  206,  209,  314,  211,

      209,    0,    0,  211,  207,    0,  315,  316,    0,  211,
      209,  207,  318,    0,  319,  320,  212,  209,  207,  211,
      212,  207,  321,  322,  209,  314,  212,  209,  210,  210,
      210,  212,  210,  315,  316,  210,  212,  323,    0,  318,
      210,  319,  320,  212,  324,    0,    0,  212,    0,  321,
      322,    0,    0,  212,    0,  210,  210,  210,  212,  210,
        0,    0,  210,  212,  323,  216,  325,  210,  213,  216,
      213,  324,  215,  213,  326,  216,  214,  327,  214,  213,
      215,  213,  214,  214,  215,  216,  213,  215,  214,    0,
        0,  213,  216,  325,    0,  213,  216,  213,    0,  215,

      213,  326,  216,  214,  327,  214,  213,  215,  213,  214,
      214,  215,  216,  213,  215,  214,  219,  217,  213,  217,
      218,  297,  328,  297,  217,  219,  329,  219,  218,  217,
      218,  330,  219,  331,  332,  218,  333,  219,  297,  334,
      218,    0,  335,  219,  217,  336,  217,  218,  297,  328,
      297,  217,  219,  329,  219,  218,  217,  218,  330,  219,
      331,  332,  218,  333,  219,  297,  334,  218,  220,  335,
      220,  221,  336,  221,  220,  222,    0,  222,  221,    0,
      220,  220,  222,  221,    0,  220,  337,  222,    0,  338,
      220,  224,    0,    0,    0,  220,    0,  220,  221,  224,

      221,  220,  222,  224,  222,  221,  224,  220,  220,  222,
      221,  223,  220,  337,  222,  223,  338,  220,  224,  225,
      226,  223,  226,  225,  227,  339,  224,  226,  227,  225,
      224,  223,  226,  224,  227,    0,    0,  340,  223,  225,
        0,  342,  223,    0,  227,    0,  225,  226,  223,  226,
      225,  227,  339,  228,  226,  227,  225,  228,  223,  226,
      229,  227,  229,  228,  340,  341,  225,  229,  342,  343,
      229,  227,  229,  228,  230,  341,  230,    0,  345,  346,
      228,  230,  347,  231,  228,    0,  230,  229,  348,  229,
      228,  231,  341,  349,  229,  231,  343,  229,  231,  229,

      228,  230,  341,  230,  232,  345,  346,  233,  230,  347,
      231,  233,  232,  230,    0,  348,  232,  233,  231,  232,
      349,    0,  231,  350,    0,  231,  351,  233,    0,  352,
        0,  232,  237,  236,  233,  236,  237,  234,  233,  232,
      236,  234,  237,  232,  233,  236,  232,  234,  234,  353,
      350,  238,  237,  351,  233,  238,  352,  234,    0,  237,
      236,  238,  236,  237,  234,  354,    0,  236,  234,  237,
      356,  238,  236,    0,  234,  234,  353,    0,  238,  237,
      357,    0,  238,  358,  234,  235,  359,  360,  238,  361,
        0,  239,  354,  235,    0,  235,  242,  356,  238,  239,

      235,  235,  362,  239,  242,  235,  239,  357,  242,  243,
      358,  242,  235,  359,  360,    0,  361,  243,  239,    0,
      235,  243,  235,  242,  243,  363,  239,  235,  235,  362,
      239,  242,  235,  239,  240,  242,  243,  364,  242,  240,
      365,  240,  240,  366,  243,  244,  240,  367,  243,  240,
        0,  243,  363,  244,    0,    0,  368,  244,  369,  370,
      244,  240,    0,    0,  364,  371,  240,  365,  240,  240,
      366,    0,  244,  240,  367,  372,  240,  241,    0,  241,
      244,  245,  241,  368,  244,  369,  370,  244,  374,  245,
      241,  375,  371,  245,  241,  245,  245,  241,  247,  246,

      247,    0,  372,  376,  241,  247,  241,  246,  245,  241,
      247,  246,    0,  246,  246,  374,  245,  241,  375,    0,
      245,  241,  245,  245,  241,  247,  246,  247,  248,  377,
      376,  249,  247,  378,  246,  248,  250,  247,  246,  249,
      246,  246,  248,  249,  250,  248,  249,  251,  250,  251,
      379,  250,  380,  381,    0,  248,  377,  251,  249,  382,
      378,  251,  248,  250,  251,    0,  249,    0,    0,  248,
      249,  250,  248,  249,  251,  250,  251,  379,  250,  380,
      381,  252,  253,  383,  251,  254,  382,  385,  251,  252,
      253,  251,  254,  252,  253,  252,  252,  253,    0,  254,

        0,    0,  254,  388,    0,    0,  386,    0,  252,  253,
      383,  256,  254,  389,  385,  386,  252,  253,  256,  254,
      252,  253,  252,  252,  253,  256,  254,  255,  256,  254,
      388,  255,  257,  386,  257,    0,  258,  255,  256,  257,
      389,  258,  386,  258,  257,  256,  390,  255,  258,    0,
        0,    0,  256,  258,  255,  256,    0,  391,  255,  257,
      259,  257,  259,  258,  255,    0,  257,  259,  258,  260,
      258,  257,  259,  390,  255,  258,  260,  387,  262,  387,
      258,  392,  393,  260,  391,  262,  260,  259,  394,  259,
      396,  397,  262,    0,  259,  262,  260,  395,    0,  259,

        0,  395,  515,  260,  387,  262,  387,    0,  392,  393,
      260,  516,  262,  260,  261,  394,    0,  396,  397,  262,
      263,  517,  262,  261,  395,  261,  264,  263,  395,  515,
      261,  261,  265,  264,  263,  261,  518,  263,  516,  265,
      264,  261,    0,  264,  519,  520,  265,  263,  517,  265,
      261,    0,  261,  264,  263,    0,    0,  261,  261,  265,
      264,  263,  261,  518,  263,  521,  265,  264,  266,  266,
      264,  519,  520,  265,  522,  266,  265,  267,  267,  267,
      523,  525,  266,  268,  267,  266,  529,  268,  530,  267,
        0,    0,  521,  268,    0,  266,  266,    0,    0,    0,

      531,  522,  266,  268,  267,  267,  267,  523,  525,  266,
      268,  267,  266,  529,  268,  530,  267,  269,  269,  269,
      268,  270,  274,  270,  269,  270,  274,  531,  270,  269,
      268,  533,  274,  270,    0,    0,    0,    0,  534,    0,
        0,    0,  274,    0,  269,  269,  269,  271,  270,  274,
      270,  269,  270,  274,  271,  270,  269,  535,  533,  274,
      270,  271,  273,  272,  271,  534,  272,  271,  272,  274,
      273,    0,  273,  272,  271,    0,    0,  273,  272,    0,
        0,  271,  273,    0,  535,  536,  537,    0,  271,  273,
      272,  271,    0,  272,  271,  272,  275,  273,  275,  273,

      272,    0,  275,  275,  273,  272,  276,  277,  275,  273,
      276,  277,  536,  537,  279,    0,  276,  277,  538,  276,
        0,  279,  539,  275,  540,  275,  276,  277,  279,  275,
      275,  279,  278,  276,  277,  275,  278,  276,  277,    0,
        0,  279,  278,  276,  277,  538,  276,  278,  279,  539,
      400,  540,  278,  276,  277,  279,  401,  400,  279,  278,
      401,  402,    0,  278,  400,  402,  401,  400,    0,  278,
        0,  402,    0,    0,  278,  541,  401,  400,    0,  278,
        0,  402,    0,  401,  400,  403,    0,  401,  402,  403,
        0,  400,  402,  401,  400,  403,    0,  404,  402,  404,

      406,  542,  541,  401,  404,  403,  543,  406,  402,  404,
      544,  405,  403,  405,  406,    0,  403,  406,  405,    0,
        0,  547,  403,  405,  404,    0,  404,  406,  542,    0,
        0,  404,  403,  543,  406,  407,  404,  544,  405,  408,
      405,  406,  407,    0,  406,  405,  408,  409,  547,  407,
      405,  409,  407,  408,    0,  548,  408,  409,  412,    0,
      412,  549,  407,    0,    0,  412,  408,  409,    0,  407,
      412,  410,  550,  408,  409,  410,  407,  551,  409,  407,
      408,  410,  548,  408,  409,  412,  411,  412,  549,  410,
      411,  410,  412,  413,  409,  413,  411,  412,  410,  550,

      413,    0,  410,    0,  551,  413,  411,  552,  410,  553,
        0,    0,    0,  411,    0,  555,  410,  411,  410,    0,
      413,  415,  413,  411,  414,  556,  414,  413,  415,  559,
      414,  416,  413,  411,  552,  415,  553,  414,  415,  416,
        0,  414,  555,  416,  560,  562,  416,    0,  415,  565,
        0,  414,  556,  414,    0,  415,  559,  414,  416,    0,
      566,  567,  415,  568,  414,  415,  416,  417,  414,  418,
      416,  560,  562,  416,  417,  417,  565,  418,    0,  417,
      569,  418,  417,  418,  418,  419,  420,  566,  567,  419,
      568,  572,    0,  420,  417,  419,  418,    0,    0,  576,

      420,  417,  417,  420,  418,  419,  417,  569,  418,  417,
      418,  418,  419,  420,    0,  578,  419,  421,  572,  421,
      420,  422,  419,    0,  421,  422,  576,  420,  570,  421,
      420,  422,  419,  423,  580,  582,    0,  423,  424,  570,
      424,  422,  578,  423,  421,  424,  421,    0,  422,  583,
      424,  421,  422,  423,  585,  570,  421,  586,  422,  425,
      423,  580,  582,  425,  423,  424,  570,  424,  422,  425,
      423,  426,  424,  581,  581,    0,  583,  424,  426,  425,
      423,  585,    0,  587,  586,  426,  425,  427,  426,  429,
      425,  427,  588,  429,  589,  591,  425,  427,  426,  429,

      581,  581,  427,  592,    0,  426,  425,  427,    0,  429,
      587,  428,  426,  428,  427,  426,  429,  428,  427,  588,
      429,  589,  591,  428,  427,  593,  429,  430,    0,  427,
      592,  430,  431,  428,  427,  431,  429,  430,  428,  431,
      428,    0,  430,    0,  428,  431,    0,  430,    0,    0,
      428,  594,  593,    0,  430,  431,  435,  432,  430,  431,
      428,  432,  431,  435,  430,  595,  431,  432,  432,  430,
      435,  433,  431,  435,  430,  433,  434,  432,  594,  596,
      434,  433,  431,  435,  432,    0,  434,    0,  432,  436,
      435,  433,  595,  436,  432,  432,  434,  435,  433,  436,

      435,    0,  433,  434,  432,  597,  596,  434,  433,  436,
        0,    0,  438,  434,  438,  437,  436,  437,  433,  438,
      436,  437,    0,  434,  438,  598,  436,  437,  439,    0,
      439,  441,  597,  441,  599,  439,  436,  437,  441,  438,
      439,  438,  437,  441,  437,    0,  438,  600,  437,  440,
      602,  438,  598,  603,  437,  439,  440,  439,  441,  604,
      441,  599,  439,  440,  437,  441,  440,  439,  442,    0,
      441,    0,  442,    0,  600,  443,  440,  602,  442,  605,
      603,  606,  443,  440,  444,    0,  604,    0,  442,  443,
      440,  444,  443,  440,  609,  442,  444,    0,  444,  442,

      445,  444,  443,    0,    0,  442,  605,  445,  606,  443,
        0,  444,  445,    0,  445,  442,  443,  445,  444,  443,
      447,  609,  610,  444,  446,  444,  446,  445,  444,    0,
      447,  446,  447,  611,  445,  613,  446,  447,  614,  445,
      448,  445,  447,    0,  445,  615,  450,  447,  448,  610,
      450,  446,  448,  446,  449,  448,  450,  447,  446,  447,
      611,  449,  613,  446,  447,  614,  450,  448,  449,  447,
      451,  449,  615,  450,  451,  448,    0,  450,  616,  448,
      451,  449,  448,  450,    0,  451,    0,    0,  449,  452,
      451,    0,    0,  450,    0,  449,  452,  451,  449,  617,

      618,  451,    0,  452,  453,  616,  452,  451,  454,  455,
      619,  453,  451,  455,  453,  454,  452,  451,  453,  455,
        0,  453,  454,  452,  456,  454,  617,  618,  456,  455,
      452,  453,  620,  452,  456,  454,  455,  619,  453,  622,
      455,  453,  454,  457,  456,  453,  455,  457,  453,  454,
      624,  456,  454,  457,  741,  456,  455,  459,  458,  620,
      743,  456,  458,  457,  745,  459,  622,  460,  458,  459,
      457,  456,  459,    0,  457,  460,    0,  624,  458,  460,
      457,  741,  460,    0,  459,  458,    0,  743,    0,  458,
      457,  745,  459,    0,  460,  458,  459,    0,    0,  459,

      461,  746,  460,  463,  747,  458,  460,  463,  461,  460,
      462,  748,  461,  463,  749,  461,  464,  750,  462,  751,
      464,  752,  462,  463,  462,  462,  464,  461,  746,  754,
      463,  747,    0,  755,  463,  461,  464,  462,  748,  461,
      463,  749,  461,  464,  750,  462,  751,  464,  752,  462,
      463,  462,  462,  464,  465,  465,  754,  466,  756,  465,
      755,  757,  467,  464,  466,  465,  468,  758,  467,  467,
        0,  466,  468,  468,  466,  465,  467,  760,    0,  467,
      468,  465,  465,  468,  466,  756,  465,  761,  757,  467,
      762,  466,  465,  468,  758,  467,  467,  469,  466,  468,

      468,  466,  465,  467,  760,  469,  467,  468,  470,  469,
      468,  763,  469,  471,  761,  764,  470,  762,  472,    0,
      470,  471,  470,  470,  469,  471,  472,    0,  471,    0,
      472,  765,  469,  472,  766,  470,  469,    0,  763,  469,
      471,    0,  764,  470,  473,  472,  473,  470,  471,  470,
      470,  473,  471,  472,  474,  471,  473,  472,  765,  767,
      472,  766,  474,  475,  476,  475,  474,    0,  476,  474,
      475,  473,    0,  473,  476,  475,    0,    0,  473,    0,
      768,  474,  769,  473,  476,  772,  767,    0,    0,  474,
      475,  476,  475,  474,  477,  476,  474,  475,  477,  478,

      773,  476,  475,  479,  477,  479,  478,  768,  775,  769,
      479,  476,  772,  478,  477,  479,  478,    0,  777,    0,
      780,  477,  781,  783,    0,  477,  478,  773,    0,    0,
      479,  477,  479,  478,  788,  775,  782,  479,  790,  782,
      478,  477,  479,  478,  480,  777,  480,  780,  480,  781,
      783,  480,  481,  481,  481,  482,  480,  791,  792,  481,
      483,  788,  482,  782,  481,  790,  782,  483,    0,  482,
      795,  480,  482,  480,  483,  480,    0,  483,  480,  481,
      481,  481,  482,  480,  791,  792,  481,  483,  484,  482,
        0,  481,  796,    0,  483,  484,  482,  795,    0,  482,

      797,  483,  484,  485,  483,  484,  486,  484,  486,  798,
      485,  799,    0,  486,    0,  484,    0,  485,  486,  796,
      485,  487,  484,  800,    0,  487,    0,  797,    0,  484,
      485,  487,  484,  486,  484,  486,  798,  485,  799,  488,
      486,  487,    0,  488,  485,  486,    0,  485,  487,  488,
      800,  489,  487,  490,  802,  489,    0,  490,  487,  488,
      492,  489,  492,  490,  803,  491,  488,  492,  487,  491,
      488,  489,  492,  490,    0,  491,  488,  804,  489,  805,
      490,  802,  489,  491,  490,  491,  488,  492,  489,  492,
      490,  803,  491,  806,  492,    0,  491,    0,  489,  492,

      490,  493,  491,  493,  804,  807,  805,  808,  493,  493,
      491,  809,  491,  493,  494,  810,  494,  495,  811,  495,
      806,  494,  494,    0,  495,    0,  494,    0,  493,  495,
      493,    0,  807,    0,  808,  493,  493,  812,  809,    0,
      493,  494,  810,  494,  495,  811,  495,  813,  494,  494,
      496,  495,  496,  494,  496,  814,  495,  496,  497,    0,
      497,  498,  496,  498,  812,  497,  497,    0,  498,    0,
      497,    0,  816,  498,  813,    0,  499,  496,  817,  496,
      499,  496,  814,    0,  496,  497,  499,  497,  498,  496,
      498,  818,  497,  497,  500,  498,  499,  497,  500,  816,

      498,  820,  501,  499,  500,  817,  501,  499,  502,    0,
      502,    0,  501,  499,  500,  502,    0,    0,  818,    0,
      502,  500,  501,  499,  821,  500,  822,    0,  820,  501,
      909,  500,  911,  501,  504,  502,  503,  502,  504,  501,
      913,  500,  502,  503,  504,  503,  504,  502,  505,  501,
      503,  821,  505,  822,  504,  503,    0,  909,  505,  911,
        0,  504,    0,  503,  914,  504,  915,  913,  505,  506,
      503,  504,  503,  504,  917,  505,  506,  503,    0,  505,
      919,  504,  503,  506,  920,  505,  506,  507,    0,  507,
      508,  914,  921,  915,  507,  505,  506,  509,  508,  507,

      509,  917,  508,  506,  922,  508,  924,  919,  509,    0,
      506,  920,  509,  506,  507,  509,  507,  508,    0,  921,
      926,  507,  512,    0,  509,  508,  507,  509,  510,  508,
      512,  922,  508,  924,  512,  509,  510,  512,  511,  509,
      510,    0,  509,  510,  930,  510,  511,  926,    0,  512,
      511,  932,  511,  511,    0,  510,    0,  512,    0,    0,
      933,  512,  939,  510,  512,  511,  940,  510,  513,  514,
      510,  930,  510,  511,  627,  513,  514,  511,  932,  511,
      511,  627,  513,  514,  941,  513,  514,  933,  627,  939,
      628,  627,    0,  940,    0,  513,  514,  628,    0,    0,

      944,  627,  513,  514,  628,  945,    0,  628,  627,  513,
      514,  941,  513,  514,    0,  627,  629,  628,  627,  630,
      629,  631,  947,  630,  628,  632,  629,  944,  631,  630,
      948,  628,  945,  632,  628,  631,  629,  632,  631,  630,
      632,  633,    0,  629,  949,  633,  630,  629,  631,  947,
      630,  633,  632,  629,    0,  631,  630,  948,    0,    0,
      632,  633,  631,  629,  632,  631,  630,  632,  633,  634,
      635,  949,  633,    0,  635,  636,    0,  634,  633,  636,
      635,  634,    0,  950,  634,  636,  637,    0,  633,    0,
      635,    0,  952,  637,    0,  636,  634,  635,    0,    0,

      637,  635,  636,  637,  634,    0,  636,  635,  634,  638,
      950,  634,  636,  637,  639,  953,  638,  635,  640,  952,
      637,  639,  636,  638,    0,  640,  638,  637,  639,    0,
      637,  639,  640,  954,    0,  640,  638,  641,    0,  957,
        0,  639,  953,  638,  641,  640,    0,  959,  639,  641,
      638,  641,  640,  638,  641,  639,  643,  642,  639,  640,
      954,  642,  640,  643,  641,  644,  957,  642,  961,  962,
      643,  641,  644,  643,  959,  963,  641,  642,  641,  644,
      964,  641,  644,  643,  642,    0,  965,    0,  642,  970,
      643,  645,  644,  971,  642,  961,  962,  643,  645,  644,

      643,    0,  963, 1041,  642,  645,  644,  964,  645,  644,
      645,    0,  646,  965,  646,  647,  970,  647,  645,  646,
      971, 1042,  647,  647,  646,  645,  648,  647,  648,    0,
     1041,    0,  645,  648,    0,  645,    0,  645,  648,  646,
        0,  646,  647, 1045,  647, 1046,  646,    0, 1042,  647,
      647,  646, 1051,  648,  647,  648,  649,  649,  649,  650,
      648,  651, 1052,  649, 1054,  648, 1055,  650,  649,  651,
     1045,  650, 1046,  651,  650,  651,  651,    0, 1059, 1051,
     1060,    0,    0,  649,  649,  649,  650,    0,  651, 1052,
      649, 1054,  652, 1055,  650,  649,  651,  653,  650,  652,

      651,  650,  651,  651,  653, 1059,  652, 1060,  654,  652,
      654,  653, 1062,    0,  653,  654, 1064,    0, 1065,  652,
     1067, 1068,  654,    0,  653,  654,  652, 1108,    0,    0,
      655,  653, 1111,  652,  655,  654,  652,  654,  653, 1062,
      655,  653,  654, 1064,  656, 1065,  656, 1067, 1068,  654,
      655,  656,  654,  657, 1108,  657,  656,  655, 1114, 1111,
      657,  655,  658,    0,  658,  657,    0,  655,    0,  658,
        0,  656,    0,  656,  658,    0, 1118,  655,  656, 1119,
      657, 1120,  657,  656, 1137, 1114,  659,  657,  659,  658,
      659,  658,  657,  659, 1139,  660,  658,  660,  659,  660,

     1142,  658,  660, 1118,  661, 1151, 1119,  660, 1120,    0,
        0, 1137,  661,  659,    0,  659,  661,  659,    0,  661,
      659, 1139,  660,    0,  660,  659,  660, 1142,    0,  660,
      662,  661, 1151,  663,  660,    0,    0,    0,  662,  661,
      663,  664,  662,  661,  662,  662,  661,  663,  664,    0,
      663,    0,    0,    0,    0,  664,    0,  662,  664,    0,
      663,    0,    0,    0,    0,  662,  665,  663,  664,  662,
      665,  662,  662,    0,  663,  664,  665,  663,    0,  666,
      667,    0,  664,  666,  667,  664,  665,  668,    0,  666,
      667,  669,    0,  665,  668,  667,    0,  665,  669,  666,

      667,  668,    0,  665,  668,  669,  666,  667,  669,    0,
      666,  667,    0,  665,  668,    0,  666,  667,  669,    0,
        0,  668,  667,  670,    0,  669,  666,  667,  668,  671,
      670,  668,  669,    0,  672,  669,  671,  670,  673,    0,
      670,  672,    0,  671,    0,  673,  671,    0,  672,  672,
      670,  672,  673,    0,  674,  673,  671,  670,    0,    0,
        0,  672,  674,  671,  670,  673,  674,  670,  672,  674,
      671,    0,  673,  671,    0,  672,  672,    0,  672,  673,
      675,  674,  673,    0,    0,    0,  676,    0,  675,  674,
        0,  678,  675,  674,  676,  675,  674,    0,  676,  678,

      677,  676,    0,  678,  677,    0,  678,  675,    0,    0,
      677,    0,    0,  676,    0,  675,    0,    0,  678,  675,
      677,  676,  675,    0,    0,  676,  678,  677,  676,    0,
      678,  677,  679,  678,  679,    0,    0,  677,  680,  679,
      681,    0,    0,    0,  679,    0,  680,  677,  681,    0,
      680,    0,  681,  680,    0,  681,    0,    0,    0,  679,
        0,  679,    0,    0,    0,  680,  679,  681,    0,    0,
        0,  679,    0,  680,    0,  681,    0,  680,  683,  681,
      680,    0,  681,  682,  682,  684,  683,  684,    0,    0,
      683,  682,  684,  683,  685,  682,  685,  684,  682,    0,

        0,  685,    0,    0,    0,  683,  685,    0,    0,    0,
      682,  682,  684,  683,  684,    0,    0,  683,  682,  684,
      683,  685,  682,  685,  684,  682,    0,  686,  685,  686,
      687,    0,  687,  685,  686,    0,  688,  687,  688,  686,
        0,    0,  687,  688,  688,    0,    0,    0,  688,    0,
        0,    0,    0,    0,  686,    0,  686,  687,    0,  687,
      689,  686,  689,  688,  687,  688,  686,  689,    0,  687,
      688,  688,  689,  692,  690,  688,  690,  692,  691,    0,
      691,  690,    0,  692,    0,  691,  690,  689,    0,  689,
      691,    0,    0,  692,  689,    0,    0,    0,    0,  689,

      692,  690,    0,  690,  692,  691,    0,  691,  690,    0,
      692,  694,  691,  690,  693,    0,  693,  691,  694,    0,
      692,  693,  693,  695,    0,  694,  693,    0,  694,    0,
      695,    0,    0,    0,    0,    0,    0,  695,  694,    0,
      695,  693,    0,  693,  696,  694,    0,    0,  693,  693,
      695,  696,  694,  693,    0,  694,  698,  695,  696,    0,
      698,  696,    0,  697,  695,  697,  698,  695,    0,    0,
      697,  696,  699,    0,    0,    0,  698,  697,  696,  699,
      697,    0,    0,  698,  700,  696,  699,  698,  696,  699,
      697,  700,  697,  698,    0,    0,    0,  697,  700,  699,

        0,  700,    0,  698,  697,  701,  699,  697,    0,    0,
        0,  700,  701,  699,    0,    0,  699,  701,  700,  701,
      702,    0,  701,    0,  703,  700,  704,  702,  700,    0,
        0,  703,  701,  704,  702,    0,    0,  702,  703,  701,
      704,  703,    0,  704,  701,    0,  701,  702,    0,  701,
        0,  703,  705,  704,  702,    0,    0,    0,  703,  705,
      704,  702,    0,    0,  702,  703,  705,  704,  703,  705,
      704,  705,    0,  706,  707,  708,    0,    0,    0,  705,
      706,  707,  708,    0,    0,  706,  705,  706,  707,  708,
      706,  707,  708,  705,  708,    0,  705,    0,  705,    0,

      706,  707,  708,    0,    0,    0,    0,  706,  707,  708,
        0,    0,  706,  710,  706,  707,  708,  706,  707,  708,
      710,  708,  709,  709,    0,  710,  711,  710,  711,  709,
      710,    0,    0,  711,    0,    0,  709,    0,  711,  709,
      710,    0,    0,    0,    0,    0,    0,  710,    0,  709,
      709,    0,  710,  711,  710,  711,  709,  710,  712,    0,
      711,    0,    0,  709,    0,  711,  709,  712,  713,  712,
      713,  714,  715,  714,  712,  713,  715,    0,  714,  712,
      713,    0,  715,  714,    0,  712,    0,    0,    0,    0,
        0,    0,  715,    0,  712,  713,  712,  713,  714,  715,

      714,  712,  713,  715,  716,  714,  712,  713,  716,  715,
      714,    0,  717,  718,  716,    0,  717,  718,    0,  715,
        0,    0,  717,  718,  716,    0,  719,    0,    0,    0,
      719,  716,  717,  718,    0,  716,  719,    0,  720,  717,
      718,  716,  720,  717,  718,    0,  719,    0,  720,  717,
      718,  716,    0,  719,  721,    0,  721,  719,  720,  717,
      718,  721,    0,  719,  722,  720,  721,    0,  722,  720,
      723,    0,  723,  719,  722,  720,    0,  723,    0,    0,
        0,  721,  723,  721,  722,  720,    0,    0,  721,    0,
        0,  722,    0,  721,    0,  722,  724,  723,  724,  723,

      726,  722,  726,  724,  723,  725,    0,  726,  724,  723,
        0,  722,  726,    0,  725,    0,  725,    0,    0,    0,
        0,  725,    0,  724,    0,  724,  725,  726,    0,  726,
      724,    0,  725,  728,  726,  724,    0,  727,    0,  726,
      728,  725,    0,  725,  729,  727,    0,  728,  725,  727,
      728,  729,  727,  725,    0,    0,    0,    0,  729,    0,
      728,  729,    0,  729,  727,    0,    0,  728,    0,    0,
        0,  729,  727,    0,  728,  730,  727,  728,  729,  727,
        0,  730,  730,  731,  732,  729,    0,  731,  729,  730,
      729,  732,  730,  731,    0,    0,    0,    0,  732,    0,

        0,  732,  730,  731,    0,    0,    0,    0,  730,  730,
      731,  732,    0,    0,  731,  733,  730,    0,  732,  730,
      731,    0,  733,  734,    0,  732,    0,    0,  732,  733,
      731,  734,  733,  735,    0,  734,    0,    0,  734,    0,
        0,  735,  733,  736,    0,  735,    0,  736,  735,  733,
      734,  737,    0,  736,    0,  737,  733,    0,  734,  733,
      735,  737,  734,  736,    0,  734,    0,    0,  735,  738,
      736,  737,  735,  738,  736,  735,    0,  824,  737,  738,
      736,  824,  737,    0,    0,    0,    0,  824,  737,  738,
      736,  825,    0,    0,    0,  825,  738,  824,  737,  826,

      738,  825,    0,  826,  824,    0,  738,    0,  824,  826,
        0,  825,    0,  827,  824,    0,  738,  827,  825,  826,
      826,  828,  825,  827,  824,  828,  826,    0,  825,    0,
      826,  828,    0,  827,    0,  829,  826,    0,  825,  829,
      827,  828,    0,    0,  827,  829,  826,  826,  828,  830,
      827,    0,  828,  830,    0,  829,    0,  832,  828,  830,
      827,    0,  829,  831,  832,    0,  829,  831,  828,  830,
        0,  832,  829,  831,  832,    0,  830,    0,  831,    0,
      830,    0,  829,  831,  832,  833,  830,    0,  833,    0,
      831,  832,  833,    0,  831,    0,  830,    0,  832,  833,

      831,  832,  833,    0,    0,  831,  834,    0,  835,    0,
      831,    0,  833,    0,  834,  833,  835,  836,  834,  833,
      835,  834,  835,  835,  836,    0,  833,    0,    0,  833,
        0,  836,  837,  834,  836,  835,  837,    0,    0,    0,
        0,  834,  837,  835,  836,  834,    0,  835,  834,  835,
      835,  836,  837,    0,    0,    0,  838,    0,  836,  837,
      838,  836,    0,  837,  839,    0,  838,    0,  839,  837,
        0,    0,    0,    0,  839,    0,  838,    0,  840,  837,
        0,    0,  840,  838,  839,  841,    0,  838,  840,    0,
      843,  839,  841,  838,  843,  839,    0,    0,  840,  841,

      843,  839,  841,  838,    0,  840,  842,    0,  842,  840,
      843,  839,  841,  842,    0,  840,    0,  843,  842,  841,
        0,  843,    0,    0,  844,  840,  841,  843,  844,  841,
        0,    0,  845,  842,  844,  842,  845,  843,    0,    0,
      842,    0,  845,    0,  844,  842,  847,    0,  847,    0,
      846,  844,  845,  847,  846,  844,    0,    0,  847,  845,
      846,  844,  848,  845,  849,  846,  848,    0,  849,  845,
      846,  844,  848,  847,  849,  847,    0,  846,    0,  845,
      847,  846,  848,    0,  849,  847,    0,  846,    0,  848,
      850,  849,  846,  848,  850,  849,    0,  846,  851,  848,

      850,  849,  851,    0,    0,  850,    0,    0,  851,  848,
      850,  849,  852,  851,  852,    0,  853,  850,  851,  852,
      853,  850,    0,    0,  852,  851,  853,  850,    0,  851,
        0,    0,  850,    0,    0,  851,  853,  850,    0,  852,
      851,  852,  854,  853,  854,  851,  852,  853,  854,    0,
        0,  852,  855,  853,  854,    0,  855,  856,    0,    0,
        0,  856,  855,  853,  854,    0,  858,  856,  858,  854,
      857,  854,  855,  858,  857,  854,    0,  856,  858,  855,
      857,  854,    0,  855,  856,  857,    0,    0,  856,  855,
      857,  854,    0,  858,  856,  858,  859,  857,  859,  855,

      858,  857,    0,  859,  856,  858,    0,  857,  859,  860,
        0,    0,  857,    0,  860,    0,  860,  857,    0,    0,
      861,  860,  861,  859,  866,  859,  860,  861,  866,    0,
      859,    0,  861,    0,  866,  859,  860,    0,  862,    0,
      862,  860,    0,  860,  866,  862,  862,  861,  860,  861,
      862,  866,    0,  860,  861,  866,  863,    0,  863,  861,
        0,  866,  864,  863,  864,  862,  873,  862,  863,  864,
      873,  866,  862,  862,  864,    0,  873,  862,    0,    0,
      865,    0,  865,  863,    0,  863,  873,  865,  865,  864,
      863,  864,  865,  873,    0,  863,  864,  873,  867,    0,

      867,  864,    0,  873,  868,  867,  868,  865,  867,  865,
      867,  868,    0,  873,  865,  865,  868,    0,    0,  865,
        0,    0,  869,    0,  869,  867,    0,  867,    0,  869,
        0,  868,  867,  868,  869,  867,    0,  867,  868,    0,
      870,    0,  870,  868,    0,    0,  871,  870,  871,  869,
      874,  869,  870,  871,  874,    0,  869,    0,  871,    0,
      874,  869,    0,    0,  872,    0,  872,  870,    0,  870,
      874,  872,    0,  871,  870,  871,  872,  874,    0,  870,
      871,  874,  875,    0,    0,  871,    0,  874,  876,  875,
        0,  872,    0,  872,  877,  876,  875,  874,  872,  875,

      878,  877,  876,  872,    0,  876,    0,  878,  877,  875,
        0,  877,    0,  877,  878,  876,  875,  878,    0,    0,
        0,  877,  876,  875,    0,    0,  875,  878,  877,  876,
        0,    0,  876,    0,  878,  877,  879,    0,  877,    0,
      877,  878,  880,  879,  878,    0,  880,  881,    0,    0,
      879,  882,  880,  879,  881,    0,  883,    0,  882,    0,
      883,  881,  880,  879,  881,  882,  883,    0,  882,  880,
      879,    0,    0,  880,  881,    0,  883,  879,  882,  880,
      879,  881,    0,  883,    0,  882,  884,  883,  881,  880,
      884,  881,  882,  883,  885,  882,  884,    0,  885,    0,

        0,    0,  887,  883,  885,    0,  884,    0,  886,  887,
        0,    0,  886,  884,  885,    0,  887,  884,  886,  887,
      888,  885,    0,  884,    0,  885,    0,  888,  886,  887,
        0,  885,    0,  884,  888,  886,  887,  888,    0,  886,
      891,  885,    0,  887,  891,  886,  887,  888,    0,  889,
      891,  890,  889,    0,  888,  886,  889,    0,  890,    0,
      891,  888,    0,  889,  888,  890,  889,  891,  890,    0,
      890,  891,    0,    0,  893,    0,  889,  891,  890,  889,
        0,  893,    0,  889,    0,  890,    0,  891,  893,    0,
      889,  893,  890,  889,    0,  890,    0,  890,  892,  892,

      894,  893,  894,  892,    0,    0,  895,  894,  893,  892,
        0,    0,  894,  895,    0,  893,    0,    0,  893,  892,
      895,    0,    0,  895,  896,  892,  892,  894,    0,  894,
      892,  896,    0,  895,  894,    0,  892,    0,  896,  894,
      895,  896,  897,  896,  897,  898,  892,  895,    0,  897,
      895,  896,  898,    0,  897,    0,    0,    0,  896,  898,
      899,    0,  898,    0,    0,  896,  900,  899,  896,  897,
      896,  897,  898,  900,  899,    0,  897,  899,  901,  898,
      900,  897,  901,  900,    0,    0,  898,  899,  901,  898,
        0,  902,  902,  900,  899,    0,  902,    0,  901,    0,

      900,  899,  902,    0,  899,  901,    0,  900,    0,  901,
      900,    0,  902,    0,    0,  901,  903,  904,  902,  902,
      903,  904,    0,  902,  906,  901,  903,  904,  905,  902,
      905,  906,    0,    0,    0,  905,  903,  904,  906,  902,
      905,  906,  907,  903,  904,    0,    0,  903,  904,  907,
        0,  906,    0,  903,  904,  905,  907,  905,  906,  907,
        0,    0,  905,  903,  904,  906,    0,  905,  906,  907,
      908,  972,    0,    0,    0,  972,  907,  908,    0,    0,
        0,  972,    0,  907,  908,  973,  907,  908,    0,  973,
        0,  972,    0,    0,  974,  973,  974,  908,  972,    0,

        0,  974,  972,    0,  908,  973,  974,    0,  972,    0,
        0,  908,  973,  975,  908,  975,  973,  976,  972,  976,
      975,  974,  973,  974,  976,  975,    0,    0,  974,  976,
        0,    0,  973,  974,    0,  977,  978,    0,  978,  977,
      975,    0,  975,  978,  976,  977,  976,  975,  978,    0,
        0,  976,  975,    0,    0,  977,  976,  979,    0,  979,
        0,    0,  977,  978,  979,  978,  977,    0,    0,  979,
      978,  980,  977,  980,    0,  978,    0,    0,  980,    0,
        0,    0,  977,  980,  979,  981,  979,  981,    0,    0,
        0,  979,  981,    0,    0,  983,  979,  981,  980,    0,

      980,  982,  982,  982,  983,  980,  983,    0,  982,    0,
      980,  983,  981,  982,  981,    0,  983,    0,    0,  981,
        0,    0,  983,    0,  981,  984,    0,  984,  982,  982,
      982,  983,  984,  983,  985,  982,  985,  984,  983,    0,
      982,  985,  985,  983,    0,    0,  985,    0,  986,    0,
      986,    0,  984,    0,  984,  986,    0,    0,    0,  984,
      986,  985,  987,  985,  984,    0,    0,    0,  985,  985,
        0,    0,  987,  985,  987,  986,  988,  986,  988,  987,
        0,  989,  986,  988,  987,    0,    0,  986,  988,  987,
      989,    0,  989,    0,    0,    0,    0,  989,    0,  987,

        0,  987,  989,  988,    0,  988,  987,    0,  989,    0,
      988,  987,    0,    0,  990,  988,  990,  989,  991,  989,
      991,  990,    0,    0,  989,  991,  990,    0,    0,  989,
      991,    0,  992,    0,  992,    0,  993,    0,    0,  992,
      993,  990,    0,  990,  992,  991,  993,  991,  990,    0,
      994,    0,  991,  990,  994,    0,  993,  991,    0,  992,
      994,  992,  995,  993,  995,    0,  992,  993,    0,  995,
      994,  992,    0,  993,  995,    0,    0,  994,  996,    0,
      996,  994,    0,  993,    0,  996,  996,  994,    0,  995,
      996,  995,  997,    0,  997,    0,  995,  994,    0,  997,

        0,  995,    0,    0,  997,  996,    0,  996,  998,    0,
      998,    0,  996,  996,    0,  998,  999,  996,  999,  997,
      998,  997, 1000,  999, 1000,    0,  997,    0,  999, 1000,
        0,  997,    0,    0, 1000,  998,    0,  998,    0,    0,
        0,    0,  998,  999,    0,  999, 1001,  998, 1001, 1000,
      999, 1000, 1002, 1001,    0,  999, 1000,    0, 1001, 1002,
        0, 1000,    0,    0, 1003,    0, 1002,    0, 1003, 1002,
        0,    0,    0, 1001, 1003, 1001,    0,    0,    0, 1002,
     1001,    0,    0, 1004, 1003, 1001, 1002,    0,    0,    0,
     1004, 1003, 1005, 1002,    0, 1003, 1002, 1004, 1006, 1005,

     1004, 1003,    0,    0,    0, 1006, 1005,    0,    0, 1005,
     1004, 1003, 1006,    0,    0, 1006, 1007, 1004, 1007, 1005,
        0,    0,    0, 1007, 1004, 1006, 1005, 1004, 1007,    0,
     1008,    0, 1006, 1005, 1009,    0, 1005, 1008,    0, 1006,
        0, 1009, 1006, 1007, 1008, 1007, 1010, 1008, 1009,    0,
     1007, 1009, 1011, 1010,    0, 1007, 1011, 1008,    0,    0,
     1010, 1009, 1011, 1010, 1008, 1010, 1012,    0, 1009,    0,
     1012, 1008, 1011, 1010, 1008, 1009, 1012, 1013, 1009, 1011,
     1010, 1014,    0, 1011, 1013,    0, 1012, 1010, 1014, 1011,
     1010, 1013, 1010, 1012, 1013, 1014,    0, 1012, 1014, 1011,

     1015,    0, 1015, 1012, 1013,    0,    0, 1015, 1014,    0,
        0, 1013,    0, 1012, 1015, 1014,    0, 1015, 1013,    0,
        0, 1013, 1014,    0,    0, 1014, 1016, 1015, 1016, 1015,
     1017,    0, 1017, 1016, 1015,    0,    0, 1017,    0,    0,
     1016, 1015, 1017, 1016, 1015,    0,    0,    0,    0, 1018,
        0, 1018,    0, 1016,    0, 1016, 1018, 1017,    0, 1017,
     1016, 1018,    0,    0, 1017,    0,    0, 1016,    0, 1017,
     1016,    0, 1019, 1020, 1019, 1020, 1018,    0, 1018, 1019,
     1020,    0,    0, 1018, 1019, 1020,    0,    0, 1018,    0,
        0, 1021,    0, 1021,    0,    0,    0,    0, 1021, 1019,

     1020, 1019, 1020, 1021,    0,    0, 1019, 1020,    0,    0,
        0, 1019, 1020,    0, 1022, 1023, 1022, 1023, 1021,    0,
     1021, 1022, 1023,    0,    0, 1021, 1022, 1023,    0,    0,
     1021,    0,    0, 1024,    0,    0,    0,    0, 1025,    0,
     1024, 1022, 1023, 1022, 1023, 1025,    0, 1024, 1022, 1023,
     1024,    0, 1025, 1022, 1023, 1025, 1026,    0,    0,    0,
     1024,    0,    0, 1026, 1027, 1025, 1027, 1024,    0,    0,
     1026, 1027, 1025, 1026, 1024, 1026,    0, 1024, 1027, 1025,
        0, 1027, 1025, 1026,    0,    0,    0, 1028,    0,    0,
     1026, 1027,    0, 1027, 1028,    0, 1029, 1026, 1027,    0,

     1026, 1028, 1026, 1029, 1028, 1027, 1028,    0, 1027,    0,
     1029,    0, 1030, 1029, 1028,    0,    0,    0, 1031, 1030,
        0, 1028,    0, 1029,    0, 1031, 1030, 1032, 1028, 1030,
     1029, 1028, 1031, 1028, 1032, 1031,    0, 1029,    0, 1030,
     1029, 1032,    0, 1033, 1032, 1031, 1030,    0,    0,    0,
     1033,    0, 1031, 1030, 1032,    0, 1030, 1033,    0, 1031,
     1033, 1032, 1031,    0,    0,    0,    0, 1034, 1032, 1034,
     1033, 1032,    0, 1071, 1034, 1071, 1072, 1033, 1072, 1034,
     1071,    0,    0, 1072, 1033, 1071,    0, 1033, 1072,    0,
        0,    0,    0,    0, 1034,    0, 1034, 1073,    0, 1073,

     1071, 1034, 1071, 1072, 1073, 1072, 1034, 1071,    0, 1073,
     1072, 1074, 1071, 1074,    0, 1072,    0,    0, 1074,    0,
     1075,    0, 1075, 1074, 1073,    0, 1073, 1075,    0,    0,
        0, 1073, 1075, 1077,    0,    0, 1073, 1077, 1074, 1076,
     1074, 1076,    0, 1077,    0, 1074, 1076, 1075, 1078, 1075,
     1074, 1076,    0, 1077, 1075, 1078,    0,    0,    0, 1075,
     1077,    0, 1078,    0, 1077, 1078, 1076, 1079, 1076, 1080,
     1077,    0,    0, 1076, 1079, 1078, 1080,    0, 1076,    0,
     1077, 1079, 1078, 1080, 1079,    0, 1080, 1081,    0, 1078,
        0, 1081, 1078,    0, 1079,    0, 1080, 1081,    0,    0,

        0, 1079, 1082, 1080,    0, 1083, 1082, 1081, 1079, 1083,
     1080, 1079, 1082, 1080, 1081, 1083,    0, 1082, 1081,    0,
        0,    0, 1082,    0, 1081, 1083,    0, 1084,    0, 1082,
        0, 1084, 1083, 1082, 1081,    0, 1083, 1084,    0, 1082,
        0, 1085, 1083,    0, 1082, 1085, 1086, 1084,    0, 1082,
     1086, 1085, 1083, 1087, 1084, 1087, 1086,    0, 1084, 1087,
        0, 1085,    0,    0, 1084, 1087, 1086,    0, 1085, 1088,
        0, 1088, 1085, 1086, 1084, 1087, 1088, 1086, 1085,    0,
     1087, 1088, 1087, 1086,    0,    0, 1087, 1089, 1085, 1089,
     1090, 1091, 1087, 1086, 1089, 1091, 1088, 1090, 1088, 1089,

        0, 1091, 1087, 1088, 1090, 1092,    0, 1090, 1088, 1092,
        0, 1091,    0,    0, 1089, 1092, 1089, 1090, 1091, 1093,
        0, 1089, 1091, 1093, 1090, 1092, 1089,    0, 1091, 1093,
        0, 1090, 1092, 1094, 1090,    0, 1092, 1094, 1091, 1093,
        0,    0, 1092, 1094,    0,    0, 1093, 1095,    0,    0,
     1093, 1095, 1092, 1094,    0, 1096, 1093, 1095,    0, 1096,
     1094, 1096, 1095,    0, 1094, 1096, 1093, 1095,    0,    0,
     1094,    0,    0, 1097, 1095, 1096,    0, 1097, 1095,    0,
     1094, 1098, 1096, 1097, 1095, 1098, 1096,    0, 1096, 1095,
        0, 1098, 1096, 1097, 1095, 1099, 1098,    0,    0, 1099,

     1097, 1098, 1096,    0, 1097, 1099,    0, 1100, 1098,    0,
     1097,    0, 1098,    0, 1100, 1099,    0,    0, 1098,    0,
     1097, 1100, 1099, 1098, 1100,    0, 1099,    0, 1098, 1102,
        0,    0, 1099, 1101, 1100,    0, 1102,    0,    0,    0,
     1101, 1100, 1099, 1102,    0, 1101, 1102, 1101, 1100,    0,
     1101, 1100, 1103,    0,    0,    0, 1102,    0, 1104, 1103,
     1101,    0, 1104, 1102,    0,    0, 1103, 1101, 1104, 1103,
     1102, 1103, 1101, 1102, 1101,    0,    0, 1101, 1104, 1103,
     1105,    0,    0,    0, 1105, 1104, 1103,    0,    0, 1104,
     1105,    0,    0, 1103,    0, 1104, 1103,    0, 1103, 1106,

     1105,    0, 1122, 1106, 1124, 1104, 1122, 1105, 1124, 1106,
        0, 1105, 1122,    0, 1124,    0,    0, 1105,    0, 1106,
        0,    0, 1122,    0, 1124,    0, 1106, 1105, 1123, 1122,
     1106, 1124, 1123, 1122,    0, 1124, 1106,    0, 1123, 1122,
     1125, 1124,    0, 1123, 1125,    0, 1106,    0, 1123, 1122,
     1125, 1124, 1127, 1126, 1128, 1123, 1127, 1126, 1128, 1123,
     1125,    0, 1127, 1126, 1128, 1123,    0, 1125, 1126,    0,
     1123, 1125, 1127, 1126, 1128, 1123,    0, 1125,    0, 1127,
     1126, 1128,    0, 1127, 1126, 1128,    0, 1125,    0, 1127,
     1126, 1128,    0,    0,    0, 1126, 1129, 1130, 1131, 1127,

     1126, 1128, 1132, 1129, 1130, 1131,    0,    0,    0, 1132,
     1129, 1130, 1131, 1129, 1130, 1131, 1132,    0,    0, 1132,
        0,    0,    0, 1129, 1130, 1131,    0,    0,    0, 1132,
     1129, 1130, 1131,    0,    0,    0, 1132, 1129, 1130, 1131,
     1129, 1130, 1131, 1132, 1133, 1134, 1132, 1135, 1133, 1134,
        0, 1135,    0,    0, 1133, 1134, 1134, 1135,    0, 1136,
        0,    0,    0, 1136, 1133, 1134,    0, 1135,    0, 1136,
        0, 1133, 1134,    0, 1135, 1133, 1134,    0, 1135, 1136,
        0, 1133, 1134, 1134, 1135, 1143, 1136,    0,    0, 1143,
     1136, 1133, 1134, 1144, 1135, 1143, 1136, 1144,    0,    0,

        0,    0, 1145, 1144, 1145, 1143, 1136, 1148,    0, 1145,
        0, 1148, 1143, 1144, 1145,    0, 1143, 1148,    0,    0,
     1144, 1146, 1143, 1146, 1144,    0,    0, 1148, 1146, 1145,
     1144, 1145, 1143, 1146, 1148, 1147, 1145, 1147, 1148, 1152,
     1144, 1145, 1147, 1152, 1148,    0,    0, 1147, 1146, 1152,
     1146,    0,    0, 1153, 1148, 1146,    0, 1153,    0, 1152,
     1146,    0, 1147, 1153, 1147, 1154, 1152, 1154,    0, 1147,
     1152,    0, 1154, 1153, 1147,    0, 1152, 1154,    0,    0,
     1153, 1156,    0, 1156, 1153,    0, 1152,    0, 1156,    0,
     1153,    0, 1154, 1156, 1154,    0,    0,    0,    0, 1154,

     1153,    0,    0,    0, 1154,    0,    0,    0, 1156,    0,
     1156,    0,    0,    0,    0, 1156,    0,    0,    0,    0,
     1156, 1158, 1158, 1158, 1158, 1158, 1159,    0,    0, 1159,
     1159, 1161, 1161, 1161,    0, 1161, 1162,    0, 1162, 1162,
     1162, 1163,    0, 1163, 1163, 1163, 1164,    0, 1164, 1164,
     1164, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,

     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 2713 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2727 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 58 "flex_lexer.l"


#line 3014 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1158 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1157 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 64 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(QUARTER)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(TINYINT)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(BOOLEAN)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 148:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 155:
#line 221 "flex_lexer.l"
case 156:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 231 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 237 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 242 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 243 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 244 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 245 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 246 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 248 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 251 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3910 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1158 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1158 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1157);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 251 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

